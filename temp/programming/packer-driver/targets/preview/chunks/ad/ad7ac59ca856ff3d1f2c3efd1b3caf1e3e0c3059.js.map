{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/gameServer/GameServerAppRoomMgr.ts"],"names":["GameServerAppRoomMgr","ENetworkState","ErrorCodes","Result","EPlayerInputFrameType","PlayerAuthHelper","GameRoom","getPlayerCurrGameRoom","player","authInfo","currRoomId","rooms","appRooms","get","appId","room","constructor","gameWsServer","gameConnMgr","gameClusterClient","matchReqTerminal","gameServerNodeId","Map","retainEmptyRoomTimeout","onConnDiconnect","connId","playerInfo","networkState","OFFLINE","onlinePlayerConns","removeConnection","playerId","triggerChangePlayerNetworkState","roomWaitReconnectTime","onConnReconnect","conn","ONLINE","addConnection","onAuthedPlayerDisconnect","leaveRoom","listenMsg","call","currPlayer","playerInpFrame","Operates","inpFrame","operates","msg","robotPlayerId","game","playerSendSyncState","getRooms","set","getOrInitRoom","roomId","length","gameRoom","exRet","extractRoom","succ","roomExInfo","data","regInfo","roomInfo","internalDismissRoom","hd","clearTimeout","delete","dispose","getRoomInfo","getGameRoom","joinRoom","joinPara","buildErr","RoomNeedLeavePrevious","RoomNotFound","ret","reHd","buildSucc","undefined","teamId","updatePlayerCurrRoomId","playerToken","isDismiss","playerList","retainEmptyRoomTime","setTimeout","dismissRoom","rs","values","changeCurrRoom","changePara","changeRoom","changeCustomPlayerProfile","customPlayerProfile","changeCustomPlayerStatus","customPlayerStatus","changePlayerTeam","newTeamId","RoomNotIn","transition","createRoomRobot","createPa","roomRobotLeave","requestMatch","matchParams","cancelMatch","queryMatch"],"mappings":"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","sourcesContent":["\nimport { WsServer } from \"tsrpc\";\nimport { MsgPlayerInpFrame } from \"../shared/gameClient/protocols/MsgPlayerInpFrame\";\nimport { MsgPlayerSendSyncState } from \"../shared/gameClient/protocols/MsgPlayerSendSyncState\";\nimport { serviceProto as GameServiceProto, ServiceType as GameServiceType } from \"../shared/gameClient/protocols/serviceProto\";\nimport { MatchRequestTerminal } from \"../shared/tsgfServer/match/MatchRequestTerminal\";\nimport { IMatchFromPlayer, IMatchParams, IMatchParamsFromPlayer, IMatchParamsFromRoomAllPlayer, IMatchResult } from \"../shared/tsgf/match/Models\";\nimport { ENetworkState, IPlayerInfo, IPlayerInfoPara } from \"../shared/tsgf/player/IPlayerInfo\";\nimport { ErrorCodes, IResult, Result } from \"../shared/tsgf/Result\";\nimport { EPlayerInputFrameType } from \"../shared/tsgf/room/IGameFrame\";\nimport { IChangeRoomPara, IJoinRoomPara, IRoomInfo } from \"../shared/tsgf/room/IRoomInfo\";\nimport { IPlayer } from \"../shared/tsgfServer/auth/Models\";\nimport { PlayerAuthHelper } from \"../shared/tsgfServer/auth/PlayerAuthHelper\";\nimport { RoomHelper } from \"../shared/tsgfServer/room/RoomHelper\";\nimport { GameConnMgr } from \"./GameConnMgr\";\nimport { GameRoom } from \"./GameRoom\";\nimport { GameMsgCall, GameWsServer } from \"./GameServer\";\nimport { GameClusterNodeClient } from \"../shared/tsgfServer/gameCluster/GameClusterNodeClient\";\n\nexport type Rooms = Map<string, GameRoom>;\n\nexport class GameServerAppRoomMgr {\n\n    private gameWsServer: GameWsServer;\n    protected gameConnMgr: GameConnMgr;\n    protected appRooms: Map<string, Rooms> = new Map<string, Rooms>();\n    protected gameServerNodeId: string;\n    protected gameClusterClient: GameClusterNodeClient;\n    protected matchReqTerminal: MatchRequestTerminal;\n    /**保留空房间的定时器,超时没来人则解散房间*/\n    protected retainEmptyRoomTimeout: Map<string, any> = new Map<string, any>();\n\n    protected getPlayerCurrGameRoom(player?: IPlayer): GameRoom | null {\n        if (player?.authInfo.currRoomId) {\n            let rooms = this.appRooms.get(player.authInfo.appId);\n            if (rooms) {\n                let room = rooms.get(player.authInfo.currRoomId);\n                return room ?? null;\n            }\n        }\n        return null;\n    }\n\n    constructor(gameWsServer: GameWsServer, gameConnMgr: GameConnMgr, gameClusterClient: GameClusterNodeClient, matchReqTerminal: MatchRequestTerminal, gameServerNodeId: string) {\n        this.gameWsServer = gameWsServer;\n        this.gameConnMgr = gameConnMgr;\n        this.gameClusterClient = gameClusterClient;\n        this.matchReqTerminal = matchReqTerminal;\n        this.gameServerNodeId = gameServerNodeId;\n\n        this.gameConnMgr.onConnDiconnect((connId, player) => {\n            //掉线, 通知房间的其他玩家\n            player.playerInfo.networkState = ENetworkState.OFFLINE;\n            let room = this.getPlayerCurrGameRoom(player);\n            if (room) {\n                room.onlinePlayerConns.removeConnection(player.playerInfo.playerId);\n                room.triggerChangePlayerNetworkState(player.playerInfo);\n                // 有在房间中, 并且有设置断线重连等待时间,则允许等待\n                if (player.roomWaitReconnectTime) return true;\n            }\n            // 默认不等待重连\n            return false;\n        });\n        this.gameConnMgr.onConnReconnect(async (conn, player) => {\n            //上线, 通知房间的其他玩家\n            player.playerInfo.networkState = ENetworkState.ONLINE;\n            let room = this.getPlayerCurrGameRoom(player);\n            if (room) {\n                await room.triggerChangePlayerNetworkState(player.playerInfo);\n                room.onlinePlayerConns.addConnection(conn);\n            }\n        });\n        this.gameConnMgr.onAuthedPlayerDisconnect((connId, player) => {\n            //玩家下线了，就执行退出房间操作\n            this.leaveRoom(player);\n        });\n\n        //统一侦听,并将消息传递给房间对象,而不是每个房间各自注册,因为房间变动太频繁\n        this.gameWsServer.listenMsg('PlayerInpFrame', (call: GameMsgCall<MsgPlayerInpFrame>) => {\n            let room = this.getPlayerCurrGameRoom(call.conn.currPlayer);\n            room?.playerInpFrame(call.conn.currPlayer,\n                EPlayerInputFrameType.Operates,\n                inpFrame => inpFrame.operates = call.msg.operates,\n                call.msg.robotPlayerId);\n        });\n        this.gameWsServer.listenMsg(\"PlayerSendSyncState\", (call: GameMsgCall<MsgPlayerSendSyncState>) => {\n            if (call.conn.currPlayer?.authInfo.currRoomId) {\n                let rooms = this.appRooms.get(call.conn.currPlayer.authInfo.appId);\n                if (rooms) {\n                    let room = rooms.get(call.conn.currPlayer.authInfo.currRoomId);\n                    if (room) {\n                        room.game.playerSendSyncState(call.conn.currPlayer, call.msg);\n                    }\n                }\n            }\n        });\n    }\n\n\n    /**\n     * 获取应用下的房间集合\n     *\n     * @protected\n     * @param appId\n     * @returns\n     */\n    protected getRooms(appId: string): Rooms {\n        let rooms = this.appRooms.get(appId);\n        if (!rooms) {\n            rooms = new Map<string, GameRoom>();\n            this.appRooms.set(appId, rooms);\n        }\n        return rooms;\n    }\n    /**\n     * 获取或初始化房间（只要房间ID确实是分配给本游戏服务器的）\n     *\n     * @public\n     * @param roomId\n     * @returns\n     */\n    protected async getOrInitRoom(rooms: Rooms, roomId: string): Promise<GameRoom | null> {\n        if (!roomId || roomId.length > 200) return null;\n\n        let gameRoom: GameRoom | undefined | null = rooms.get(roomId);\n        if (gameRoom) return gameRoom;\n\n        let exRet = await this.gameClusterClient.extractRoom(roomId);\n        if (!exRet.succ) {\n            //这里可能并发,所以回来再获取一次,因为下面到设置到字典中都没异步,单线程node来说这一步是可靠的\n            gameRoom = rooms.get(roomId);\n            if (gameRoom) return gameRoom;\n            return null;\n        }\n        let roomExInfo = exRet.data;\n        gameRoom = new GameRoom(roomExInfo.regInfo, roomExInfo.roomInfo, this.gameWsServer, this.gameConnMgr, this.matchReqTerminal, this.gameClusterClient);\n        rooms.set(roomId, gameRoom);\n        return gameRoom;\n    }\n\n    protected internalDismissRoom(rooms: Rooms, gameRoom: GameRoom): void {\n        let hd = this.retainEmptyRoomTimeout.get(gameRoom.roomInfo.roomId);\n        if (hd) {\n            clearTimeout(hd);\n            this.retainEmptyRoomTimeout.delete(gameRoom.roomInfo.roomId);\n        }\n        rooms.delete(gameRoom.roomInfo.roomId);\n        gameRoom.dispose();\n    }\n\n\n    /**\n     * 获取玩家当前所在的房间信息\n     *\n     * @public\n     * @param player\n     * @returns\n     */\n    public async getRoomInfo(player: IPlayer): Promise<IRoomInfo | null> {\n        if (!player.authInfo.currRoomId) return null;\n        let rooms = this.getRooms(player.authInfo.appId);\n        let gameRoom = await this.getOrInitRoom(rooms, player.authInfo.currRoomId);\n        if (!gameRoom) return null;\n        return gameRoom.roomInfo;\n    }\n    /**\n     * 获取玩家当前所在的房间操作对象\n     *\n     * @public\n     * @param player\n     * @returns\n     */\n    public async getGameRoom(player: IPlayer): Promise<GameRoom | null> {\n        if (!player.authInfo.currRoomId) return null;\n        let rooms = this.getRooms(player.authInfo.appId);\n        let gameRoom = await this.getOrInitRoom(rooms, player.authInfo.currRoomId);\n        if (!gameRoom) return null;\n        return gameRoom;\n    }\n\n\n\n    /**\n     * 玩家加入房间，会根据房间等的规则判断是否可以加入\n     *\n     * @public\n     * @param player\n     * @param roomId\n     * @returns\n     */\n    public async joinRoom(player: IPlayer, joinPara: IJoinRoomPara): Promise<IResult<IRoomInfo>> {\n        if (player.authInfo.currRoomId && player.authInfo.currRoomId !== joinPara.roomId) {\n            //之前已经在一个房间中的话,要先退出\n            return Result.buildErr('请先退出之前的房间！', ErrorCodes.RoomNeedLeavePrevious);\n        }\n        let rooms = this.getRooms(player.authInfo.appId);\n        let gameRoom = await this.getOrInitRoom(rooms, joinPara.roomId);\n        if (!gameRoom) {\n            return Result.buildErr('加入房间失败：不存在的房间ID！', ErrorCodes.RoomNotFound);\n        }\n        let ret = await gameRoom.joinRoom(player, joinPara);\n\n        if (ret.succ) {\n            //加入成功\n            //清理空房间保留的定时器\n            let reHd = this.retainEmptyRoomTimeout.get(gameRoom.roomInfo.roomId);\n            if (reHd) {\n                clearTimeout(reHd);\n                this.retainEmptyRoomTimeout.delete(reHd);\n            }\n        }\n\n        return ret;\n    }\n\n\n    /**\n     * 离开玩家当前所在的房间，如果没在或者房间已经关闭则是返回失败的结果\n     *\n     * @public\n     * @param player\n     * @returns\n     */\n    public async leaveRoom(player: IPlayer): Promise<IResult<null>> {\n        if (!player.authInfo.currRoomId) {\n            //当前不在房间中, 直接视为成功!\n            return Result.buildSucc(null);\n        }\n        let rooms = this.getRooms(player.authInfo.appId);\n        let gameRoom = rooms.get(player.authInfo.currRoomId);\n        if (!gameRoom) {\n            player.authInfo.currRoomId = undefined;\n            player.playerInfo.teamId = undefined;\n            PlayerAuthHelper.updatePlayerCurrRoomId(player.authInfo.playerToken, player.authInfo.currRoomId);\n            return Result.buildErr(\"房间已经关闭，无需退出！\");\n        }\n        let ret = await gameRoom.leaveRoom(player);\n        if (!ret.succ) return ret;\n\n        if (gameRoom.isDismiss) {\n            //玩家离开后,房间被设置为解散,则房间管理释放这个房间\n            this.internalDismissRoom(rooms, gameRoom);\n        } else {\n            //没解散看一下是否符合解散条件\n            if (gameRoom.roomInfo.playerList.length <= 0 && gameRoom.roomInfo.retainEmptyRoomTime) {\n                //房间没人可以解散.但要求保留空房间,则设置定时解散\n                let hd = setTimeout(() => {\n                    gameRoom?.dismissRoom();\n                    if (gameRoom) this.internalDismissRoom(rooms, gameRoom);\n                }, gameRoom.roomInfo.retainEmptyRoomTime);\n                this.retainEmptyRoomTimeout.set(gameRoom.roomInfo.roomId, hd);\n            }\n        }\n\n        return ret;\n    }\n\n\n\n    /**\n     * 解散房间\n     *\n     * @public\n     * @param player 当前玩家,也可以放空\n     * @param roomId 房间ID\n     * @returns\n     */\n    public async dismissRoom(player: IPlayer | undefined, roomId: string): Promise<IResult<IRoomInfo>> {\n        let appId = player?.authInfo.appId;\n        let rooms: Rooms | undefined;\n        let gameRoom: GameRoom | undefined;\n        if (appId) {\n            // 有提供appId,直接取\n            rooms = this.getRooms(appId);\n            gameRoom = rooms.get(roomId);\n        } else {\n            //没提供大不了遍历一下应用,应用能有几个对吧\n            for (const rs of this.appRooms.values()) {\n                gameRoom = rs.get(roomId);\n                if (gameRoom) {\n                    rooms = rs;\n                    break;\n                }\n            }\n        }\n\n        if (!rooms || !gameRoom) {\n            return Result.buildErr('解散房间失败：不存在的房间ID！', ErrorCodes.RoomNotFound);\n        }\n        let ret = await gameRoom.dismissRoom(player);\n        if (!ret.succ) return ret;\n\n        this.internalDismissRoom(rooms, gameRoom);\n\n        return ret;\n    }\n    /**\n     * 玩家修改当前房间,非房主则返回失败!\n     *\n     * @public\n     * @param player 当前玩家\n     * @param changePara 要修改的信息\n     * @returns\n     */\n    public async changeCurrRoom(player: IPlayer, changePara: IChangeRoomPara): Promise<IResult<IRoomInfo>> {\n        let gameRoom = this.getPlayerCurrGameRoom(player);\n        if (!gameRoom) {\n            return Result.buildErr('不在房间中！');\n        }\n        return await gameRoom.changeRoom(player, changePara);\n    }\n\n    /**\n     * 修改自己的玩家自定义属性\n     *\n     * @public\n     * @param player 当前玩家\n     * @param customPlayerProfile 新值\n     * @param [robotPlayerId] \n     * @returns\n     */\n    public async changeCustomPlayerProfile(player: IPlayer, customPlayerProfile: string, robotPlayerId?: string): Promise<IResult<IPlayerInfo>> {\n        let gameRoom = this.getPlayerCurrGameRoom(player);\n        if (!gameRoom) {\n            //不在房间,直接修改\n            player.playerInfo.customPlayerProfile = customPlayerProfile;\n            return Result.buildSucc(player.playerInfo);\n        }\n        return await gameRoom.changeCustomPlayerProfile(player, customPlayerProfile, robotPlayerId);\n    }\n    /**\n     * 修改自己的玩家自定义状态\n     *\n     * @public\n     * @param player 当前玩家\n     * @param customPlayerStatus 新值\n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns\n     */\n    public async changeCustomPlayerStatus(player: IPlayer, customPlayerStatus: number, robotPlayerId?: string): Promise<IResult<IPlayerInfo>> {\n        let gameRoom = this.getPlayerCurrGameRoom(player);\n        if (!gameRoom) {\n            //不在房间,直接修改\n            player.playerInfo.customPlayerStatus = customPlayerStatus;\n            return Result.buildSucc(player.playerInfo);\n        }\n        return await gameRoom.changeCustomPlayerStatus(player, customPlayerStatus, robotPlayerId);\n    }\n    /**\n     *玩家修改自己所在队伍\n     *\n     * @param player\n     * @param newTeamId\n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns\n     */\n    public async changePlayerTeam(player: IPlayer, newTeamId?: string, robotPlayerId?: string): Promise<IResult<IRoomInfo>> {\n        let gameRoom = this.getPlayerCurrGameRoom(player);\n        if (!gameRoom) {\n            //不在房间\n            return Result.buildErr('不在房间中！', ErrorCodes.RoomNotIn);\n        }\n        let ret = await gameRoom.changePlayerTeam(player, newTeamId, robotPlayerId);\n        return Result.transition(ret, () => gameRoom!.roomInfo);\n    }\n\n\n    /**\n     * 玩家创建房间机器人(退出房间会同步退出)\n     * @param player \n     * @param createPa \n     * @param [teamId] \n     * @returns room robot \n     */\n    public async createRoomRobot(player: IPlayer, createPa: IPlayerInfoPara, teamId?: string): Promise<IResult<IPlayerInfo>> {\n        let gameRoom = this.getPlayerCurrGameRoom(player);\n        if (!gameRoom) {\n            //不在房间\n            return Result.buildErr('不在房间中！', ErrorCodes.RoomNotIn);\n        }\n        let ret = await gameRoom.createRoomRobot(player, createPa, teamId);\n        return ret;\n    }\n\n    /**\n     * 玩家的指定房间机器人退出房间(即销毁)\n     * @param player \n     * @param robotPlayerId \n     * @returns 返回该机器人信息\n     */\n    public async roomRobotLeave(player: IPlayer, robotPlayerId: string): Promise<IResult<IPlayerInfo>> {\n        let gameRoom = this.getPlayerCurrGameRoom(player);\n        if (!gameRoom) {\n            //不在房间\n            return Result.buildErr('不在房间中！', ErrorCodes.RoomNotIn);\n        }\n        return await gameRoom.roomRobotLeave(player, robotPlayerId);\n    }\n\n\n\n\n    /**\n     * 发起房间所有玩家匹配请求\n     * 请求成功即返回,同时房间中的所有玩家会收到通知\n     * 匹配有结果了还会收到消息通知, 并且可由一个玩家调用QueryMatch等待完整匹配结果\n     *\n     * @public\n     * @param player\n     * @param matchParams\n     * @returns\n     */\n    public async requestMatch(player: IPlayer, matchParams: IMatchParamsFromRoomAllPlayer)\n        : Promise<IResult<string>> {\n\n        let gameRoom = this.getPlayerCurrGameRoom(player);\n        if (!gameRoom) {\n            //不在房间\n            return Result.buildErr('不在房间中！', ErrorCodes.RoomNotIn);\n        }\n        let ret = await gameRoom.requestMatch(player, matchParams);\n        return ret;\n    }\n\n\n    /**\n     * 取消匹配请求\n     * 如果提交成功, 将会由匹配服务器根据请求顺序来决定是否成功取消\n     * 如果成功取消,则会触发匹配结果(通知+queryMatch),结果为\"请求被取消\"[code=ErrorCodes.MatchRequestCancelled]\n     * 如果没取消成功,说明在取消之前,匹配服务器已经匹配完成,通知过来并发了,所以紧接着会收到成功的匹配结果(通知+queryMatch)\n     *\n     * @param player\n     * @returns\n     */\n    public async cancelMatch(player: IPlayer): Promise<IResult<null>> {\n        let gameRoom = this.getPlayerCurrGameRoom(player);\n        if (!gameRoom) {\n            //不在房间\n            return Result.buildErr('不在房间中！', ErrorCodes.RoomNotIn);\n        }\n        let ret = await gameRoom.cancelMatch(player);\n        return ret;\n    }\n\n\n    /**\n     * 查询匹配结果, 会等到有结果了才返回!\n     * 注意: 同时只能只有一个玩家进行查询等待,一般使用通知来获取结果即可\n     *\n     * @param player\n     * @returns\n     */\n    public async queryMatch(player: IPlayer): Promise<IResult<IMatchResult>> {\n        let gameRoom = this.getPlayerCurrGameRoom(player);\n        if (!gameRoom) {\n            //不在房间\n            return Result.buildErr('不在房间中！', ErrorCodes.RoomNotIn);\n        }\n        let ret = await gameRoom.queryMatch(player);\n        return ret;\n    }\n}"]}