{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/test/unitTest/api/ApiRoomAllotRules.test.ts"],"names":["assert","ErrorCodes","createAndEnterRoom","hallClient","appDismissRoom","joinRoom","testEachBuild","describe","test","testData","gameClient1Ret","playerToken1","playerId1","roomType","ok","succ","err","gameClient1","data","gameClient","gameClient2Ret","playerToken2","playerId2","code","RoomNoServerAvailable","dismissRoom","gameClient2","gameClient3Ret","playerToken3","playerId3","maxPlayers","gameClient3","getOrCreateRet","getOrCreateRoom","createRoomPara","ownerPlayerId","roomName","isPrivate","matchRoomType","createRoomOnlineInfo","roomId","matchRoomOnlineInfoList","length","JSON","stringify","playerToken4","playerId4","currRoomInfo","gameClient4","playerToken5","playerId5","createRet1","createRoom","createRet2","dismissRet"],"mappings":"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","sourcesContent":["import { assert } from \"chai\";\nimport { ErrorCodes } from \"../../../src/shared/tsgf/Result\";\nimport { createAndEnterRoom, hallClient, appDismissRoom, joinRoom, testEachBuild } from \"./ApiUtils\";\n\ndescribe(\"服务器分配规则验证\", () => {\n    test('empty', async function () { });\n    return;// 防止被批量执行这里return, 需要单独跑的时候再启用\n    // 需要启动 npm run devRunLimitOthers + npm run devRunLimitGameServer 作为单元测试环境\n\n    let testData = testEachBuild(5);\n\n    test('单类型房间数限制', async function () {\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', { roomType: 'Plaza' });\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n\n        let gameClient2Ret = await createAndEnterRoom(testData.playerToken2, testData.playerId2, 'zum2', { roomType: 'Plaza' });\n        assert.ok(gameClient2Ret.succ === false && gameClient2Ret.code === ErrorCodes.RoomNoServerAvailable, '配置 Plaza 只能有一个,第二次创建应该失败!');\n\n        await testData.gameClient1!.dismissRoom();\n\n        gameClient2Ret = await createAndEnterRoom(testData.playerToken2, testData.playerId2, 'zum2', { roomType: 'Plaza' });\n        assert.ok(gameClient2Ret.succ === true, gameClient2Ret.err + '上一个 Plaza 房间都解散了,应该成功才对!');\n        testData.gameClient2 = gameClient2Ret.data!.gameClient;\n\n        let gameClient3Ret = await createAndEnterRoom(testData.playerToken3, testData.playerId3, 'zum3', { roomType: 'Plaza' });\n        assert.ok(gameClient3Ret.succ === false && gameClient3Ret.code === ErrorCodes.RoomNoServerAvailable, '配置 Plaza 只能有一个,第二次创建应该失败!');\n\n    }, 999999999);\n\n\n    test('类型加最大玩家数10的房间数限制', async function () {\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', { roomType: 'MeetingRoom', maxPlayers: 10 });\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n\n        let gameClient2Ret = await createAndEnterRoom(testData.playerToken2, testData.playerId2, 'zum2', { roomType: 'MeetingRoom', maxPlayers: 10 });\n        assert.ok(gameClient2Ret.succ === true, gameClient2Ret.err);\n        testData.gameClient2 = gameClient2Ret.data!.gameClient;\n\n        let gameClient3Ret = await createAndEnterRoom(testData.playerToken3, testData.playerId3, 'zum3', { roomType: 'MeetingRoom', maxPlayers: 10 });\n        assert.ok(gameClient3Ret.succ === false && gameClient3Ret.code === ErrorCodes.RoomNoServerAvailable, '配置 MeetingRoom+10 只能有2个,第3次创建应该失败!');\n\n        //玩家2释放会议室, 后续应该成功\n        await testData.gameClient2.dismissRoom();\n\n        gameClient3Ret = await createAndEnterRoom(testData.playerToken3, testData.playerId3, 'zum3', { roomType: 'MeetingRoom', maxPlayers: 10 });\n        assert.ok(gameClient3Ret.succ === true, gameClient3Ret.err);\n        testData.gameClient3 = gameClient3Ret.data!.gameClient;\n\n    }, 999999999);\n\n\n    test('获取或创建房间_同类型同时存在个数的限制', async function () {\n        //玩家1\n        let getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken2, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId1,\n                roomType: 'Hall',\n                maxPlayers: 2,\n                roomName: '大厅',\n                isPrivate: true,\n            },\n            matchRoomType: true,\n        });\n        assert.ok(getOrCreateRet.succ, getOrCreateRet.err);\n        assert.ok(getOrCreateRet.data?.createRoomOnlineInfo, '应该没匹配到并且创建了一个房间');\n        // 玩家1进入自己创建的房间\n        testData.gameClient1 = await joinRoom(testData.playerToken1, getOrCreateRet.data!.createRoomOnlineInfo!.roomId, 'zum1');\n\n        //玩家2\n        getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken2, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId2,\n                roomType: 'Hall',\n                maxPlayers: 2,\n                roomName: '大厅',\n                isPrivate: true,\n            },\n            matchRoomType: true,\n        });\n        assert.ok(getOrCreateRet.succ, getOrCreateRet.err);\n        assert.ok(getOrCreateRet.data?.matchRoomOnlineInfoList?.length,\n            '应该匹配到房间才对' + JSON.stringify(getOrCreateRet.data));\n        // 玩家2进入玩家1创建的房间\n        testData.gameClient2 = await joinRoom(testData.playerToken2, getOrCreateRet.data!.matchRoomOnlineInfoList![0].roomId, 'zum2');\n\n\n        //玩家3\n        getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken3, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId3,\n                roomType: 'Hall',\n                maxPlayers: 2,\n                roomName: '大厅',\n                isPrivate: true,\n            },\n            matchRoomType: true,\n        });\n        assert.ok(getOrCreateRet.succ, getOrCreateRet.err);\n        assert.ok(getOrCreateRet.data?.createRoomOnlineInfo,\n            '应该要创建房间,但实际数据是:' + JSON.stringify(getOrCreateRet.data));\n        // 玩家3加入自己创建的房间\n        testData.gameClient3 = await joinRoom(testData.playerToken3, getOrCreateRet.data!.createRoomOnlineInfo!.roomId, 'zum3');\n\n        //玩家4\n        getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken4, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId4,\n                roomType: 'Hall',\n                maxPlayers: 2,\n                roomName: '大厅',\n                isPrivate: true,\n            },\n            matchRoomType: true,\n        });\n        assert.ok(getOrCreateRet.succ, getOrCreateRet.err);\n        assert.ok(getOrCreateRet.data?.matchRoomOnlineInfoList?.length === 1,\n            '应该匹配到了1个房间,但实际数据是:' + JSON.stringify(getOrCreateRet.data?.matchRoomOnlineInfoList));\n        assert.ok(getOrCreateRet.data!.matchRoomOnlineInfoList![0].roomId === testData.gameClient3.currRoomInfo?.roomId,\n            '应该匹配到玩家3创建的房间, 因为玩家1创建的房间已经满了(玩家1+玩家2)');\n        // 玩家4加入玩家3创建的房间\n        testData.gameClient4 = await joinRoom(testData.playerToken4, getOrCreateRet.data!.matchRoomOnlineInfoList![0].roomId, 'zum4');\n\n        //玩家5\n        getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken5, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId5,\n                roomType: 'Hall',\n                maxPlayers: 2,\n                roomName: '大厅',\n                isPrivate: true,\n            },\n            matchRoomType: true,\n        });\n        assert.ok(!getOrCreateRet.succ && getOrCreateRet.code === ErrorCodes.RoomNoServerAvailable,\n            '配置了大厅只能有2个房间,应该要满了才对!,实际:'+JSON.stringify(getOrCreateRet));\n\n    }, 999999999);\n    \n\n    test('验证创建但不提取是否也算数量', async function () {\n\n        let createRet1 = await hallClient.createRoom(testData.playerToken1, {\n            roomType: 'Plaza',\n            roomName: 'zum1',\n            maxPlayers: 4,\n            ownerPlayerId: testData.playerId1,\n            isPrivate: true,\n        });\n        assert.ok(createRet1.succ, createRet1.err);\n        \n        let createRet2 = await hallClient.createRoom(testData.playerToken2, {\n            roomType: 'Plaza',\n            roomName: 'zum2',\n            maxPlayers: 4,\n            ownerPlayerId: testData.playerId2,\n            isPrivate: true,\n        });\n        assert.ok(!createRet2.succ && createRet2.code === ErrorCodes.RoomNoServerAvailable, `配置 Plaza 只能有一个,第二次创建应该失败!${JSON.stringify(createRet2)}`);\n\n        let dismissRet = await appDismissRoom(createRet1.data!.roomId);\n        assert.ok(dismissRet.succ, dismissRet.err);\n\n        createRet2 = await hallClient.createRoom(testData.playerToken2, {\n            roomType: 'Plaza',\n            roomName: 'zum2',\n            maxPlayers: 4,\n            ownerPlayerId: testData.playerId2,\n            isPrivate: true,\n        });\n        assert.ok(createRet2.succ, createRet2.err);\n\n    }, 999999999);\n\n});\n"]}