{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/gameCluster/GameClusterNodeClient.ts"],"names":["GameClusterNodeClient","ErrorCodes","Result","ClusterNodeClient","EClusterClientType","gameClusterServiceProto","serviceProto","nodeClient","clusterClient","constructor","gameServerCfg","getGameServerCfg","getServerClientCount","clusterWSUrl","Node","clusterNodeId","clusterKey","cfg","serverInfo","serverNodeId","serverName","serverUrl","clientCount","extendData","allotRules","extractRoom","roomId","buildErr","AuthUnverified","ret","callApi","isSucc","err","message","code","buildSucc","regInfo","res","roomRegInfo","roomInfo","updateRoom","changedType","playerId","teamId","oldTeamId","dismissRoom"],"mappings":"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","sourcesContent":["import { WsClient } from \"tsrpc\";\nimport { IGameServerCfg } from \"../../../ServerConfig\";\nimport { ErrorCodes, IResult, Result } from \"../../tsgf/Result\";\nimport { IRoomInfo } from \"../../tsgf/room/IRoomInfo\";\nimport { ClusterNodeClient } from \"../cluster/ClusterNodeClient\";\nimport { EClusterClientType } from \"../cluster/Models\";\nimport { IGameServerInfoInServer } from \"../game/Models\";\nimport { IRoomRegInfo } from \"../room/Models\";\nimport { ERoomRegChangedType } from \"../room/RoomHelper\";\nimport { ServiceType as GameClusterServiceType, serviceProto as gameClusterServiceProto } from \"./protocols/serviceProto\";\n\nexport class GameClusterNodeClient extends ClusterNodeClient<GameClusterServiceType, IGameServerInfoInServer>{\n    protected get nodeClient(): WsClient<GameClusterServiceType> | undefined {\n        return this.clusterClient as WsClient<GameClusterServiceType> | undefined;\n    }\n\n    constructor(\n        gameServerCfg: IGameServerCfg,\n        getGameServerCfg: () => Promise<IGameServerCfg>,\n        getServerClientCount: () => number\n    ) {\n        super(gameClusterServiceProto, gameServerCfg.clusterWSUrl, EClusterClientType.Node, gameServerCfg.clusterNodeId, gameServerCfg.clusterKey,\n            async () => {\n                let cfg = await getGameServerCfg();\n                let serverInfo: IGameServerInfoInServer = {\n                    serverNodeId: gameServerCfg.clusterNodeId,\n                    serverName: cfg.serverName,\n                    serverUrl: cfg.serverUrl,\n                    clientCount: getServerClientCount(),\n                    extendData: cfg.extendData,\n                    allotRules: gameServerCfg.allotRules,\n                };\n                return serverInfo\n            });\n    }\n\n    public async extractRoom(roomId: string): Promise<IResult<{ regInfo: IRoomRegInfo, roomInfo: IRoomInfo }>> {\n        if (!this.nodeClient) return Result.buildErr('当前服务器断开！请稍后再试！', ErrorCodes.AuthUnverified);\n\n        let ret = await this.nodeClient.callApi('NodeExtractRoom', { roomId });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc({\n            regInfo: ret.res.roomRegInfo,\n            roomInfo: ret.res.roomInfo,\n        });\n    }\n    public async updateRoom(\n        roomRegInfo: IRoomRegInfo,\n        changedType: ERoomRegChangedType,\n        playerId?: string,\n        teamId?: string,\n        oldTeamId?: string\n    ): Promise<IResult<null>> {\n        if (!this.nodeClient) return Result.buildErr('当前服务器断开！请稍后再试！', ErrorCodes.AuthUnverified);\n\n        let ret = await this.nodeClient.callApi('NodeUpdateRoom', {\n            roomRegInfo,\n            changedType,\n            playerId,\n            teamId,\n            oldTeamId,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(null);\n    }\n    public async dismissRoom(roomId: string): Promise<IResult<IRoomRegInfo>> {\n        if (!this.nodeClient) return Result.buildErr('当前服务器断开！请稍后再试！', ErrorCodes.AuthUnverified);\n\n        let ret = await this.nodeClient.callApi('NodeDismissRoom', { roomId });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.roomRegInfo);\n    }\n}"]}