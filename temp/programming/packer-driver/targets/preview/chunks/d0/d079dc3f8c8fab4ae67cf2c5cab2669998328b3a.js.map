{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/gameServerCluster/GameServerRoomMgr.ts"],"names":["GameServerRoomMgr","ErrorCodes","Result","arrSkipAndLimit","GameServerHelper","ERoomRegChangedType","RoomHelper","constructor","clusterMgr","rooms","Map","serverRooms","waitExtractRooms","getRoomRegInfo","roomId","regInfo","get","getRoomOnlineInfo","roomRegInfo","buildRoomOnlineInfo","createRoomByGameServer","appId","createRoomPara","allotGameServerInfo","createInfo","buildRoomInfo","set","serverNodeId","waitExtractHd","setTimeout","dismissRoom","roomInfo","waitHD","getRedisClient","then","client","publishObject","changedType","Create","buildSucc","roomOnlineInfo","createRoom","buildErr","RoomIdExists","allotGameServer","RoomNoServerAvailable","extractRoom","waitExInfo","clearTimeout","delete","updateRoomInfo","updateInfo","Object","assign","joinRoomPlayerId","playerId","leaveRoomPlayerId","changePlayerId","teamId","newTeamId","oldTeamId","clearServerRooms","gameServerNodeId","Delete","dismissServerRooms","clear","nodeInfos","getNodeInfos","result","allotGameServerByInfos","snid","values","Promise","resolve","getOrAllotGameServer","getOrCreateRoomPara","matchLimitRoomCount","serverList","getServerRooms","matchRoomOnlineInfoList","s","info","matchRooms","filter","r","emptySeats","matchRoomType","roomType","matchMaxPlayers","maxPlayers","length","limit","sort","a","b","slice","push","map","createRet","succ","transition","createRoomOnlineInfo","data","filterRoomsByList","regInfos","skip","matchRegInfos","undefined","roomNameFullMatch","roomName","roomNameLike","includes","count","filterRooms"],"mappings":";;;sHAkBaA,iB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAlBJC,MAAAA,U,iBAAAA,U;AAAqBC,MAAAA,M,iBAAAA,M;;AAErBC,MAAAA,e,iBAAAA,e;;AACAC,MAAAA,gB,iBAAAA,gB;;AAIAC,MAAAA,mB,iBAAAA,mB;AAAsCC,MAAAA,U,iBAAAA,U;;;;;;;AAU/C;mCACaN,iB,GAAN,MAAMA,iBAAN,CAAwB;AAW3BO,QAAAA,WAAW,CAACC,UAAD,EAAmC;AAAA,eATpCA,UASoC;;AAP9C;AAO8C,eANpCC,KAMoC,GAND,IAAIC,GAAJ,EAMC;;AAL9C;AAK8C,eAJpCC,WAIoC,GAJkB,IAAID,GAAJ,EAIlB;;AAH9C;AAG8C,eAFpCE,gBAEoC,GAFa,IAAIF,GAAJ,EAEb;AAC1C,eAAKF,UAAL,GAAkBA,UAAlB;AACH;;AAEMK,QAAAA,cAAc,CAACC,MAAD,EAAsC;AACvD,cAAIC,OAAO,GAAG,KAAKN,KAAL,CAAWO,GAAX,CAAeF,MAAf,CAAd;AACA,cAAI,CAACC,OAAL,EAAc,OAAO,IAAP;AACd,iBAAOA,OAAP;AACH;;AACME,QAAAA,iBAAiB,CAACH,MAAD,EAAyC;AAC7D,cAAII,WAAW,GAAG,KAAKT,KAAL,CAAWO,GAAX,CAAeF,MAAf,CAAlB;AACA,cAAI,CAACI,WAAL,EAAkB,OAAO,IAAP;AAElB,iBAAO,KAAKV,UAAL,CAAgBW,mBAAhB,CAAoCD,WAApC,CAAP;AACH;;AAESE,QAAAA,sBAAsB,CAC5BC,KAD4B,EAE5BC,cAF4B,EAG5BC,mBAH4B,EAIJ;AACxB,cAAIC,UAAU,GAAG;AAAA;AAAA,wCAAWC,aAAX,CAAyBJ,KAAzB,EAAgCE,mBAAhC,EAAqDD,cAArD,CAAjB;AAEA,eAAKb,KAAL,CAAWiB,GAAX,CAAeF,UAAU,CAACT,OAAX,CAAmBD,MAAlC,EAA0CU,UAAU,CAACT,OAArD;AACA,cAAIJ,WAAW,GAAG,KAAKA,WAAL,CAAiBK,GAAjB,CAAqBO,mBAAmB,CAACI,YAAzC,CAAlB;;AACA,cAAI,CAAChB,WAAL,EAAkB;AACdA,YAAAA,WAAW,GAAG,IAAID,GAAJ,EAAd;AACA,iBAAKC,WAAL,CAAiBe,GAAjB,CAAqBH,mBAAmB,CAACI,YAAzC,EAAuDhB,WAAvD;AACH;;AACDA,UAAAA,WAAW,CAACe,GAAZ,CAAgBF,UAAU,CAACT,OAAX,CAAmBD,MAAnC,EAA2CU,UAAU,CAACT,OAAtD,EATwB,CAUxB;;AACA,cAAIa,aAAa,GAAGC,UAAU,CAAC,MAAM;AACjC,iBAAKC,WAAL,CAAiBN,UAAU,CAACT,OAAX,CAAmBD,MAApC;AACH,WAF6B,EAE3B,IAF2B,CAA9B;AAGA,eAAKF,gBAAL,CAAsBc,GAAtB,CAA0BF,UAAU,CAACT,OAAX,CAAmBD,MAA7C,EAAqD;AACjDiB,YAAAA,QAAQ,EAAEP,UAAU,CAACO,QAD4B;AAEjDC,YAAAA,MAAM,EAAEJ;AAFyC,WAArD,EAdwB,CAmBxB;;AACA;AAAA;AAAA,wCAAWK,cAAX,CAA0B,IAA1B,EAAgCC,IAAhC,CAAqCC,MAAM,IAAI;AAC3CA,YAAAA,MAAM,CAACC,aAAP,CAAqB,oBAArB,EAA2C;AACvCC,cAAAA,WAAW,EAAE;AAAA;AAAA,8DAAoBC,MADM;AAEvCvB,cAAAA,OAAO,EAAES,UAAU,CAACT;AAFmB,aAA3C;AAIH,WALD;AAOA,iBAAO;AAAA;AAAA,gCAAOwB,SAAP,CAAiBf,UAAU,CAACgB,cAA5B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACiBC,QAAAA,UAAU,CAACpB,KAAD,EAAgBC,cAAhB,EAAoF;AAAA;;AAAA;AACvG,gBAAIA,cAAc,CAACR,MAAf,IAAyB,KAAI,CAACL,KAAL,CAAWO,GAAX,CAAeM,cAAc,CAACR,MAA9B,CAA7B,EAAoE;AAChE,qBAAO;AAAA;AAAA,oCAAO4B,QAAP,CAAgB,YAAhB,EAA8B;AAAA;AAAA,4CAAWC,YAAzC,CAAP;AACH;;AAED,gBAAIpB,mBAAmB,SAAS,KAAI,CAACqB,eAAL,CAAqBtB,cAArB,CAAhC;;AACA,gBAAI,CAACC,mBAAL,EAA0B;AACtB,qBAAO;AAAA;AAAA,oCAAOmB,QAAP,CAAgB,QAAhB,EAA0B;AAAA;AAAA,4CAAWG,qBAArC,CAAP;AACH;;AACD,mBAAO,KAAI,CAACzB,sBAAL,CAA4BC,KAA5B,EAAmCC,cAAnC,EAAmDC,mBAAnD,CAAP;AATuG;AAU1G;AAED;AACJ;AACA;AACA;AACA;;;AACWuB,QAAAA,WAAW,CAAChC,MAAD,EAAwE;AACtF,cAAIC,OAAO,GAAG,KAAKN,KAAL,CAAWO,GAAX,CAAeF,MAAf,CAAd;AACA,cAAI,CAACC,OAAL,EAAc,OAAO,IAAP;AACd,cAAIgC,UAAU,GAAG,KAAKnC,gBAAL,CAAsBI,GAAtB,CAA0BF,MAA1B,CAAjB;AACA,cAAI,CAACiC,UAAL,EAAiB,OAAO,IAAP;AACjBC,UAAAA,YAAY,CAACD,UAAU,CAACf,MAAZ,CAAZ;AACA,eAAKpB,gBAAL,CAAsBqC,MAAtB,CAA6BnC,MAA7B;AACA,cAAIiB,QAAQ,GAAGgB,UAAU,CAAChB,QAA1B;AACA,iBAAO;AACHhB,YAAAA,OADG;AAEHgB,YAAAA;AAFG,WAAP;AAIH;AAED;AACJ;AACA;AACA;AACA;;;AACWmB,QAAAA,cAAc,CAACC,UAAD,EAAyC;AAC1D,cAAIpC,OAAO,GAAG,KAAKN,KAAL,CAAWO,GAAX,CAAemC,UAAU,CAACjC,WAAX,CAAuBJ,MAAtC,CAAd;AACA,cAAI,CAACC,OAAL,EAAc,OAAO,KAAP;AAEdqC,UAAAA,MAAM,CAACC,MAAP,CAActC,OAAd,EAAuBoC,UAAU,CAACjC,WAAlC,EAJ0D,CAM1D;;AACA;AAAA;AAAA,wCAAWe,cAAX,CAA0B,IAA1B,EAAgCC,IAAhC,CAAqCC,MAAM,IAAI;AAC3CA,YAAAA,MAAM,CAACC,aAAP,CAAqB,oBAArB,EAA2C;AACvCC,cAAAA,WAAW,EAAEc,UAAU,CAACd,WADe;AAEvCtB,cAAAA,OAAO,EAAEA,OAF8B;AAGvCuC,cAAAA,gBAAgB,EAAEH,UAAU,CAACI,QAHU;AAIvCC,cAAAA,iBAAiB,EAAEL,UAAU,CAACI,QAJS;AAKvCE,cAAAA,cAAc,EAAEN,UAAU,CAACI,QALY;AAMvCG,cAAAA,MAAM,EAAEP,UAAU,CAACO,MANoB;AAOvCC,cAAAA,SAAS,EAAER,UAAU,CAACO,MAPiB;AAQvCE,cAAAA,SAAS,EAAET,UAAU,CAACS;AARiB,aAA3C;AAUH,WAXD;AAYA,iBAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACW9B,QAAAA,WAAW,CAAChB,MAAD,EAAiB+C,gBAAjB,EAA+D;AAAA,cAA9CA,gBAA8C;AAA9CA,YAAAA,gBAA8C,GAA3B,IAA2B;AAAA;;AAC7E,cAAI9C,OAAO,GAAG,KAAKN,KAAL,CAAWO,GAAX,CAAeF,MAAf,CAAd;AACA,cAAI,CAACC,OAAL,EAAc,OAAO,IAAP;AACd,eAAKN,KAAL,CAAWwC,MAAX,CAAkBnC,MAAlB;AACA,cAAIiC,UAAU,GAAG,KAAKnC,gBAAL,CAAsBI,GAAtB,CAA0BF,MAA1B,CAAjB;;AACA,cAAIiC,UAAJ,EAAgB;AACZC,YAAAA,YAAY,CAACD,UAAU,CAACf,MAAZ,CAAZ;AACA,iBAAKpB,gBAAL,CAAsBqC,MAAtB,CAA6BnC,MAA7B;AACH;;AACD,cAAI+C,gBAAJ,EAAsB;AAClB,gBAAIlD,WAAW,GAAG,KAAKA,WAAL,CAAiBK,GAAjB,CAAqBD,OAAO,CAAC+C,gBAA7B,CAAlB;AACA,gBAAInD,WAAJ,EAAiBA,WAAW,CAACsC,MAAZ,CAAmBnC,MAAnB;AACpB;;AAED;AAAA;AAAA,wCAAWmB,cAAX,CAA0B,IAA1B,EAAgCC,IAAhC,CAAqCC,MAAM,IAAI;AAC3CA,YAAAA,MAAM,CAACC,aAAP,CAAqB,oBAArB,EAA2C;AACvCC,cAAAA,WAAW,EAAE;AAAA;AAAA,8DAAoB0B,MADM;AAEvChD,cAAAA,OAAO,EAAEA;AAF8B,aAA3C;AAIH,WALD;AAOA,iBAAOA,OAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACWiD,QAAAA,kBAAkB,CAACrC,YAAD,EAAuB;AAC5C,cAAIhB,WAAW,GAAG,KAAKA,WAAL,CAAiBK,GAAjB,CAAqBW,YAArB,CAAlB;AACA,cAAI,CAAChB,WAAL,EAAkB;AAClB,eAAKA,WAAL,CAAiBsC,MAAjB,CAAwBtB,YAAxB;;AACA,eAAK,IAAI,CAACb,MAAD,EAASC,OAAT,CAAT,IAA8BJ,WAA9B,EAA2C;AACvC,iBAAKmB,WAAL,CAAiBhB,MAAjB,EAAyB,KAAzB;AACH;;AACDH,UAAAA,WAAW,CAACsD,KAAZ;AACH;;AAEerB,QAAAA,eAAe,CAACtB,cAAD,EAA2E;AAAA;;AAAA;AACtG,gBAAI4C,SAAS,GAAG,MAAI,CAAC1D,UAAL,CAAgB2D,YAAhB,EAAhB;;AACA,gBAAIC,MAAM,SAAS,MAAI,CAAC5D,UAAL,CAAgB6D,sBAAhB,CAAuCH,SAAvC,EAAmDI,IAAD,IAAU;AAAA;;AAC3E,kBAAI7D,KAAK,4BAAG,MAAI,CAACE,WAAL,CAAiBK,GAAjB,CAAqBsD,IAArB,CAAH,qBAAG,sBAA4BC,MAA5B,EAAZ;AACA,kBAAI,CAAC9D,KAAL,EAAY,OAAO+D,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACZ,qBAAOD,OAAO,CAACC,OAAR,CAAgB,CAAC,GAAGhE,KAAJ,CAAhB,CAAP;AACH,aAJkB,EAIhBa,cAJgB,CAAnB;AAKA,mBAAO8C,MAAP;AAPsG;AAQzG;AAGD;AACJ;AACA;AACA;AACA;;;AACiBM,QAAAA,oBAAoB,CAC7BrD,KAD6B,EACdsD,mBADc,EAK7B;AAAA;;AAAA;AAEA,gBAAI,CAACA,mBAAmB,CAACC,mBAArB,IAA4CD,mBAAmB,CAACC,mBAApB,IAA2C,CAA3F,EAA8F;AAC1FD,cAAAA,mBAAmB,CAACC,mBAApB,GAA0C,CAA1C;AACH;;AAED,gBAAIC,UAAU,GAAG,MAAI,CAACrE,UAAL,CAAgB2D,YAAhB,EAAjB;;AACA,gBAAIW,cAAc;AAAA,2CAAG,WAAOR,IAAP,EAAwB;AAAA;;AACzC,oBAAI7D,KAAK,4BAAG,MAAI,CAACE,WAAL,CAAiBK,GAAjB,CAAqBsD,IAArB,CAAH,qBAAG,sBAA4BC,MAA5B,EAAZ;AACA,oBAAI,CAAC9D,KAAL,EAAY,OAAO+D,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACZ,uBAAOD,OAAO,CAACC,OAAR,CAAgB,CAAC,GAAGhE,KAAJ,CAAhB,CAAP;AACH,eAJiB;;AAAA,8BAAdqE,cAAc;AAAA;AAAA;AAAA,eAAlB,CAPA,CAYA;;;AACA,gBAAIC,uBAA0C,GAAG,EAAjD;;AAbA,2CAc4B;AACxB;AACA,kBAAItE,KAAK,SAASqE,cAAc,CAACE,CAAC,CAACC,IAAF,CAAOtD,YAAR,CAAhC,CAFwB,CAGxB;;AACA,kBAAIuD,UAAU,GAAGzE,KAAK,CAAC0E,MAAN,CAAaC,CAAC,IAAI;AAC/B;AACA,oBAAIA,CAAC,CAACC,UAAF,IAAgB,CAApB,EAAuB,OAAO,KAAP,CAFQ,CAG/B;;AACA,oBAAIV,mBAAmB,CAACW,aAApB,IACGX,mBAAmB,CAACrD,cAApB,CAAmCiE,QAAnC,KAAgDH,CAAC,CAACG,QADzD,EACmE,OAAO,KAAP;AACnE,oBAAIZ,mBAAmB,CAACa,eAApB,IACGb,mBAAmB,CAACrD,cAApB,CAAmCmE,UAAnC,KAAkDL,CAAC,CAACK,UAD3D,EACuE,OAAO,KAAP,CAPxC,CAQ/B;;AACA,uBAAO,IAAP;AACH,eAVgB,CAAjB;;AAWA,kBAAIP,UAAU,CAACQ,MAAf,EAAuB;AACnB,oBAAIC,KAAK,GAAGhB,mBAAmB,CAACC,mBAApB,GAA0CG,uBAAuB,CAACW,MAA9E;;AACA,oBAAIR,UAAU,CAACQ,MAAX,GAAoBC,KAAxB,EAA+B;AAC3BT,kBAAAA,UAAU,GAAGA,UAAU,CACnB;AADmB,mBAElBU,IAFQ,CAEH,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACT,UAAF,GAAeQ,CAAC,CAACR,UAFxB,EAGRU,KAHQ,CAGF,CAHE,EAGCJ,KAHD,CAAb;AAIH;;AACDZ,gBAAAA,uBAAuB,CAACiB,IAAxB,CACI,GAAGd,UAAU,CAACe,GAAX,CAAeb,CAAC,IAAI;AAAA;AAAA,0DAAiBjE,mBAAjB,CAAqCiE,CAArC,EAAwCJ,CAAC,CAACC,IAA1C,CAApB,CADP;;AAGA,oBAAIF,uBAAuB,CAACW,MAAxB,IAAkCf,mBAAmB,CAACC,mBAA1D,EAA+E;AAC3E;AAD2E;AAG9E;AACJ;AACJ,aA7CD;;AAcA,iBAAK,IAAMI,CAAX,IAAgBH,UAAhB;AAAA,mCA4BY;AA5BZ;;AAgCA,gBAAIE,uBAAuB,CAACW,MAA5B,EAAoC;AAChC;AACA,qBAAO;AAAA;AAAA,oCAAOnD,SAAP,CAAiB;AAAEwC,gBAAAA;AAAF,eAAjB,CAAP;AACH;;AAED,gBAAImB,SAAS,SAAS,MAAI,CAACzD,UAAL,CAAgBpB,KAAhB,EAAuBsD,mBAAmB,CAACrD,cAA3C,CAAtB;;AACA,gBAAI,CAAC4E,SAAS,CAACC,IAAf,EAAqB;AACjB,qBAAO;AAAA;AAAA,oCAAOC,UAAP,CAAkBF,SAAlB,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAO3D,SAAP,CAAiB;AAAE8D,cAAAA,oBAAoB,EAAEH,SAAS,CAACI;AAAlC,aAAjB,CAAP;AAvDA;AAwDH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACWC,QAAAA,iBAAiB,CAACC,QAAD,EAA2CrB,MAA3C,EAAqEsB,IAArE,EAAoFd,KAApF,EAAqH;AACzI,cAAIe,aAA6B,GAAG,EAApC;;AACA,eAAK,IAAI3F,OAAT,IAAoByF,QAApB,EAA8B;AAC1B,gBAAIrB,MAAM,CAACI,QAAP,KAAoBoB,SAApB,IAAiCxB,MAAM,CAACI,QAAP,KAAoBxE,OAAO,CAACwE,QAAjE,EAA2E;AAC3E,gBAAIJ,MAAM,CAACM,UAAP,KAAsBkB,SAAtB,IAAmCxB,MAAM,CAACM,UAAP,KAAsB1E,OAAO,CAAC0E,UAArE,EAAiF;AACjF,gBAAIN,MAAM,CAACyB,iBAAP,KAA6BD,SAA7B,IAA0CxB,MAAM,CAACyB,iBAAP,KAA6B7F,OAAO,CAAC8F,QAAnF,EAA6F;AAC7F,gBAAI1B,MAAM,CAAC2B,YAAP,KAAwBH,SAAxB,IAAqC,CAAC5F,OAAO,CAAC8F,QAAR,CAAiBE,QAAjB,CAA0B5B,MAAM,CAAC2B,YAAjC,CAA1C,EAA0F;AAC1FJ,YAAAA,aAAa,CAACV,IAAd,CAAmBjF,OAAnB;AACH;;AACD,cAAIN,KAAK,GAAG;AAAA;AAAA,kDAAgBiG,aAAhB,EAA+BD,IAA/B,EAAqCd,KAArC,EAA4CM,GAA5C,CAAgDb,CAAC,IAAI,KAAK5E,UAAL,CAAgBW,mBAAhB,CAAoCiE,CAApC,CAArD,CAAZ;AACA,iBAAO;AACH4B,YAAAA,KAAK,EAAEN,aAAa,CAAChB,MADlB;AAEHjF,YAAAA;AAFG,WAAP;AAIH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACWwG,QAAAA,WAAW,CAAC9B,MAAD,EAA2BsB,IAA3B,EAA0Cd,KAA1C,EAA2E;AACzF,iBAAO,KAAKY,iBAAL,CAAuB,KAAK9F,KAAL,CAAW8D,MAAX,EAAvB,EAA4CY,MAA5C,EAAoDsB,IAApD,EAA0Dd,KAA1D,CAAP;AACH;;AAvR0B,O","sourcesContent":["import { ErrorCodes, IResult, Result } from \"../shared/tsgf/Result\";\nimport { ICreateRoomPara, IGetOrCreateRoomPara, IRoomInfo, IRoomOnlineInfo, IRoomsFilterPara, IRoomsFilterRes } from \"../shared/tsgf/room/IRoomInfo\";\nimport { arrSkipAndLimit } from \"../shared/tsgf/Utils\";\nimport { GameServerHelper } from \"../shared/tsgfServer/game/GameServerHelper\";\nimport { IGameServerInfoInServer } from \"../shared/tsgfServer/game/Models\";\nimport { ReqNodeUpdateRoom } from \"../shared/tsgfServer/gameCluster/protocols/PtlNodeUpdateRoom\";\nimport { IRoomRegInfo } from \"../shared/tsgfServer/room/Models\";\nimport { ERoomRegChangedType, IRoomRegChanged, RoomHelper } from \"../shared/tsgfServer/room/RoomHelper\";\nimport { GameServerClusterMgr } from \"./GameServerClusterMgr\";\n\ninterface WaitExtractRoom {\n    /**定时器句柄*/\n    waitHD: any;\n    /**房间完整信息*/\n    roomInfo: IRoomInfo;\n}\n\n/**游戏服务器的房间管理*/\nexport class GameServerRoomMgr {\n\n    protected clusterMgr: GameServerClusterMgr;\n\n    /**所有房间的字典*/\n    protected rooms: Map<string, IRoomRegInfo> = new Map();\n    /**游戏服务器下的房间集合*/\n    protected serverRooms: Map<string, Map<string, IRoomRegInfo>> = new Map();\n    /**所有等待游戏服务器提取的房间信息*/\n    protected waitExtractRooms: Map<string, WaitExtractRoom> = new Map();\n\n    constructor(clusterMgr: GameServerClusterMgr) {\n        this.clusterMgr = clusterMgr;\n    }\n\n    public getRoomRegInfo(roomId: string): IRoomRegInfo | null {\n        let regInfo = this.rooms.get(roomId);\n        if (!regInfo) return null;\n        return regInfo;\n    }\n    public getRoomOnlineInfo(roomId: string): IRoomOnlineInfo | null {\n        let roomRegInfo = this.rooms.get(roomId);\n        if (!roomRegInfo) return null;\n\n        return this.clusterMgr.buildRoomOnlineInfo(roomRegInfo);\n    }\n\n    protected createRoomByGameServer(\n        appId: string,\n        createRoomPara: ICreateRoomPara,\n        allotGameServerInfo: IGameServerInfoInServer\n    ): IResult<IRoomOnlineInfo> {\n        let createInfo = RoomHelper.buildRoomInfo(appId, allotGameServerInfo, createRoomPara);\n\n        this.rooms.set(createInfo.regInfo.roomId, createInfo.regInfo);\n        let serverRooms = this.serverRooms.get(allotGameServerInfo.serverNodeId);\n        if (!serverRooms) {\n            serverRooms = new Map();\n            this.serverRooms.set(allotGameServerInfo.serverNodeId, serverRooms);\n        }\n        serverRooms.set(createInfo.regInfo.roomId, createInfo.regInfo);\n        //将房间信息放到等待提取\n        let waitExtractHd = setTimeout(() => {\n            this.dismissRoom(createInfo.regInfo.roomId);\n        }, 5000);\n        this.waitExtractRooms.set(createInfo.regInfo.roomId, {\n            roomInfo: createInfo.roomInfo,\n            waitHD: waitExtractHd,\n        });\n\n        // 推送变更给所有侦听器\n        RoomHelper.getRedisClient(true).then(client => {\n            client.publishObject('RoomRegInfoChanged', {\n                changedType: ERoomRegChangedType.Create,\n                regInfo: createInfo.regInfo,\n            } as IRoomRegChanged);\n        });\n\n        return Result.buildSucc(createInfo.roomOnlineInfo);\n    }\n    /**\n     * Creates room\n     * @param appId \n     * @param createRoomPara \n     * @returns room \n     */\n    public async createRoom(appId: string, createRoomPara: ICreateRoomPara): Promise<IResult<IRoomOnlineInfo>> {\n        if (createRoomPara.roomId && this.rooms.get(createRoomPara.roomId)) {\n            return Result.buildErr('roomId已存在！', ErrorCodes.RoomIdExists);\n        }\n\n        let allotGameServerInfo = await this.allotGameServer(createRoomPara);\n        if (!allotGameServerInfo) {\n            return Result.buildErr('服务器爆满！', ErrorCodes.RoomNoServerAvailable);\n        }\n        return this.createRoomByGameServer(appId, createRoomPara, allotGameServerInfo);\n    }\n\n    /**\n     * 让集群创建房间后，游戏服务器来提取房间信息（只能提取一次），超时未提取释放也会返回为null\n     * @param roomId \n     * @returns room \n     */\n    public extractRoom(roomId: string): { roomInfo: IRoomInfo, regInfo: IRoomRegInfo } | null {\n        let regInfo = this.rooms.get(roomId);\n        if (!regInfo) return null;\n        let waitExInfo = this.waitExtractRooms.get(roomId);\n        if (!waitExInfo) return null;\n        clearTimeout(waitExInfo.waitHD);\n        this.waitExtractRooms.delete(roomId);\n        let roomInfo = waitExInfo.roomInfo;\n        return {\n            regInfo,\n            roomInfo,\n        };\n    }\n\n    /**\n     * Updates room info\n     * @param roomRegInfo \n     * @returns true if room info \n     */\n    public updateRoomInfo(updateInfo: ReqNodeUpdateRoom): boolean {\n        let regInfo = this.rooms.get(updateInfo.roomRegInfo.roomId);\n        if (!regInfo) return false;\n\n        Object.assign(regInfo, updateInfo.roomRegInfo);\n\n        // 推送变更给所有侦听器\n        RoomHelper.getRedisClient(true).then(client => {\n            client.publishObject('RoomRegInfoChanged', {\n                changedType: updateInfo.changedType,\n                regInfo: regInfo,\n                joinRoomPlayerId: updateInfo.playerId,\n                leaveRoomPlayerId: updateInfo.playerId,\n                changePlayerId: updateInfo.playerId,\n                teamId: updateInfo.teamId,\n                newTeamId: updateInfo.teamId,\n                oldTeamId: updateInfo.oldTeamId,\n            } as IRoomRegChanged);\n        });\n        return true;\n    }\n\n    /**\n     * （清理）解散指定房间\n     * @param roomId \n     * @param [clearServerRooms] \n     * @returns  \n     */\n    public dismissRoom(roomId: string, clearServerRooms = true): IRoomRegInfo | null {\n        let regInfo = this.rooms.get(roomId);\n        if (!regInfo) return null;\n        this.rooms.delete(roomId);\n        let waitExInfo = this.waitExtractRooms.get(roomId);\n        if (waitExInfo) {\n            clearTimeout(waitExInfo.waitHD);\n            this.waitExtractRooms.delete(roomId);\n        }\n        if (clearServerRooms) {\n            let serverRooms = this.serverRooms.get(regInfo.gameServerNodeId);\n            if (serverRooms) serverRooms.delete(roomId);\n        }\n\n        RoomHelper.getRedisClient(true).then(client => {\n            client.publishObject('RoomRegInfoChanged', {\n                changedType: ERoomRegChangedType.Delete,\n                regInfo: regInfo,\n            } as IRoomRegChanged);\n        });\n\n        return regInfo;\n    }\n    /**\n     * （清理）解散服务器下所有房间\n     * @param serverNodeId \n     * @returns  \n     */\n    public dismissServerRooms(serverNodeId: string) {\n        let serverRooms = this.serverRooms.get(serverNodeId);\n        if (!serverRooms) return;\n        this.serverRooms.delete(serverNodeId);\n        for (let [roomId, regInfo] of serverRooms) {\n            this.dismissRoom(roomId, false);\n        }\n        serverRooms.clear();\n    }\n\n    protected async allotGameServer(createRoomPara: ICreateRoomPara): Promise<IGameServerInfoInServer | null> {\n        let nodeInfos = this.clusterMgr.getNodeInfos();\n        let result = await this.clusterMgr.allotGameServerByInfos(nodeInfos, (snid) => {\n            let rooms = this.serverRooms.get(snid)?.values();\n            if (!rooms) return Promise.resolve([]);\n            return Promise.resolve([...rooms]);\n        }, createRoomPara);\n        return result;\n    }\n\n\n    /**\n     * 按规则匹配一个服务器下的房间,没有则自动分配一个合适的服务器用来创建房间, 没有合适的返回null\n     * @param getOrCreateRoomPara 指定分配规则标识, 放空则分配最少客户端的服务器\n     * @returns match 开头的为匹配到的房间对应所属服务器\n     */\n    public async getOrAllotGameServer(\n        appId: string, getOrCreateRoomPara: IGetOrCreateRoomPara\n    ): Promise<IResult<{\n        matchRoomOnlineInfoList?: IRoomOnlineInfo[],\n        createRoomOnlineInfo?: IRoomOnlineInfo,\n    }>> {\n\n        if (!getOrCreateRoomPara.matchLimitRoomCount || getOrCreateRoomPara.matchLimitRoomCount <= 0) {\n            getOrCreateRoomPara.matchLimitRoomCount = 3;\n        }\n\n        let serverList = this.clusterMgr.getNodeInfos();\n        let getServerRooms = async (snid: string) => {\n            let rooms = this.serverRooms.get(snid)?.values();\n            if (!rooms) return Promise.resolve([]);\n            return Promise.resolve([...rooms]);\n        };\n        //先遍历看是否存在匹配的房间可用\n        let matchRoomOnlineInfoList: IRoomOnlineInfo[] = [];\n        for (const s of serverList) {\n            // 检查现有房间符合规则的数量\n            let rooms = await getServerRooms(s.info.serverNodeId);\n            // 筛选本服务器下匹配条件的房间\n            let matchRooms = rooms.filter(r => {\n                //满人的房间先剔除\n                if (r.emptySeats <= 0) return false;\n                //其他看筛选条件\n                if (getOrCreateRoomPara.matchRoomType\n                    && getOrCreateRoomPara.createRoomPara.roomType !== r.roomType) return false;\n                if (getOrCreateRoomPara.matchMaxPlayers\n                    && getOrCreateRoomPara.createRoomPara.maxPlayers !== r.maxPlayers) return false;\n                //都符合,则匹配\n                return true;\n            });\n            if (matchRooms.length) {\n                let limit = getOrCreateRoomPara.matchLimitRoomCount - matchRoomOnlineInfoList.length;\n                if (matchRooms.length > limit) {\n                    matchRooms = matchRooms\n                        // 排序一下, 空位多的放前面\n                        .sort((a, b) => b.emptySeats - a.emptySeats)\n                        .slice(0, limit);\n                }\n                matchRoomOnlineInfoList.push(\n                    ...matchRooms.map(r => GameServerHelper.buildRoomOnlineInfo(r, s.info)));\n\n                if (matchRoomOnlineInfoList.length >= getOrCreateRoomPara.matchLimitRoomCount) {\n                    //要的数量已满\n                    break;\n                }\n            }\n        }\n        if (matchRoomOnlineInfoList.length) {\n            // 有匹配到的房间\n            return Result.buildSucc({ matchRoomOnlineInfoList, });\n        }\n\n        let createRet = await this.createRoom(appId, getOrCreateRoomPara.createRoomPara);\n        if (!createRet.succ) {\n            return Result.transition(createRet);\n        }\n        return Result.buildSucc({ createRoomOnlineInfo: createRet.data });\n    }\n\n    /**\n     * Filters rooms by list\n     * @param regInfos \n     * @param filter \n     * @param [skip] \n     * @param [limit] \n     * @returns rooms by list \n     */\n    public filterRoomsByList(regInfos: IterableIterator<IRoomRegInfo>, filter: IRoomsFilterPara, skip?: number, limit?: number): IRoomsFilterRes {\n        let matchRegInfos: IRoomRegInfo[] = [];\n        for (let regInfo of regInfos) {\n            if (filter.roomType !== undefined && filter.roomType !== regInfo.roomType) continue;\n            if (filter.maxPlayers !== undefined && filter.maxPlayers !== regInfo.maxPlayers) continue;\n            if (filter.roomNameFullMatch !== undefined && filter.roomNameFullMatch !== regInfo.roomName) continue;\n            if (filter.roomNameLike !== undefined && !regInfo.roomName.includes(filter.roomNameLike)) continue;\n            matchRegInfos.push(regInfo);\n        }\n        let rooms = arrSkipAndLimit(matchRegInfos, skip, limit).map(r => this.clusterMgr.buildRoomOnlineInfo(r));\n        return {\n            count: matchRegInfos.length,\n            rooms,\n        }\n    }\n    /**\n     * Filters rooms\n     * @param filter \n     * @param [skip] \n     * @param [limit] \n     * @returns rooms \n     */\n    public filterRooms(filter: IRoomsFilterPara, skip?: number, limit?: number): IRoomsFilterRes {\n        return this.filterRoomsByList(this.rooms.values(), filter, skip, limit);\n    }\n}"]}