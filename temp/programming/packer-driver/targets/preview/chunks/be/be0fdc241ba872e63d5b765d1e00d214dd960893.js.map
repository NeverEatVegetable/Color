{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/apiCrypto/ApiCryptoHelper.ts"],"names":["ApiCryptoHelper","CryptoHelper","ErrorCodes","Result","appCryptoEncrypt","appId","appSecret","reqData","ts","Date","now","json","JSON","stringify","cText","desEncryptECB_PKCS7_Base64","req","ciphertext","appCryptoDecryption","appReq","buildErr","ParamsError","desDecryptECB_PKCS7_Base64","data","parse","buildSucc","err","message"],"mappings":";;;gEAKaA,e;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAJJC,MAAAA,Y,iBAAAA,Y;;AACAC,MAAAA,U,iBAAAA,U;AAAqBC,MAAAA,M,iBAAAA,M;;;;;;;iCAGjBH,e,GAAN,MAAMA,eAAN,CAAsB;AACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACkC,eAAhBI,gBAAgB,CAACC,KAAD,EAAgBC,SAAhB,EAAmCC,OAAnC,EACL;AAErBA,UAAAA,OAAO,CAACC,EAAR,GAAaC,IAAI,CAACC,GAAL,EAAb;AACA,cAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAAX;AACA,cAAIO,KAAK,GAAG;AAAA;AAAA,4CAAaC,0BAAb,CAAwCJ,IAAxC,EAA8CL,SAA9C,CAAZ;AACA,cAAIU,GAAuB,GAAG;AAC1BX,YAAAA,KAAK,EAAEA,KADmB;AAE1BY,YAAAA,UAAU,EAAEH;AAFc,WAA9B;AAIA,iBAAOE,GAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACqC,eAAnBE,mBAAmB,CAC5BZ,SAD4B,EACTa,MADS,EAEK;AAElC,cAAI,CAACA,MAAM,CAACF,UAAZ,EAAwB;AACpB,mBAAO;AAAA;AAAA,kCAAOG,QAAP,CAAgB,iBAAhB,EAAmC;AAAA;AAAA,0CAAWC,WAA9C,CAAP;AACH;;AACD,cAAI;AACA,gBAAIV,IAAI,GAAG;AAAA;AAAA,8CAAaW,0BAAb,CAAwCH,MAAM,CAACF,UAA/C,EAA2DX,SAA3D,CAAX;AACA,gBAAIiB,IAAI,GAAGX,IAAI,CAACY,KAAL,CAAWb,IAAX,CAAX;;AACA,gBAAI,CAACY,IAAL,EAAW;AACP,qBAAO;AAAA;AAAA,oCAAOH,QAAP,CAAgB,QAAhB,EAA0B;AAAA;AAAA,4CAAWC,WAArC,CAAP;AACH;;AACD,gBAAI,CAACE,IAAI,CAACf,EAAN,IAAYe,IAAI,CAACf,EAAL,GAAU,OAAV,GAAoBC,IAAI,CAACC,GAAL,EAApC,EAAgD;AAC5C,qBAAO;AAAA;AAAA,oCAAOU,QAAP,CAAgB,MAAhB,EAAwB;AAAA;AAAA,4CAAWC,WAAnC,CAAP;AACH;;AACDF,YAAAA,MAAM,CAACI,IAAP,GAAcA,IAAd;AACA,mBAAO;AAAA;AAAA,kCAAOE,SAAP,CAAiBN,MAAjB,CAAP;AACH,WAXD,CAWE,OAAOO,GAAP,EAAiB;AAAA;;AACf,mBAAO;AAAA;AAAA,kCAAON,QAAP,CAAgB,qCAAaM,GAAb,oBAAaA,GAAG,CAAEC,OAAlB,2BAA6BD,GAA7B,mBAAoC,OAApC,CAAhB,EAA8D;AAAA;AAAA,0CAAWL,WAAzE,CAAP;AACH;AAEJ;;AAlDwB,O","sourcesContent":["import { BaseServiceType } from \"tsrpc-proto\";\nimport { CryptoHelper } from \"../CryptoHelper\"\nimport { ErrorCodes, IResult, Result } from \"../../tsgf/Result\";\nimport { IAppEncryptRequest, IAppEncryptRequestT, IBaseEncryptRequestData } from \"../../tsgf/apiCrypto/Models\";\n\nexport class ApiCryptoHelper {\n    /**\n     * 调用AppCrypto协议的加密接口\n     *\n     * @param appId\n     * @param appSecret\n     * @param reqData\n     * @returns\n     */\n    public static appCryptoEncrypt(appId: string, appSecret: string, reqData: any)\n        : IAppEncryptRequest {\n\n        reqData.ts = Date.now();\n        let json = JSON.stringify(reqData);\n        let cText = CryptoHelper.desEncryptECB_PKCS7_Base64(json, appSecret);\n        let req: IAppEncryptRequest = {\n            appId: appId,\n            ciphertext: cText,\n        };\n        return req;\n    }\n    /**\n     * 调用AppCrypto协议的解密接口\n     *\n     * @param appSecret\n     * @param req\n     * @returns\n     */\n    public static appCryptoDecryption<T extends IBaseEncryptRequestData>\n        (appSecret: string, appReq: IAppEncryptRequest)\n        : IResult<IAppEncryptRequestT<T>> {\n\n        if (!appReq.ciphertext) {\n            return Result.buildErr(\"需要 ciphertext !\", ErrorCodes.ParamsError);\n        }\n        try {\n            let json = CryptoHelper.desDecryptECB_PKCS7_Base64(appReq.ciphertext, appSecret);\n            let data = JSON.parse(json) as T;\n            if (!data) {\n                return Result.buildErr(\"接口解析失败\", ErrorCodes.ParamsError);\n            }\n            if (!data.ts || data.ts + 3600000 < Date.now()) {\n                return Result.buildErr(\"接口过期\", ErrorCodes.ParamsError);\n            }\n            appReq.data = data;\n            return Result.buildSucc(appReq as IAppEncryptRequestT<T>);\n        } catch (err: any) {\n            return Result.buildErr(\"接口解析失败:\" + (err?.message ?? err ?? '解析失败!'), ErrorCodes.ParamsError);\n        }\n\n    }\n}"]}