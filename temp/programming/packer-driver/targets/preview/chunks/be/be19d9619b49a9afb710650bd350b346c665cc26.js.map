{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgf/EventEmitter.ts"],"names":["EventEmitter","EventHandlers","constructor","eventHandlers","Map","on","event","handler","target","handlers","get","set","addHandler","off","removeHandler","count","delete","emit","args","removeAllListeners","eh","removeAllHandlers","clear","length","push","i","splice","call"],"mappings":"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","sourcesContent":["\n\n/**\n * 多事件的订阅和触发\n */\n export class EventEmitter {\n    protected eventHandlers: Map<string, EventHandlers<Function>>;\n    constructor() {\n        this.eventHandlers = new Map<string, EventHandlers<Function>>();\n    }\n\n    /**\n     * 注册事件\n     * @param event \n     * @param handler \n     * @param target 事件处理器的this指向\n     */\n    public on(event: string, handler: Function, target?: any): void {\n        let handlers = this.eventHandlers.get(event);\n        if (!handlers) {\n            handlers = new EventHandlers<Function>();\n            this.eventHandlers.set(event, handlers);\n        }\n        handlers.addHandler(handler, target);\n    }\n    /**\n     * 注销一个事件\n     * @param event \n     * @param handler \n     */\n    public off(event: string, handler: Function): void {\n        let handlers = this.eventHandlers.get(event);\n        if (handlers) {\n            handlers.removeHandler(handler);\n            if (handlers.count() <= 0) {\n                this.eventHandlers.delete(event);\n            }\n        }\n    }\n    /**\n     * 触发一个事件的所有处理器,按注册顺序触发\n     * @param event \n     * @param args \n     * @returns true if emit \n     */\n    public emit(event: string, ...args: any[]): boolean {\n        let handlers = this.eventHandlers.get(event);\n        if (handlers) return handlers.emit(...args);\n        return false;\n    }\n\n    /**\n     * 移除所有事件和处理器\n     */\n    public removeAllListeners() {\n        for (let eh of this.eventHandlers) {\n            eh[1].removeAllHandlers();\n        }\n        this.eventHandlers.clear();\n    }\n}\n\n/**\n * 事件处理器\n */\nexport interface IEventHandler<FnType extends Function> {\n    /**\n     * 处理器方法\n     */\n    handler: FnType;\n    /**\n     * 执行 `handler` 的所有者, 即 `handler` 里的 `this` 指向\n     */\n    target?: any;\n}\n\n/**\n * 单事件的多处理器订阅和触发\n */\nexport class EventHandlers<FunctionType extends Function>{\n    private handlers: IEventHandler<FunctionType>[] = [];\n\n    /**\n     * 构造\n     */\n    constructor() {\n    }\n\n    /**\n     * Counts event handlers\n     * @returns  \n     */\n    public count() {\n        return this.handlers.length;\n    }\n\n    /**\n     * 添加处理器\n     *\n     * @param handler\n     */\n    public addHandler(handler: FunctionType, target?: any) {\n        this.handlers.push({\n            handler,\n            target\n        });\n    }\n\n    /**\n     * 移出处理器\n     *\n     * @param handler\n     */\n    public removeHandler(handler: FunctionType) {\n        for (let i = 0; i < this.handlers.length; i++) {\n            if (this.handlers[i].handler === handler) {\n                this.handlers.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Removes all handlers\n     */\n    public removeAllHandlers() {\n        this.handlers = [];\n    }\n\n\n    /**\n     * 触发所有处理器, 有处理器则返回true\n     *\n     * @param args\n     */\n    public emit(...args: any[]): boolean {\n        for (let i = 0; i < this.handlers.length; i++) {\n            this.handlers[i].handler.call(this.handlers[i].target ?? this, ...args);\n        }\n        return this.handlers.length > 0;\n    }\n}"]}