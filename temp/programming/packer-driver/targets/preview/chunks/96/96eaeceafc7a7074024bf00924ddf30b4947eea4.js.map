{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/gfConfigMgr.ts"],"names":["startWatchConfig","configPath","configChanged","existsSync","buildErr","watchFile","persistent","interval","allConfigs","set","call","getConfigAuto","config","get","Promise","resolve","buildSucc","ext","extname","getConfig","ConfigType","json","getConfigByJson","js","default","configFileText","fileBin","readFileSync","slice","toString","ex","JSON","parse","fs","path","Result","Map"],"mappings":"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","sourcesContent":["\nimport fs from \"fs\";\nimport path from \"path\";\nimport { IResult, Result } from \"../tsgf/Result\";\nimport { IDbHelper } from \"./DbHelper\";\n\nconst allConfigs: Map<string, any> = new Map<string, any>();\n\n\nexport type GetConfig = () => Promise<IResult<any>>;\n\nexport enum ConfigType {\n    /**直接json格式的配置文件*/\n    json = '.json',\n    /**js配置对象必须是默认导出*/\n    js = '.js',\n}\n\n/**\n * 开始监控配置文件,并返回配置对象的方法\n * @param configPath 配置文件路径, 支持json和ts默认导出格式\n * @param configChanged 当配置文件有变化时触发，需要自行调用获取最新的配置\n * @returns \n */\nexport async function startWatchConfig(configPath: string, configChanged: (() => void) | null = null): Promise<IResult<any>> {\n    if (!fs.existsSync(configPath)) {\n        return Result.buildErr(\"配置文件[\" + configPath + \"]不存在!\");\n    }\n    fs.watchFile(configPath, { persistent: false, interval: 500 }, () => {\n        allConfigs.set(configPath, null);\n        configChanged?.call(null);\n    });\n    allConfigs.set(configPath, null);\n    return await getConfigAuto(configPath);\n}\n/**\n * 读取配置文件,自动根据配置文件格式解析,如果配置没变更将从缓存中读取,需要调用过startWatchConfig初始化!\n * @param configPath 配置文件路径, 支持json和js默认导出格式\n * @returns \n */\nexport async function getConfigAuto(configPath: string): Promise<IResult<any>> {\n    let config = allConfigs.get(configPath);\n    if (config) return Promise.resolve(Result.buildSucc(config));\n\n    let ext = path.extname(configPath);\n    let getConfig: GetConfig | null = null;\n    switch (ext) {\n        case ConfigType.json:\n            getConfig = () => Promise.resolve(getConfigByJson(configPath));\n            break;\n        case ConfigType.js:\n            getConfig = async () => Result.buildSucc((await import(configPath)).default);\n            break;\n        default:\n            return Result.buildErr(\"配置路径[\" + configPath + \"]格式不支持!目前只支持ts和json格式\");\n    }\n    return await getConfig();\n}\n/**\n * 读取配置文件,如果配置没变更将从缓存中读取,需要调用过startWatchConfig初始化!\n * @param configPath 配置文件路径\n * @returns \n */\nfunction getConfigByJson(configPath: string): IResult<any> {\n    let config = allConfigs.get(configPath);\n    if (!config) {\n        let configFileText: string;\n        try {\n            let fileBin = fs.readFileSync(configPath);\n            if (!fileBin) {\n                return Result.buildErr(\"配置文件[\" + configPath + \"]读取为空!可能是没权限!\");\n            }\n            if (fileBin[0] === 0xEF && fileBin[1] === 0xBB && fileBin[2] === 0xBF) {\n                fileBin = fileBin.slice(3);\n            }\n            configFileText = fileBin.toString('utf-8');\n        } catch (ex) {\n            return Result.buildErr(\"配置文件[\" + configPath + \"]读取失败:\" + ex);\n        }\n        try {\n            config = JSON.parse(configFileText);\n            allConfigs.set(configPath, config);\n        } catch (ex) {\n            return Result.buildErr(\"配置文件[\" + configPath + \"]解析失败:\" + ex + \", configFileText:\" + configFileText);\n        }\n    }\n    return Result.buildSucc(config);\n}\n\ndeclare global {\n\n    /**\n     * 获取全局定义的应用数据库连接实例\n     *\n     * @returns\n     */\n    function getAppDbHelper(): IDbHelper;\n}"]}