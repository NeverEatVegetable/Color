{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/test/unitTest/match/MatcherFixedTeams.test.ts"],"names":["assert","EMatchFromType","MatcherKeys","arrSum","MatcherFixedTeams","initMatchRequest","describe","matcher","buildSinglePlayerMatchReq","playerIds","fixedTeamCount","teamMinPlayers","teamMaxPlayers","reqParams","maxPlayers","matchFromType","Player","matchFromInfo","matcherKey","FixedTeams","matcherParams","resultsContinueRoomJoinUsMatch","teamParams","fixedTeamMinPlayers","fixedTeamMaxPlayers","req","ret","procNewMatchReq","ok","succ","err","buildRoomJoinUsMatchReq","roomId","teamsPlayerIds","RoomJoinUs","currPlayerCount","t","length","test","allPlayersReqs","result","onPollMatcherReqs","hasResult","resultErrMsg","resultCreateRoom","retReqLen","matchRequestPlayerResults","teamId","resultJoinRoom"],"mappings":"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","sourcesContent":["import { assert } from \"chai\";\nimport { EMatchFromType, IFixedTeamsMatcherParams, IMatchParamsFromPlayer, MatcherKeys } from \"../../../src/shared/tsgf/match/Models\";\nimport { ITeamPlayerIds } from \"../../../src/shared/tsgf/room/IRoomInfo\";\nimport { arrRemoveItems, arrSum } from \"../../../src/shared/tsgf/Utils\";\nimport { MatcherFixedTeams, IFixedTeamsMatcherParamsOnServer } from \"../../../src/shared/tsgfServer/match/MatcherFixedTeams\";\nimport { IMatchRequest, IMatchFromRoomJoinUsOnServer, IMatchRequestParams, initMatchRequest, IMatchParamsFromRoomJoinUsOnServer } from \"../../../src/shared/tsgfServer/match/Models\";\n\ndescribe('固定队伍匹配计算验证', () => {\n\n    let matcher = new MatcherFixedTeams();\n\n    function buildSinglePlayerMatchReq(playerIds: string[],\n        fixedTeamCount: number, teamMinPlayers: number, teamMaxPlayers: number): IMatchRequest {\n        let reqParams: IMatchParamsFromPlayer = {\n            maxPlayers: fixedTeamCount * teamMaxPlayers,\n            matchFromType: EMatchFromType.Player,\n            matchFromInfo: {\n                playerIds: playerIds,\n            },\n            matcherKey: MatcherKeys.FixedTeams,\n            matcherParams: {\n                resultsContinueRoomJoinUsMatch: true,\n            } as IFixedTeamsMatcherParams,\n            teamParams: {\n                fixedTeamCount: fixedTeamCount,\n                fixedTeamMinPlayers: teamMinPlayers,\n                fixedTeamMaxPlayers: teamMaxPlayers,\n            },\n        };\n        let req = initMatchRequest(reqParams);\n        let ret = matcher.procNewMatchReq(req);\n        assert.ok(ret.succ, ret.err);\n        return req;\n    }\n    function buildRoomJoinUsMatchReq(roomId: string,\n        fixedTeamCount: number, teamMinPlayers: number, teamMaxPlayers: number,\n        teamsPlayerIds: ITeamPlayerIds[]): IMatchRequest {\n        let reqParams: IMatchParamsFromRoomJoinUsOnServer = {\n            maxPlayers: fixedTeamCount * teamMaxPlayers,\n            matchFromType: EMatchFromType.RoomJoinUs,\n            matchFromInfo: {\n                roomId: roomId,\n                teamsPlayerIds: teamsPlayerIds,\n                currPlayerCount: arrSum(teamsPlayerIds, t => t.playerIds.length),\n            },\n            matcherKey: MatcherKeys.FixedTeams,\n            matcherParams: {\n                resultsContinueRoomJoinUsMatch: true,\n            } as IFixedTeamsMatcherParams,\n            teamParams: {\n                fixedTeamCount: fixedTeamCount,\n                fixedTeamMinPlayers: teamMinPlayers,\n                fixedTeamMaxPlayers: teamMaxPlayers,\n            },\n        };\n        let req = initMatchRequest(reqParams);\n        let ret = matcher.procNewMatchReq(req);\n        assert.ok(ret.succ, ret.err);\n        return req;\n    }\n\n\n    test('1个队伍(1~1) 1人*1请求', async function () {\n        //满足最低要求\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 1, 1, 1),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n    });\n    test('1个队伍(1~2) 1人*1请求', async function () {\n        //满足最低要求\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 1, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n    });\n    test('1个队伍(1~2) 2人*1请求', async function () {\n        //满足最低要求\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '2'], 1, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n    });\n\n    test('1个队伍(1~2) 1人*2请求', async function () {\n        //组合满\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 1, 1, 2),\n            buildSinglePlayerMatchReq(['2'], 1, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n    });\n    test('1个队伍(1~2) 2人*2请求', async function () {\n        //组合满\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 1, 1, 2),\n            buildSinglePlayerMatchReq(['2', '2a'], 1, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 2, '应该创建2个房间!实际' + result.resultCreateRoom?.length);\n    });\n\n    test('1个队伍(1~2) 1人*3请求', async function () {\n        //1个满,再1个最低要求\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 1, 1, 2),\n            buildSinglePlayerMatchReq(['2'], 1, 1, 2),\n            buildSinglePlayerMatchReq(['3'], 1, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建房间!');\n        assert.ok(result.resultCreateRoom?.length === 2, '应该创建2个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个房间应该有2个匹配!实际为' + retReqLen);\n        retReqLen = result.resultCreateRoom![1].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 1, '第2个房间应该有1个匹配!实际为' + retReqLen);\n    });\n    test('1个队伍(1~2) 2人*3请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 1, 1, 2),\n            buildSinglePlayerMatchReq(['2', '2a'], 1, 1, 2),\n            buildSinglePlayerMatchReq(['3', '3a'], 1, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建房间!');\n        assert.ok(result.resultCreateRoom?.length === 3, '应该创建3个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 1, '第1个房间应该有1个匹配!实际为' + retReqLen);\n        retReqLen = result.resultCreateRoom![1].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 1, '第2个房间应该有1个匹配!实际为' + retReqLen);\n    });\n\n    test('1个队伍(1~3) 1人*5请求', async function () {\n        //1个满,再1个最低要求并推满\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 1, 1, 3),\n            buildSinglePlayerMatchReq(['2'], 1, 1, 3),\n            buildSinglePlayerMatchReq(['3'], 1, 1, 3),\n            buildSinglePlayerMatchReq(['4'], 1, 1, 3),\n            buildSinglePlayerMatchReq(['5'], 1, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建房间!');\n        assert.ok(result.resultCreateRoom?.length === 2, '应该创建2个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 3, '第1个房间应该有3个匹配!实际为' + retReqLen);\n        retReqLen = result.resultCreateRoom![1].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第2个房间应该有2个匹配!实际为' + retReqLen);\n    });\n    test('1个队伍(1~3) 2人*5请求', async function () {\n        //1个满,再1个最低要求并推满\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 1, 1, 3),\n            buildSinglePlayerMatchReq(['2', '2a'], 1, 1, 3),\n            buildSinglePlayerMatchReq(['3', '3a'], 1, 1, 3),\n            buildSinglePlayerMatchReq(['4', '4a'], 1, 1, 3),\n            buildSinglePlayerMatchReq(['5', '5a'], 1, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建房间!');\n        assert.ok(result.resultCreateRoom?.length === 5, '应该创建5个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 1, '第1个房间应该有3个匹配!实际为' + retReqLen);\n        retReqLen = result.resultCreateRoom![1].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 1, '第2个房间应该有2个匹配!实际为' + retReqLen);\n    });\n\n    test('2个队伍各(1~1) 1人*2请求', async function () {\n        //2个队伍(1~1)组合满\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 2, 1, 1),\n            buildSinglePlayerMatchReq(['2'], 2, 1, 1),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个房间应该有2个匹配!实际为' + retReqLen);\n    });\n    test('2个队伍各(1~1) 2人*2请求', async function () {\n        //2个队伍(1~1)组合满\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 2, 1, 1),\n            buildSinglePlayerMatchReq(['2', '2a'], 2, 1, 1),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(!result.hasResult, '应该没结果!');\n    });\n\n    test('2个队伍各(1~2) 1人*2请求', async function () {\n        //2个队伍(1~2)满足最低要求\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['2'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个房间应该有2个匹配!实际为' + retReqLen);\n    });\n\n    test('2个队伍各(1~2) 2人*2请求', async function () {\n        //2个队伍(1~2)满足最低要求\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['2', '2a'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个房间应该有2个匹配!实际为' + retReqLen);\n    });\n\n    test('2个队伍各(1~3) 1人*2请求', async function () {\n        //2个队伍(1~3)满足最低要求\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 2, 1, 3),\n            buildSinglePlayerMatchReq(['2'], 2, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个房间应该有2个匹配!实际为' + retReqLen);\n    });\n    test('2个队伍各(1~3) 2人*2请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 2, 1, 3),\n            buildSinglePlayerMatchReq(['2', '2a'], 2, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个房间应该有2个匹配!实际为' + retReqLen);\n    });\n\n    test('2个队伍各(1~2) 1人*4请求', async function () {\n        //2个队伍(1~2)组合满\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['2'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['3'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['4'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 4, '第1个房间应该有4个匹配!实际为' + retReqLen);\n    });\n    test('2个队伍各(1~2) 2人*4请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['2', '2a'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['3', '3a'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['4', '4a'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建2个房间!');\n        assert.ok(result.resultCreateRoom?.length === 2, '应该创建2个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个房间应该有2个匹配!实际为' + retReqLen);\n    });\n    test('2个队伍各(1~2) 2+2+2+1人请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['2', '2a'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['3', '3a'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['4'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建2个房间!');\n        assert.ok(result.resultCreateRoom?.length === 2, '应该创建2个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个房间应该有2个匹配!实际为' + retReqLen);\n        retReqLen = result.resultCreateRoom![1].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第2个房间应该有2个匹配!实际为' + retReqLen);\n    });\n    test('2个队伍各(1~2) 2+2+1+1人请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['2', '2a'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['3'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['4'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建2个房间!');\n        assert.ok(result.resultCreateRoom?.length === 2, '应该创建2个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个房间应该有2个匹配!实际为' + retReqLen);\n        retReqLen = result.resultCreateRoom![1].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第2个房间应该有2个匹配!实际为' + retReqLen);\n    });\n\n    test('3个队伍各(1~3) 1人*3请求', async function () {\n        //3个队伍(1~3)满足最低要求\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['2'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['3'], 3, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 3, '第1个房间应该有3个匹配!实际为' + retReqLen);\n    });\n    test('3个队伍各(1~3) 2人*3请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['2', '2a'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['3', '3a'], 3, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 3, '第1个房间应该有3个匹配!实际为' + retReqLen);\n    });\n    test('3个队伍各(1~3) 3人*3请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1', '1a', '1b'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['2', '2a', '2b'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['3', '3a', '3b'], 3, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 3, '第1个房间应该有3个匹配!实际为' + retReqLen);\n    });\n    test('3个队伍各(1~3) 1+2+3人请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['2', '2a'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['3', '3a', '3b'], 3, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 3, '第1个房间应该有3个匹配!实际为' + retReqLen);\n    });\n    test('3个队伍各(1~3) 1+2+3+1+2人请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['2', '2a'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['3', '3a', '3b'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['4'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['5', '5a'], 3, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 5, '第1个房间应该有5个匹配!实际为' + retReqLen);\n    });\n\n    test('3个队伍各(1~3) 1人*6请求', async function () {\n        //3个队伍(1~3)满足最低要求再补充\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['2'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['3'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['4'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['5'], 3, 1, 3),\n            buildSinglePlayerMatchReq(['6'], 3, 1, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        //应该是尽量推满, 而不是按min去创建两个房间\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 6, '第1个房间应该有6个匹配!实际为' + retReqLen);\n    });\n\n    test('3个队伍各(2~3) 1人*6请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 3, 2, 3),\n            buildSinglePlayerMatchReq(['2'], 3, 2, 3),\n            buildSinglePlayerMatchReq(['3'], 3, 2, 3),\n            buildSinglePlayerMatchReq(['4'], 3, 2, 3),\n            buildSinglePlayerMatchReq(['5'], 3, 2, 3),\n            buildSinglePlayerMatchReq(['6'], 3, 2, 3),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 6, '第1个房间应该有6个匹配!实际为' + retReqLen);\n\n\n    });\n\n    test('3个队伍各(1~2) 1人*12请求', async function () {\n        //3个队伍(1~2) 组合满2个房间\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq(['1'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['2'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['3'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['4'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['5'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['6'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['7'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['8'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['9'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['10'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['11'], 3, 1, 2),\n            buildSinglePlayerMatchReq(['12'], 3, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 2, '应该创建2个房间!实际为' + result.resultCreateRoom?.length);\n        let retReqLen = result.resultCreateRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 6, '第1个房间应该有6个匹配!实际为' + retReqLen);\n        retReqLen = result.resultCreateRoom![1].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 6, '第2个房间应该有6个匹配!实际为' + retReqLen);\n    });\n\n\n\n    test('房间招人:2个队伍各(1~2) 已有1*2人, 匹配1人*1请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildRoomJoinUsMatchReq('1', 2, 1, 2, [\n                { teamId: '1', playerIds: ['1'] },\n                { teamId: '2', playerIds: ['2'] }\n            ]),\n            buildSinglePlayerMatchReq(['1'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultJoinRoom, '应该加入1个房间!');\n        assert.ok(result.resultJoinRoom?.length === 1, '应该加入1个房间!实际为' + result.resultJoinRoom?.length);\n        let retReqLen = result.resultJoinRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 1, '第1个结果应该有1个匹配!实际为' + retReqLen);\n    });\n    test('房间招人:2个队伍各(1~3) 已有1+1人, 匹配1+2人请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildRoomJoinUsMatchReq('1', 2, 1, 3, [\n                { teamId: '1', playerIds: ['1'] },\n                { teamId: '2', playerIds: ['2'] }\n            ]),\n            buildSinglePlayerMatchReq(['1'], 2, 1, 3),\n            buildSinglePlayerMatchReq(['2', '2a'], 2, 1, 3),\n\n            //干扰\n            buildSinglePlayerMatchReq(['a1'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['b1'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['c1'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultJoinRoom, '应该加入1个房间!');\n        assert.ok(result.resultJoinRoom?.length === 1, '应该加入1个房间!实际为' + result.resultJoinRoom?.length);\n        let retReqLen = result.resultJoinRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个结果应该有2个匹配!实际为' + retReqLen);\n    });\n\n    test('房间招人:2个队伍各(1~2) 已有1*2人, 匹配1人*2请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildRoomJoinUsMatchReq('1', 2, 1, 2, [\n                { teamId: '1', playerIds: ['1'] },\n                { teamId: '2', playerIds: ['2'] }\n            ]),\n            buildSinglePlayerMatchReq(['1'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['2'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultJoinRoom, '应该加入1个房间!');\n        assert.ok(result.resultJoinRoom?.length === 1, '应该加入1个房间!实际为' + result.resultJoinRoom?.length);\n        let retReqLen = result.resultJoinRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个结果应该有2个匹配!实际为' + retReqLen);\n    });\n\n    test('房间招人:2个队伍各(1~2) 已有1*2人, 匹配1人*3请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildRoomJoinUsMatchReq('1', 2, 1, 2, [\n                { teamId: '1', playerIds: ['1'] },\n                { teamId: '2', playerIds: ['2'] },\n            ]),\n            buildSinglePlayerMatchReq(['1'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['2'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['3'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultJoinRoom, '应该加入1个房间!');\n        assert.ok(result.resultJoinRoom?.length === 1, '应该加入1个房间!实际为' + result.resultJoinRoom?.length);\n        let retReqLen = result.resultJoinRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 2, '第1个结果应该有2个匹配!实际为' + retReqLen);\n    });\n\n    test('房间招人:2个队伍各(1~2) 已有1+2人, 匹配1人*3请求', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildRoomJoinUsMatchReq('1', 2, 1, 2, [\n                { teamId: '1', playerIds: ['1'] },\n                { teamId: '2', playerIds: ['2', '3'] },\n            ]),\n            buildSinglePlayerMatchReq(['1'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['2'], 2, 1, 2),\n            buildSinglePlayerMatchReq(['3'], 2, 1, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultJoinRoom, '应该加入1个房间!');\n        assert.ok(result.resultJoinRoom?.length === 1, '应该加入1个房间!实际为' + result.resultJoinRoom?.length);\n        let retReqLen = result.resultJoinRoom![0].matchRequestPlayerResults.length;\n        assert.ok(retReqLen === 1, '第1个结果应该有2个匹配!实际为' + retReqLen);\n    });\n});\n"]}