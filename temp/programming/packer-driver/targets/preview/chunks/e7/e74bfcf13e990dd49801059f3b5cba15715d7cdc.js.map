{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/tsgf-sdk/test/unitTest/TestUnit.ts"],"names":["ApiHelper","initGame","openId","showName","ret","authPlayerToken","succ","transition","game","room","group","init","hallServerUrl","data","playerId","playerToken","buildSucc","dispose","req1","appCryptoEncrypt","authTokenDay","ret1","hallClient","client","callApi","isSucc","res","buildErr","err","message","code","Result","CryptoJS","Game","Room","GroupRoom","HallClient","initSDK","buildSDKProvider","desEncryptECB_PKCS7_Base64","input","strKey","keyBytes","lib","WordArray","create","enc","Utf8","parse","words","slice","inputBytes","enResult","DES","encrypt","mode","ECB","padding","pad","Pkcs7","retStr","ciphertext","toString","Base64","desDecryptECB_PKCS7_Base64","inputBase64","cipherParams","CipherParams","decrypt","appId","appSecret","reqData","ts","Date","now","json","JSON","stringify","cText","req"],"mappings":"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","sourcesContent":["\n\nimport { BaseServiceType } from \"tsrpc-proto\";\nimport { ErrorCodes, IResult, Result } from \"../../src/tsgf/Result\";\nimport { IAppEncryptRequest, IAppEncryptRequestT, IBaseEncryptRequestData } from \"../../src/tsgf/apiCrypto/Models\";\nimport CryptoJS from 'crypto-js';\nimport { assert } from \"chai\";\nimport { ResAuthorize } from \"../../src/hallClient/protocols/PtlAuthorize\";\nimport { Game } from \"../../src/Game\";\nimport { Room } from \"../../src/Room\";\nimport { GroupRoom } from \"../../src/GroupRoom\";\nimport { HallClient } from \"../../src/hallClient/HallClient\";\nimport { initSDK } from \"../../src/SDK\";\nimport { buildSDKProvider } from \"./env\";\n\nclass ApiHelper {\n    /**\n     * des加密，ECB模式，PKCS7填充，密钥用UTF8提取前8个字节，输入字符串使用UTF8编码解析，输出加密后的base64编码字符串\n     *\n     * @public\n     * @param input 要加密的字符串（明文）\n     * @param strKey 长度超过8个字节即可，只会取前8个字节\n     * @returns\n     */\n    public static desEncryptECB_PKCS7_Base64(input: string, strKey: string): string {\n        //转为utf8字节,并只取前8个字节\n        let keyBytes = CryptoJS.lib.WordArray.create(CryptoJS.enc.Utf8.parse(strKey).words.slice(0, 8), 8);\n        let inputBytes = CryptoJS.enc.Utf8.parse(input);\n        let enResult = CryptoJS.DES.encrypt(inputBytes, keyBytes, {\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7\n        });\n        let retStr = enResult.ciphertext.toString(CryptoJS.enc.Base64);\n\n        return retStr;\n    }\n    /**\n     * des解密，ECB模式，PKCS7填充，密钥用UTF8提取前8个字节，输入字符串使用UTF8编码解析，输出加密后的base64编码字符串\n     *\n     * @public\n     * @param inputBase64 密文（base64格式）\n     * @param strKey\n     * @returns\n     */\n    public static desDecryptECB_PKCS7_Base64(inputBase64: string, strKey: string): string {\n        //转为utf8字节,并只取前8个字节\n        let keyBytes = CryptoJS.lib.WordArray.create(CryptoJS.enc.Utf8.parse(strKey).words.slice(0, 8), 8);\n        let inputBytes = CryptoJS.enc.Base64.parse(inputBase64);\n        let cipherParams = CryptoJS.lib.CipherParams.create({\n            ciphertext: inputBytes,\n        });\n        let enResult = CryptoJS.DES.decrypt(cipherParams, keyBytes, {\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7,\n        });\n        let retStr = enResult.toString(CryptoJS.enc.Utf8);\n\n        return retStr;\n    }\n    /**\n     * 调用AppCrypto协议的加密接口\n     *\n     * @param appId\n     * @param appSecret\n     * @param reqData\n     * @returns\n     */\n    public static appCryptoEncrypt(appId: string, appSecret: string, reqData: any)\n        : IAppEncryptRequest {\n\n        reqData.ts = Date.now();\n        let json = JSON.stringify(reqData);\n        let cText = ApiHelper.desEncryptECB_PKCS7_Base64(json, appSecret);\n        let req: IAppEncryptRequest = {\n            appId: appId,\n            ciphertext: cText,\n        };\n        return req;\n    }\n\n}\n\ninitSDK(buildSDKProvider());\n\nexport const hallServerUrl = 'http://127.0.0.1:7100';\nconst hallClient = new HallClient(hallServerUrl);\n\nexport interface sdkApi {\n    game: Game;\n    room: Room;\n    group: GroupRoom;\n    \n    playerId: string;\n    playerToken: string;\n    dispose(): Promise<void>;\n}\n\n/**模拟应用在服务端授权拿到token后, 初始化SDK客户端*/\nexport async function initGame(openId: string, showName: string): Promise<IResult<sdkApi>> {\n    let ret = await authPlayerToken(openId, showName);\n    if (!ret.succ) return Result.transition(ret);\n\n    let game = new Game();\n    let room = new Room(game);\n    let group = new GroupRoom(game, room);\n\n    game.init(hallServerUrl, ret.data.playerId, ret.data.playerToken);\n    return Result.buildSucc({\n        game, room, group,\n        playerId: ret.data.playerId,\n        playerToken: ret.data.playerToken,\n        async dispose(): Promise<void> {\n            await group.dispose();\n            await room.dispose();\n            await game.dispose();\n        },\n    });\n}\n\n/**模拟应用在服务端获取玩家授权*/\nexport async function authPlayerToken(openId: string, showName: string): Promise<IResult<ResAuthorize>> {\n    let req1 = ApiHelper.appCryptoEncrypt(\"default\", \"FDGWPRET345-809RGKFER43SKGF\", {\n        openId: openId,\n        showName: showName,\n        authTokenDay: 1,\n    });\n    const ret1 = await hallClient.client.callApi(\"Authorize\", req1);\n    if (ret1.isSucc) return Result.buildSucc(ret1.res);\n    return Result.buildErr(ret1.err?.message, (ret1.err?.code ?? 1) as number);\n}"]}