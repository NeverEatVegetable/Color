{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/tsgf-sdk/src/GroupRoom.ts"],"names":["GroupRoomEvents","GroupRoom","Game","EMatchFromType","ErrorCodes","Result","logger","Factory","EventEmitter","constructor","eventEmitter","dispose","removeAllListeners","__emitLeaveGroup","roomInfo","emit","arguments","onLeaveGroup","fn","on","offLeaveGroup","off","__emitJoinGroup","onJoinGroup","offJoinGroup","__emitGroupMatchStart","matchReqId","reqPlayerId","matchParams","onGroupMatchStart","offGroupMatchStart","__emitGroupMatchResult","errMsg","errCode","matchResult","onGroupMatchResult","offGroupMatchResult","__emitGroupMatchEnterRoom","result","onGroupMatchEnterRoom","offGroupMatchEnterRoom","__emitPlayerJoinGroup","player","onPlayerJoinGroup","offPlayerJoinGroup","__emitPlayerLeaveGroup","onPlayerLeaveGroup","offPlayerLeaveGroup","__emitDismissGroup","onDismissGroupRoom","offDismissGroup","__emitRecvGroupMsg","msg","onRecvGroupMsg","offRecvGroupMsg","__emitChangePlayerNetworkState","onChangePlayerNetworkState","offChangePlayerNetworkState","__emitChangeCustomPlayerProfile","changeInfo","onChangeCustomPlayerProfile","offChangeCustomPlayerProfile","__emitChangeCustomPlayerStatus","onChangeCustomPlayerStatus","offChangeCustomPlayerStatus","__emitChangeGroup","onChangeGroup","offChangeGroup","currGroupRoom","_currGroupRoomId","_room","currRoomInfo","roomId","game","room","_game","_currGroupRoomIsOwn","_lastGroupRoomId","events","_hookRoomEmitHandler","_procRoomAllPlayersMatchResult","emitLeaveRoomOld","__emitLeaveRoom","call","emitDismissRoomOld","__emitDismissRoom","dismissGroup","undefined","key","bindGroupHandler","oldFn","t","args","apply","currGroupRoomId","playerPara","buildPlayerParaFromInfo","__gameClient","currPlayerInfo","leaveRet","leaveRoom","succ","transition","joinRet","joinRoomByServer","gameServerUrl","teamId","backGroupRoomRet","joinGroup","error","backGroup","buildErr","RoomNotIn","buildSucc","ret","createGroup","ins","__hallClient","ownDismissRoom","__myPlayerToken","roomPara","isPrivate","maxPlayers","ownerPlayerId","__myPlayerId","roomName","retainEmptyRoomTime","createRoom","data","joinRoom","groupRoomId","leaveGroup","dismissRoom","requestMatch","matchP","matchFromType","RoomAllPlayers","matchFromInfo","cancelMatch","queryMatch","sendGroupMsg","roomMsg","sendRoomMsg","changeCustomPlayerProfile","customPlayerProfile","changeCustomPlayerStatus","customPlayerStatus"],"mappings":"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","sourcesContent":["import { Game } from \"./Game\";\nimport { Room, RoomEvents } from \"./Room\";\nimport { EMatchFromType, IMatchParamsBase, IMatchParamsFromRoomAllPlayer, IMatchPlayerResultWithServer, IMatchResult } from \"./tsgf/match/Models\";\nimport { IChangeCustomPlayerProfile, IChangeCustomPlayerStatus, IPlayerInfo, IPlayerInfoPara } from \"./tsgf/player/IPlayerInfo\";\nimport { ErrorCodes, IResult, Result } from \"./tsgf/Result\";\nimport { ICreateRoomPara, IRoomInfo } from \"./tsgf/room/IRoomInfo\";\nimport { logger } from \"./tsgf/logger\";\nimport { Factory } from \"./Factory\";\nimport { IRecvRoomMsg, IRoomMsg } from \"./tsgf/room/IRoomMsg\";\nimport { EventEmitter } from \"./tsgf/EventEmitter\";\n\nexport class GroupRoomEvents {\n    protected eventEmitter: EventEmitter;\n\n    /**\n     */\n    constructor() {\n        this.eventEmitter = new EventEmitter();\n    }\n\n    public dispose() {\n        this.eventEmitter.removeAllListeners();\n    }\n\n    /**\n     * @internal\n     */\n    __emitLeaveGroup(roomInfo: IRoomInfo): void { this.eventEmitter.emit('LeaveGroup', ...arguments); }\n    /**当前玩家不管什么原因离开了组队(主动离开,主动解散,房间被解散等等),都会触发*/\n    public onLeaveGroup(fn: (roomInfo: IRoomInfo) => void): void { this.eventEmitter.on('LeaveGroup', fn); }\n    public offLeaveGroup(fn: (roomInfo: IRoomInfo) => void): void { this.eventEmitter.off('LeaveGroup', fn); }\n\n    /**\n     * @internal\n     */\n    __emitJoinGroup(roomInfo: IRoomInfo): void { this.eventEmitter.emit('JoinGroup', ...arguments); }\n    /**当前玩家加入到组队后触发*/\n    public onJoinGroup(fn: (roomInfo: IRoomInfo) => void): void { this.eventEmitter.on('JoinGroup', fn); }\n    public offJoinGroup(fn: (roomInfo: IRoomInfo) => void): void { this.eventEmitter.off('JoinGroup', fn); }\n\n\n    /**\n     * @internal\n     */\n    __emitGroupMatchStart(matchReqId: string, reqPlayerId: string, matchParams: IMatchParamsFromRoomAllPlayer) { this.eventEmitter.emit('GroupMatchStart', ...arguments); }\n    /**\n     * 组队发起了匹配时触发\n     * @param fn \n     */\n    public onGroupMatchStart(fn: (matchReqId: string, reqPlayerId: string, matchParams: IMatchParamsFromRoomAllPlayer) => void) { this.eventEmitter.on('GroupMatchStart', fn); }\n    public offGroupMatchStart(fn: (matchReqId: string, reqPlayerId: string, matchParams: IMatchParamsFromRoomAllPlayer) => void) { this.eventEmitter.off('GroupMatchStart', fn); }\n\n    /**\n     * @internal\n     */\n    __emitGroupMatchResult(errMsg?: string, errCode?: ErrorCodes, matchResult?: IMatchPlayerResultWithServer) { this.eventEmitter.emit('GroupMatchResult', ...arguments); }\n    /**\n     * 组队匹配有结果了触发\n     * \n     * 注意: 如果是成功的, 则会自动进入房间 (事件: onGroupMatchEnterRoom )\n     * @param fn \n     */\n    public onGroupMatchResult(fn: (errMsg?: string, errCode?: ErrorCodes, matchResult?: IMatchPlayerResultWithServer) => void) { this.eventEmitter.on('GroupMatchResult', fn); }\n    public offGroupMatchResult(fn: (errMsg?: string, errCode?: ErrorCodes, matchResult?: IMatchPlayerResultWithServer) => void) { this.eventEmitter.off('GroupMatchResult', fn); }\n\n    /**\n     * @internal\n     */\n    __emitGroupMatchEnterRoom(result: IResult<IRoomInfo>) { this.eventEmitter.emit('GroupMatchEnterRoom', ...arguments); }\n    /**\n     * 当组队匹配成功并进入房间后触发\n     * \n     * 如果进入匹配房间失败了就会再尝试回到组队, 可以使用 this.currGroupRoom 来判断是否成功回到组队房间\n     * \n     * @param fn result.data === Room.ins.currRoomInfo\n     */\n    public onGroupMatchEnterRoom(fn: (result: IResult<IRoomInfo>) => void) { this.eventEmitter.on('GroupMatchEnterRoom', fn); }\n    public offGroupMatchEnterRoom(fn: (result: IResult<IRoomInfo>) => void) { this.eventEmitter.off('GroupMatchEnterRoom', fn); }\n\n\n    /**\n     * @internal\n     */\n    __emitPlayerJoinGroup(player: IPlayerInfo, roomInfo: IRoomInfo): void { this.eventEmitter.emit('PlayerJoinGroup', ...arguments); }\n    /**玩家加入当前组队（自己操作的不触发）*/\n    public onPlayerJoinGroup(fn: (player: IPlayerInfo, roomInfo: IRoomInfo) => void): void { this.eventEmitter.on('PlayerJoinGroup', fn); }\n    public offPlayerJoinGroup(fn: (player: IPlayerInfo, roomInfo: IRoomInfo) => void): void { this.eventEmitter.off('PlayerJoinGroup', fn); }\n\n    /**\n     * @internal\n     */\n    __emitPlayerLeaveGroup(player: IPlayerInfo, roomInfo: IRoomInfo): void { this.eventEmitter.emit('PlayerLeaveGroup', ...arguments); }\n    /**玩家退出当前组队（自己操作的不触发）*/\n    public onPlayerLeaveGroup(fn: (player: IPlayerInfo, roomInfo: IRoomInfo) => void): void { this.eventEmitter.on('PlayerLeaveGroup', fn); }\n    public offPlayerLeaveGroup(fn: (player: IPlayerInfo, roomInfo: IRoomInfo) => void): void { this.eventEmitter.off('PlayerLeaveGroup', fn); }\n\n    /**\n     * @internal\n     */\n    __emitDismissGroup(roomInfo: IRoomInfo): void { this.eventEmitter.emit('DismissGroup', ...arguments); }\n    /**当前组队被解散（自己操作的不触发）*/\n    public onDismissGroupRoom(fn: (roomInfo: IRoomInfo) => void): void { this.eventEmitter.on('DismissGroup', fn); }\n    public offDismissGroup(fn: (roomInfo: IRoomInfo) => void): void { this.eventEmitter.off('DismissGroup', fn); }\n\n\n    /**\n     * @internal\n     */\n    __emitRecvGroupMsg(msg: IRecvRoomMsg) { this.eventEmitter.emit('RecvGroupMsg', ...arguments); }\n    /**收到组队中玩家发的自定义消息*/\n    public onRecvGroupMsg(fn: (msg: IRecvRoomMsg) => void) { this.eventEmitter.on('RecvGroupMsg', fn); }\n    public offRecvGroupMsg(fn: (msg: IRecvRoomMsg) => void) { this.eventEmitter.off('RecvGroupMsg', fn); }\n\n\n    /**\n     * @internal\n     */\n    __emitChangePlayerNetworkState(player: IPlayerInfo): void { this.eventEmitter.emit('RequirePlayerSyncState', ...arguments); }\n    /**组队中其他玩家的网络状态变更(离线/上线)*/\n    public onChangePlayerNetworkState(fn: (player: IPlayerInfo) => void): void { this.eventEmitter.on('RequirePlayerSyncState', fn); }\n    public offChangePlayerNetworkState(fn: (player: IPlayerInfo) => void): void { this.eventEmitter.off('RequirePlayerSyncState', fn); }\n\n    /**\n     * @internal\n     */\n    __emitChangeCustomPlayerProfile(changeInfo: IChangeCustomPlayerProfile): void { this.eventEmitter.emit('ChangeCustomPlayerProfile', ...arguments); }\n    /**有玩家修改了自定义属性(只要在房间,自己也会收到)*/\n    public onChangeCustomPlayerProfile(fn: (changeInfo: IChangeCustomPlayerProfile) => void): void { this.eventEmitter.on('ChangeCustomPlayerProfile', fn); }\n    public offChangeCustomPlayerProfile(fn: (changeInfo: IChangeCustomPlayerProfile) => void): void { this.eventEmitter.off('ChangeCustomPlayerProfile', fn); }\n\n    /**\n     * @internal\n     */\n    __emitChangeCustomPlayerStatus(changeInfo: IChangeCustomPlayerStatus): void { this.eventEmitter.emit('ChangeCustomPlayerStatus', ...arguments); }\n    /**有玩家修改了自定义状态(只要在房间,自己也会收到)*/\n    public onChangeCustomPlayerStatus(fn: (changeInfo: IChangeCustomPlayerStatus) => void): void { this.eventEmitter.on('ChangeCustomPlayerStatus', fn); }\n    public offChangeCustomPlayerStatus(fn: (changeInfo: IChangeCustomPlayerStatus) => void): void { this.eventEmitter.off('ChangeCustomPlayerStatus', fn); }\n\n    /**\n     * @internal\n     */\n    __emitChangeGroup(roomInfo: IRoomInfo): void { this.eventEmitter.emit('ChangeGroup', ...arguments); }\n    /**组队房间信息有修改*/\n    public onChangeGroup(fn: (roomInfo: IRoomInfo) => void): void { this.eventEmitter.on('ChangeGroup', fn); }\n    public offChangeGroup(fn: (roomInfo: IRoomInfo) => void): void { this.eventEmitter.off('ChangeGroup', fn); }\n\n\n}\n\n/**\n * 组队房间功能模块\n * \n * - 使用房间功能来实现的组队功能模块, 即: 同时只能在`组队房间`或者`普通房间`中\n * - 只要在组队房间中, 组队房间有的事件, 都将由组队房间接管, 房间事件不会触发\n *\n */\nexport class GroupRoom {\n\n    /**单例*/\n    public static ins: GroupRoom;\n\n    private _game: Game;\n    private _room: Room;\n\n    /**当前保留的组队房间id*/\n    private _currGroupRoomId: string | null = null;\n    /**当前保留的组队房间是否是房主*/\n    private _currGroupRoomIsOwn = false;\n    /**上一个组队房间id,因为触发顺序问题,需要保存一下最后一次的组队房间*/\n    private _lastGroupRoomId: string | null = null;\n\n    /**\n     * 当前如果在组队房间中则能获取到房间信息, (即使在房间中,但不是组队房间依旧返回null)\n     */\n    public get currGroupRoom(): IRoomInfo | null {\n        if (!this._currGroupRoomId || !this._room.currRoomInfo) return null;\n        if (this._room.currRoomInfo.roomId !== this._currGroupRoomId) return null;\n        return this._room.currRoomInfo;\n    };\n\n    /**\n     * 所有事件\n     */\n    public readonly events = new GroupRoomEvents();\n\n    /**\n     * @internal\n     */\n    constructor(game: Game, room: Room) {\n        this._game = game;\n        this._room = room;\n\n        //hook, 区分组队房间和非组队房间, 消息各自走自己的事件\n        this._hookRoomEmitHandler('__emitJoinRoom',\n            (roomInfo: IRoomInfo) => this.events.__emitJoinGroup(roomInfo));\n        this._hookRoomEmitHandler('__emitRecvRoomMsg',\n            (msg: IRecvRoomMsg) => this.events.__emitRecvGroupMsg(msg));\n        this._hookRoomEmitHandler('__emitPlayerJoinRoom',\n            (player: IPlayerInfo, roomInfo: IRoomInfo) => this.events.__emitPlayerJoinGroup(player, roomInfo));\n        this._hookRoomEmitHandler('__emitPlayerLeaveRoom',\n            (player: IPlayerInfo, roomInfo: IRoomInfo) => this.events.__emitPlayerLeaveGroup(player, roomInfo));\n        this._hookRoomEmitHandler('__emitChangeRoom',\n            (roomInfo: IRoomInfo) => this.events.__emitChangeGroup(roomInfo));\n        this._hookRoomEmitHandler('__emitChangePlayerNetworkState',\n            (player: IPlayerInfo) => this.events.__emitChangePlayerNetworkState(player));\n        this._hookRoomEmitHandler('__emitChangeCustomPlayerProfile',\n            (changeInfo: IChangeCustomPlayerProfile) => this.events.__emitChangeCustomPlayerProfile(changeInfo));\n        this._hookRoomEmitHandler('__emitChangeCustomPlayerStatus',\n            (changeInfo: IChangeCustomPlayerStatus) => this.events.__emitChangeCustomPlayerStatus(changeInfo));\n        this._hookRoomEmitHandler('__emitRoomAllPlayersMatchStart',\n            (matchReqId: string, reqPlayerId: string, matchParams: IMatchParamsFromRoomAllPlayer) => this.events.__emitGroupMatchStart(matchReqId, reqPlayerId, matchParams));\n        //下面的劫持过来后需要定制处理\n        this._hookRoomEmitHandler('__emitRoomAllPlayersMatchResult', this._procRoomAllPlayersMatchResult);\n        //下面是定制房间事件\n        let emitLeaveRoomOld = this._room.events.__emitLeaveRoom;\n        this._room.events.__emitLeaveRoom = (roomInfo: IRoomInfo) => {\n            if (this._lastGroupRoomId === roomInfo.roomId) {\n                this._currGroupRoomId = null;\n                this.events.__emitLeaveGroup(roomInfo);\n            } else {\n                //离开的不是组队房间,则照常触发\n                emitLeaveRoomOld.call(this._room.events, roomInfo);\n            }\n        };\n        let emitDismissRoomOld = this._room.events.__emitDismissRoom;\n        this._room.events.__emitDismissRoom = (roomInfo: IRoomInfo) => {\n            if (this._lastGroupRoomId === roomInfo.roomId) {\n                //因为可能触发顺序, 导致 this._currGroupRoomId 先被置空, 就用 _lastGroupRoomId 来判断\n                this.events.__emitDismissGroup(roomInfo);\n            } else {\n                //解散的不是组队房间,则照常触发\n                emitDismissRoomOld.call(this._room.events, roomInfo);\n            }\n        };\n    }\n\n    public async dispose(): Promise<void> {\n        if (this._currGroupRoomId && this._currGroupRoomIsOwn) {\n            // 如果已经在自己创建的组队房间中,则直接解散之前的\n            this.dismissGroup();\n        }\n\n        this.events.dispose();\n        //@ts-ignore\n        this.eventEmitter = undefined;\n        //@ts-ignore\n        this._game = undefined;\n    }\n\n    protected _hookRoomEmitHandler(key: keyof RoomEvents, bindGroupHandler: Function): void {\n        let oldFn = this._room.events[key];\n        let t = this;\n        this._room.events[key] = async function () {\n            const args = arguments;\n            if (t.currGroupRoom) {\n                bindGroupHandler.apply(t, args);\n            } else {\n                //@ts-ignore\n                oldFn?.apply(t._room.events, args);\n            }\n        };\n    }\n\n\n    private async _procRoomAllPlayersMatchResult(errMsg?: string, errCode?: ErrorCodes, matchResult?: IMatchPlayerResultWithServer): Promise<void> {\n        //触发组队房间匹配结果事件\n        this.events.__emitGroupMatchResult(errMsg, errCode, matchResult);\n\n        //匹配不成功忽略\n        if (!matchResult) return;\n\n        //组队房间匹配成功了, 实现自动进入房间的逻辑\n        let currGroupRoomId = this._currGroupRoomId!;\n        let playerPara = Factory.buildPlayerParaFromInfo(this._room.__gameClient!.currPlayerInfo!);\n\n        //使用保留房间的方式离开房间,便于之后再回到组队房间\n        let leaveRet = await this._room.leaveRoom();\n        if (!leaveRet.succ) {\n            //离开组队房间还失败...这一般不可能, 除非通讯错误等\n            //就当作还在组队房间\n            this._currGroupRoomId = currGroupRoomId;\n            this.events.__emitGroupMatchEnterRoom(Result.transition(leaveRet));\n            return;\n        }\n        //因为离开操作会让标志被清理, 这里重新设置一下\n        this._currGroupRoomId = currGroupRoomId;\n\n        //离开组队房间后,进入匹配房间\n        let joinRet = await this._room.joinRoomByServer(matchResult.gameServerUrl!, playerPara, {\n            roomId: matchResult.roomId,\n            teamId: matchResult.teamId\n        });\n        if (!joinRet.succ) {\n            //进入匹配房间失败了\n            //准备回到组队房间\n            let backGroupRoomRet = await this.joinGroup(playerPara, currGroupRoomId);\n            if (!backGroupRoomRet.succ) {\n                //回到组队房间还失败.那没办法了\n                logger.error('匹配成功,进入匹配房间失败:', joinRet, '尝试回到组队房间还失败:', backGroupRoomRet);\n            }\n            this.events.__emitGroupMatchEnterRoom(Result.transition(joinRet));\n            return;\n        }\n        this.events.__emitGroupMatchEnterRoom(joinRet);\n    }\n\n    /**\n     * 如果之前是组队匹配进入新房间的, 则可以离开房间并回到之前的组队房间\n     * @returns group \n     */\n    public async backGroup(): Promise<IResult<IRoomInfo>> {\n        if (!this._currGroupRoomId) return Result.buildErr('已经离开组队房间', ErrorCodes.RoomNotIn);\n        if (this._room.currRoomInfo && this._room.currRoomInfo.roomId === this._currGroupRoomId) {\n            //当前已经在组队房间了,直接返回成功\n            return Result.buildSucc(this._room.currRoomInfo);\n        }\n        let playerPara = Factory.buildPlayerParaFromInfo(this._room.__gameClient!.currPlayerInfo!);\n\n        let ret = await this.joinGroup(playerPara, this._currGroupRoomId);\n        return ret;\n    }\n\n    /**\n     * 创建一个组队房间并进入, 之前有在其他房间将自动退出, 成功则 this.currGroupRoom 有值\n     *\n     * @param playerPara\n     * @returns groupRoomId\n     */\n    public async createGroup(playerPara: IPlayerInfoPara): Promise<IResult<string>> {\n\n        if (this._currGroupRoomId && this._currGroupRoomIsOwn) {\n            // 如果之前有在自己另外创建的组队房间中,则直接解散之前的(使用大厅房主接口,不管当前连接是否连着,最稳妥)\n            Game.ins.__hallClient.ownDismissRoom(Game.ins.__myPlayerToken, this._currGroupRoomId);\n        }\n\n        let roomPara: ICreateRoomPara = {\n            isPrivate: true,\n            maxPlayers: 99,\n            ownerPlayerId: this._game.__myPlayerId,\n            roomName: '自定义组队房间',\n            retainEmptyRoomTime: 5 * 60000,// 组队房间保留空房间5个小时, 方便全房间玩家匹配到其他房间去玩了还能回来\n        };\n        let ret = await this._game.__hallClient.createRoom(this._game.__myPlayerToken, roomPara);\n        if (!ret.succ) return Result.transition(ret);\n\n        this._currGroupRoomId = ret.data.roomId;\n        this._currGroupRoomIsOwn = true;\n        this._lastGroupRoomId = ret.data.roomId;\n\n        let joinRet = await this._room.joinRoom(playerPara, { roomId: this._currGroupRoomId });\n        return Result.transition(joinRet, () => ret.data!.roomId);\n    }\n\n    /**\n     * 加入指定组队房间, 成功则 this.currGroupRoom 有值\n     *\n     * @param playerPara 玩家信息参数\n     * @param groupRoomId 组队房间ID\n     */\n    public async joinGroup(playerPara: IPlayerInfoPara, groupRoomId: string): Promise<IResult<IRoomInfo>> {\n\n        if (this._currGroupRoomId && this._currGroupRoomId !== groupRoomId && this._currGroupRoomIsOwn) {\n            // 如果之前有在自己另外创建的组队房间中,则直接解散之前的(使用大厅房主接口,不管当前连接是否连着,最稳妥)\n            Game.ins.__hallClient.ownDismissRoom(Game.ins.__myPlayerToken, this._currGroupRoomId);\n        }\n\n        this._currGroupRoomId = groupRoomId;//因为加入房间消息可能在下面返回前就收到了,所以提前设置好,发现失败后再移除\n        this._currGroupRoomIsOwn = false;\n        let ret = await this._room.joinRoom(playerPara, { roomId: groupRoomId });\n        if (!ret.succ) {\n            this._currGroupRoomId = null;\n        } else {\n            this._lastGroupRoomId = ret.data.roomId;\n        }\n        return Result.transition(ret, () => ret.data!);\n    }\n\n    /**\n     * 退出当前组队房间\n     * @returns \n     */\n    public async leaveGroup(): Promise<IResult<null>> {\n        if (!this.currGroupRoom) return Result.buildErr('当前不在组队房间中!', ErrorCodes.RoomNotIn);\n        let ret = await this._room.leaveRoom();\n        return ret;\n    }\n    /**\n     * 【仅房主】解散当前组队房间\n     * @returns  \n     */\n    public async dismissGroup(): Promise<IResult<null>> {\n        if (!this.currGroupRoom) return Result.buildErr('当前不在组队房间中!', ErrorCodes.RoomNotIn);\n        let ret = await this._room.dismissRoom();\n        return ret;\n    }\n\n\n    /**\n     * [**在组队房间中才可以发起**] 发起组队匹配请求(请求成功即返回), 后续匹配成功则组队中所有玩家会自动进入匹配的房间\n     * \n     * - 成功发起匹配通知: onGroupMatchStart\n     * - 匹配结果的通知: onGroupMatchResult\n     * - 匹配成功开始进入匹配房间的通知: onGroupMatchEnterRoom\n     * \n     * 另外: 可由一个玩家(仅一个)调用 queryMatch 等待完整匹配结果(即房间所有玩家各自的匹配结果信息)\n     *\n     * @param matchParams\n     * @returns 匹配请求id\n     */\n    public async requestMatch(matchParams: IMatchParamsBase): Promise<IResult<string>> {\n        if (!this.currGroupRoom) return Result.buildErr('当前不在组队房间中!', ErrorCodes.RoomNotIn);\n        let matchP = matchParams as IMatchParamsFromRoomAllPlayer;\n        matchP.matchFromType = EMatchFromType.RoomAllPlayers;\n        matchP.matchFromInfo = {};\n        let ret = await this._room.__gameClient!.requestMatch(matchP);\n        return ret;\n    }\n\n    /**\n     * [**在组队房间中才可以发起**] 取消组队匹配请求\n     * \n     * 可能发生并发,导致虽然取消成功了,但还是收到了匹配成功的通知\n     *\n     * @returns\n     */\n    public async cancelMatch(): Promise<IResult<null>> {\n        if (!this.currGroupRoom) return Result.buildErr('当前不在组队房间中!', ErrorCodes.RoomNotIn);\n        let ret = await this._room.__gameClient!.cancelMatch();\n        return ret;\n    }\n\n    /**\n     * [在组队房间中才可以发起] 查询完整的组队匹配结果\n     * \n     * 会等到有结果了才返回!\n     * \n     * 注意: 同时只能只有一个玩家进行查询等待,一般使用相关事件来获取结果即可\n     *\n     * @returns\n     */\n    public async queryMatch(): Promise<IResult<IMatchResult>> {\n        if (!this.currGroupRoom) return Result.buildErr('当前不在组队房间中!', ErrorCodes.RoomNotIn);\n        let ret = await this._room.__gameClient!.queryMatch();\n        return ret;\n    }\n\n\n\n\n    /**\n     * 发送组队内消息（自定义消息），可以指定全部玩家或部分玩家或其他玩家 来接收\n     *\n     * @public\n     * @param roomMsg \n     */\n    public async sendGroupMsg(roomMsg: IRoomMsg): Promise<IResult<null>> {\n        if (!this.currGroupRoom) return Result.buildErr('当前不在组队房间中!', ErrorCodes.RoomNotIn);\n        let ret = await this._room.sendRoomMsg(roomMsg);\n        return ret;\n    }\n\n    /**\n     * 修改自己的玩家自定义属性,如果当前在房间中会同时会触发通知(房间中所有玩家)\n     *\n     * @param customPlayerProfile\n     */\n    public async changeCustomPlayerProfile(customPlayerProfile: string): Promise<IResult<null>> {\n        if (!this.currGroupRoom) return Result.buildErr('当前不在组队房间中!', ErrorCodes.RoomNotIn);\n        let ret = await this._room.changeCustomPlayerProfile(customPlayerProfile);\n        return ret;\n    }\n\n    /**\n     * 修改自己的玩家自定义状态,如果当前在房间中会同时会触发通知(房间中所有玩家)\n     *\n     * @param customPlayerStatus\n     */\n    public async changeCustomPlayerStatus(customPlayerStatus: number): Promise<IResult<null>> {\n        if (!this.currGroupRoom) return Result.buildErr('当前不在组队房间中!', ErrorCodes.RoomNotIn);\n        let ret = await this._room.changeCustomPlayerStatus(customPlayerStatus);\n        return ret;\n    }\n\n}\n"]}