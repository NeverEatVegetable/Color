{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/tsgf-sdk/src/gameClient/GameClient.ts"],"names":["GameClient","gameServiceProto","serviceProto","AWsClient","logger","ErrorCodes","Result","playerToken","_playerToken","playerId","_playerId","currRoomInfo","_currRoomInfo","roomInfo","_currPlayerInfo","playerList","find","p","currPlayerInfo","constructor","serverUrl","reqTimeout","roomWaitReconnectTime","server","json","timeout","enabledReconnect","reconnectWaitSec","reconnectTimerHD","onReconnectStart","onDisconnected","onLeaveRoom","onJoinRoom","onReconnectResult","onRecvRoomMsg","onPlayerJoinRoom","onPlayerLeaveRoom","onDismissRoom","onStartFrameSync","onStopFrameSync","onRecvFrame","onRequirePlayerSyncState","onChangePlayerNetworkState","onChangeCustomPlayerProfile","onChangeCustomPlayerStatus","onChangeRoom","onChangePlayerTeam","onRoomAllPlayersMatchStart","onRoomAllPlayersMatchResult","client","flows","postDisconnectFlow","push","v","isManual","call","clearTimeout","setTimeout","startReconnect","reason","clearData","listenMsg","msg","recvRoomMsg","joinPlayer","joinPlayerId","leavePlayerInfo","startPlayerId","stopPlayerId","syncFrame","dt","player","changePlayerId","matchReqId","reqPlayerId","matchParams","errMsg","errCode","matchResult","disconnect","stopReconnect","isConnected","sendMsg","undefined","currTryCount","failReTry","result","reconnect","succ","log","code","AuthReconnectionFail","error","err","tmpOnRecRet","connectRet","connect","isSucc","buildErr","loginRet","callApi","message","res","buildSucc","authorize","infoPara","req","playerInfo","joinRoom","para","teamId","joinRoomPara","roomId","ret","leaveRoom","dismissRoom","changeRoom","changePara","changeCustomPlayerProfile","customPlayerProfile","robotPlayerId","changePlayerInfo","changeCustomPlayerStatus","customPlayerStatus","changePlayerTeam","newTeamId","sendRoomMsg","roomMsg","startFrameSync","stopFrameSync","playerInpFrame","inpOperates","operates","requestAfterFrames","requestFrames","beginFrameIndex","endFrameIndex","frames","playerSendSyncState","stateData","stateFrameIndex","requestMatch","cancelMatch","queryMatch","createRoomRobot","createPa","roomRobotIds","Array","from","Set","robotInfo","roomRobotLeave","tmpIds","delete"],"mappings":";;;uFAsBaA,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAjBYC,MAAAA,gB,iBAAhBC,Y;;AACAC,MAAAA,S,iBAAAA,S;;AACAC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,U,iBAAAA,U;AAAqBC,MAAAA,M,iBAAAA,M;;;;;;;AAQ9B;;AAGA;AACA;AACA;4BACaN,U,GAAN,MAAMA,UAAN;AAAA;AAAA,kCAAmD;AAGhC,YAAXO,WAAW,GAAW;AAC7B,iBAAO,KAAKC,YAAZ;AACH;;AAEkB,YAARC,QAAQ,GAAW;AAC1B,iBAAO,KAAKC,SAAZ;AACH;;AAGD;AACuB,YAAZC,YAAY,GAAqB;AACxC,iBAAO,KAAKC,aAAZ;AACH;;AACyB,YAAZD,YAAY,CAACE,QAAD,EAA6B;AAAA;;AACnD,eAAKD,aAAL,GAAqBC,QAArB;AACA,eAAKC,eAAL,mDAAuB,KAAKF,aAA5B,qBAAuB,oBAAoBG,UAApB,CAA+BC,IAA/B,CAAoCC,CAAC,IAAIA,CAAC,CAACR,QAAF,KAAe,KAAKC,SAA7D,CAAvB,oCAAkG,IAAlG;AACH;;AAGD;AACyB,YAAdQ,cAAc,GAAuB;AAC5C,iBAAO,KAAKJ,eAAZ;AACH;AAED;;;AA8DA;AACJ;AACA;AACA;AACA;AACA;AACA;AACIK,QAAAA,WAAW,CAACC,SAAD,EAAoBZ,YAApB,EAA0Ca,UAA1C,EAA+DC,qBAA/D,EAA+F;AAAA;;AACtG;AAAA;AAAA,oDAAwB;AACpBC,YAAAA,MAAM,EAAEH,SADY;AAEpBI,YAAAA,IAAI,EAAE,KAFc;AAGpBpB,YAAAA,MAAM;AAAA;AAAA,gCAHc;AAIpBqB,YAAAA,OAAO,EAAEJ;AAJW,WAAxB,CADsG;AAAA;AAAA,eA9FhGb,YA8FgG;AAAA,eA1FhGE,SA0FgG;AAAA,eArFhGE,aAqFgG,GArF9D,IAqF8D;AAAA,eA3EhGE,eA2EgG,GA3E1D,IA2E0D;AAAA,eApEnGY,gBAoEmG,GApEvE,IAoEuE;;AAnE1G;AACJ;AACA;AAiE8G,eAhEnGC,gBAgEmG,GAhEhF,CAgEgF;AAAA,eA/DhGC,gBA+DgG;;AA7D1G;AA6D0G,eA5DnGN,qBA4DmG;;AA1D1G;AACJ;AACA;AACA;AAuD8G,eAtDnGO,gBAsDmG;;AArD1G;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AA8C8G,eA7CnGC,cA6CmG;;AA5C1G;AA4C0G,eA3CnGC,WA2CmG;;AA1C1G;AA0C0G,eAzCnGC,UAyCmG;;AAxC1G;AAwC0G,eAvCnGC,iBAuCmG;;AAtC1G;AAsC0G,eArCnGC,aAqCmG;;AApC1G;AAoC0G,eAnCnGC,gBAmCmG;;AAlC1G;AAkC0G,eAjCnGC,iBAiCmG;;AAhC1G;AAgC0G,eA/BnGC,aA+BmG;;AA9B1G;AA8B0G,eA7BnGC,gBA6BmG;;AA5B1G;AA4B0G,eA3BnGC,eA2BmG;;AA1B1G;AA0B0G,eAzBnGC,WAyBmG;;AAxB1G;AAwB0G,eAvBnGC,wBAuBmG;;AAtB1G;AAsB0G,eArBnGC,0BAqBmG;;AApB1G;AAoB0G,eAnBnGC,2BAmBmG;;AAlB1G;AAkB0G,eAjBnGC,0BAiBmG;;AAhB1G;AAgB0G,eAfnGC,YAemG;;AAd1G;AAc0G,eAbnGC,kBAamG;;AAZ1G;AAY0G,eAXnGC,0BAWmG;;AAV1G;AAU0G,eATnGC,2BASmG;AAOtG,eAAKxC,YAAL,GAAoBA,YAApB;AACA,eAAKE,SAAL,GAAiB,EAAjB;AACA,eAAKY,qBAAL,GAA6BA,qBAA7B,CATsG,CAUtG;;AACA,eAAK2B,MAAL,CAAYC,KAAZ,CAAkBC,kBAAlB,CAAqCC,IAArC,iCAA0C,WAAMC,CAAN,EAAW;AACjD;AACA,gBAAI,CAAC,KAAI,CAAC3C,SAAV,EAAqB,OAAO2C,CAAP,CAF4B,CAIjD;;AACA,gBAAI,CAACA,CAAC,CAACC,QAAP,EAAiB;AAAA;;AACb,kBAAI,KAAI,CAAC5B,gBAAT,EAA2B;AAAA;;AACvB;AACA,yCAAA,KAAI,CAACG,gBAAL,mCAAuB0B,IAAvB,CAA4B,KAA5B,EAAkC,CAAlC;AACA,oBAAI,KAAI,CAAC3B,gBAAT,EAA2B4B,YAAY,CAAC,KAAI,CAAC5B,gBAAN,CAAZ;AAC3B,gBAAA,KAAI,CAACA,gBAAL,GAAwB6B,UAAU,iCAAC;AAAA,yBAAY,KAAI,CAACC,cAAL,CAAoB,CAApB,EAAuB,IAAvB,CAAZ;AAAA,iBAAD,GAA2C,KAAI,CAAC/B,gBAAL,GAAwB,IAAnE,CAAlC;AACA,uBAAO0B,CAAP;AACH,eAPY,CASb;;;AACA,kBAAI,KAAI,CAAC1C,YAAT,EAAuB;AAAA;;AACnB;AACA,qCAAA,KAAI,CAACoB,WAAL,+BAAkBwB,IAAlB,CAAuB,KAAvB,EAA6B,KAAI,CAAC5C,YAAlC;AACH;;AACD,sCAAA,KAAI,CAACmB,cAAL,kCAAqByB,IAArB,CAA0B,KAA1B,EAAgCF,CAAC,CAACM,MAAlC;AACH,aAfD,MAeO;AAAA;;AACH;AACA,uCAAA,KAAI,CAAC7B,cAAL,mCAAqByB,IAArB,CAA0B,KAA1B,eAAgCF,CAAC,CAACM,MAAlC,wBAA4C,kBAA5C;AACH,aAvBgD,CAyBjD;;;AACA,YAAA,KAAI,CAACC,SAAL;;AACA,mBAAOP,CAAP;AACH,WA5BD;AA6BA,eAAKJ,MAAL,CAAYY,SAAZ,CAAsB,eAAtB,EAAwCC,GAAD,IAAS;AAAA;;AAC5C,wCAAK5B,aAAL,iCAAoBqB,IAApB,CAAyB,IAAzB,EAA+BO,GAAG,CAACC,WAAnC;AACH,WAFD;AAGA,eAAKd,MAAL,CAAYY,SAAZ,CAAsB,gBAAtB,EAAyCC,GAAD,IAAS;AAAA;;AAC7C,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,gBAAImD,UAAU,GAAG,KAAKrD,YAAL,CAAkBI,UAAlB,CAA6BC,IAA7B,CAAkCC,CAAC,IAAIA,CAAC,CAACR,QAAF,KAAeqD,GAAG,CAACG,YAA1D,CAAjB;AACA,0CAAK9B,gBAAL,mCAAuBoB,IAAvB,CAA4B,IAA5B,EAAkCS,UAAlC,EAA8C,KAAKrD,YAAnD;AACH,WALD;AAMA,eAAKsC,MAAL,CAAYY,SAAZ,CAAsB,iBAAtB,EAA0CC,GAAD,IAAS;AAAA;;AAC9C,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,0CAAKuB,iBAAL,mCAAwBmB,IAAxB,CAA6B,IAA7B,EAAmCO,GAAG,CAACI,eAAvC,EAAwD,KAAKvD,YAA7D;AACH,WAJD;AAKA,eAAKsC,MAAL,CAAYY,SAAZ,CAAsB,mBAAtB,EAA4CC,GAAD,IAAS;AAAA;;AAChD,gBAAI,KAAKnD,YAAT,EAAuB;AAAA;;AACnB,yCAAKoB,WAAL,gCAAkBwB,IAAlB,CAAuB,IAAvB,EAA6B,KAAK5C,YAAlC;AACH;;AACD,iBAAKA,YAAL,GAAoB,IAApB;AACA,wCAAK0B,aAAL,iCAAoBkB,IAApB,CAAyB,IAAzB,EAA+BO,GAAG,CAACjD,QAAnC;AACH,WAND;AAOA,eAAKoC,MAAL,CAAYY,SAAZ,CAAsB,sBAAtB,EAA+CC,GAAD,IAAS;AAAA;;AACnD,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,0CAAKyB,gBAAL,mCAAuBiB,IAAvB,CAA4B,IAA5B,EAAkC,KAAK5C,YAAvC,EACI,KAAKA,YAAL,CAAkBI,UAAlB,CAA6BC,IAA7B,CAAkCC,CAAC,IAAIA,CAAC,CAACR,QAAF,KAAeqD,GAAG,CAACK,aAA1D,CADJ;AAEH,WALD;AAMA,eAAKlB,MAAL,CAAYY,SAAZ,CAAsB,qBAAtB,EAA8CC,GAAD,IAAS;AAAA;;AAClD,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,0CAAK0B,eAAL,mCAAsBgB,IAAtB,CAA2B,IAA3B,EAAiC,KAAK5C,YAAtC,EACI,KAAKA,YAAL,CAAkBI,UAAlB,CAA6BC,IAA7B,CAAkCC,CAAC,IAAIA,CAAC,CAACR,QAAF,KAAeqD,GAAG,CAACM,YAA1D,CADJ;AAEH,WALD;AAMA,eAAKnB,MAAL,CAAYY,SAAZ,CAAsB,iBAAtB,EAA0CC,GAAD,IAAS;AAAA;;AAC9C,sCAAKtB,WAAL,+BAAkBe,IAAlB,CAAuB,IAAvB,EAA6BO,GAAG,CAACO,SAAjC,EAA4CP,GAAG,CAACQ,EAAhD;AACH,WAFD;AAGA,eAAKrB,MAAL,CAAYY,SAAZ,CAAsB,wBAAtB,EAAiDC,GAAD,IAAS;AAAA;;AACrD,0CAAKrB,wBAAL,mCAA+Bc,IAA/B,CAAoC,IAApC;AACH,WAFD;AAGA,eAAKN,MAAL,CAAYY,SAAZ,CAAsB,kBAAtB,EAA2CC,GAAD,IAAS;AAAA;;AAC/C,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,uCAAKgC,YAAL,gCAAmBU,IAAnB,CAAwB,IAAxB,EAA8B,KAAK5C,YAAnC;AACH,WAJD;AAKA,eAAKsC,MAAL,CAAYY,SAAZ,CAAsB,gCAAtB,EAAyDC,GAAD,IAAS;AAAA;;AAC7D,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,gBAAI0D,MAAM,GAAG,KAAK5D,YAAL,CAAkBI,UAAlB,CAA6BC,IAA7B,CAAkCC,CAAC,IAAIA,CAAC,CAACR,QAAF,KAAeqD,GAAG,CAACU,cAA1D,CAAb;AACA,0CAAK9B,0BAAL,mCAAiCa,IAAjC,CAAsC,IAAtC,EAA4CgB,MAA5C;AACH,WALD;AAMA,eAAKtB,MAAL,CAAYY,SAAZ,CAAsB,iCAAtB,EAA0DC,GAAD,IAAS;AAAA;;AAC9D,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,0CAAK8B,2BAAL,mCAAkCY,IAAlC,CAAuC,IAAvC,EAA6CO,GAA7C;AACH,WAJD;AAKA,eAAKb,MAAL,CAAYY,SAAZ,CAAsB,gCAAtB,EAAyDC,GAAD,IAAS;AAAA;;AAC7D,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,2CAAK+B,0BAAL,oCAAiCW,IAAjC,CAAsC,IAAtC,EAA4CO,GAA5C;AACH,WAJD;AAKA,eAAKb,MAAL,CAAYY,SAAZ,CAAsB,wBAAtB,EAAiDC,GAAD,IAAS;AAAA;;AACrD,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,0CAAKiC,kBAAL,mCAAyBS,IAAzB,CAA8B,IAA9B,EAAoCO,GAApC;AACH,WAJD;AAKA,eAAKb,MAAL,CAAYY,SAAZ,CAAsB,gCAAtB,EAAyDC,GAAD,IAAS;AAAA;;AAC7D,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,0CAAKkC,0BAAL,mCAAiCQ,IAAjC,CAAsC,IAAtC,EAA4CO,GAAG,CAACW,UAAhD,EAA4DX,GAAG,CAACY,WAAhE,EAA6EZ,GAAG,CAACa,WAAjF;AACH,WAJD;AAKA,eAAK1B,MAAL,CAAYY,SAAZ,CAAsB,iCAAtB,EAA0DC,GAAD,IAAS;AAAA;;AAC9D,iBAAKnD,YAAL,GAAoBmD,GAAG,CAACjD,QAAxB;AAEA,2CAAKmC,2BAAL,oCAAkCO,IAAlC,CAAuC,IAAvC,EAA6CO,GAAG,CAACc,MAAjD,EAAyDd,GAAG,CAACe,OAA7D,EAAsEf,GAAG,CAACgB,WAA1E;AACH,WAJD;AAKH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACiBC,QAAAA,UAAU,CAACpB,MAAD,EAAqD;AAAA;;AAAA;AAAA,gBAApDA,MAAoD;AAApDA,cAAAA,MAAoD,GAAnC,kBAAmC;AAAA;;AACxE,YAAA,MAAI,CAACqB,aAAL;;AACA,gBAAI,MAAI,CAACtE,SAAL,IAAkB,MAAI,CAACuC,MAAL,CAAYgC,WAAlC,EAA+C;AAC3C,kBAAI,MAAI,CAACtE,YAAT,EAAuB;AAAA;;AACnB;AACA,sCAAA,MAAI,CAACoB,WAAL,gCAAkBwB,IAAlB,CAAuB,MAAvB,EAA6B,MAAI,CAAC5C,YAAlC;AACH;;AACD,cAAA,MAAI,CAACiD,SAAL;;AACA,oBAAM,MAAI,CAACX,MAAL,CAAYiC,OAAZ,CAAoB,YAApB,EAAkC,EAAlC,CAAN;AACA,oBAAM,MAAI,CAACjC,MAAL,CAAY8B,UAAZ,CAAuB,IAAvB,EAA6BpB,MAA7B,CAAN;AACH;AAVuE;AAW3E;;AACeC,QAAAA,SAAS,GAAkB;AAAA;;AAAA;AACvC,YAAA,MAAI,CAAClD,SAAL,GAAiB,EAAjB;AACA,YAAA,MAAI,CAACF,YAAL,GAAoB,EAApB;AACA,YAAA,MAAI,CAACI,aAAL,GAAqB,IAArB;AACA,YAAA,MAAI,CAACE,eAAL,GAAuB,IAAvB;AACA,YAAA,MAAI,CAACe,gBAAL,GAAwBsD,SAAxB;AACA,YAAA,MAAI,CAACrD,cAAL,GAAsBqD,SAAtB;AACA,YAAA,MAAI,CAAClD,iBAAL,GAAyBkD,SAAzB;AACA,YAAA,MAAI,CAACpD,WAAL,GAAmBoD,SAAnB;AACA,YAAA,MAAI,CAACjD,aAAL,GAAqBiD,SAArB;AACA,YAAA,MAAI,CAAChD,gBAAL,GAAwBgD,SAAxB;AACA,YAAA,MAAI,CAAC/C,iBAAL,GAAyB+C,SAAzB;AACA,YAAA,MAAI,CAAC9C,aAAL,GAAqB8C,SAArB;AACA,YAAA,MAAI,CAAC7C,gBAAL,GAAwB6C,SAAxB;AACA,YAAA,MAAI,CAAC5C,eAAL,GAAuB4C,SAAvB;AACA,YAAA,MAAI,CAAC3C,WAAL,GAAmB2C,SAAnB;AACA,YAAA,MAAI,CAAC1C,wBAAL,GAAgC0C,SAAhC;AACA,YAAA,MAAI,CAACzC,0BAAL,GAAkCyC,SAAlC;AACA,YAAA,MAAI,CAACxC,2BAAL,GAAmCwC,SAAnC;AACA,YAAA,MAAI,CAACvC,0BAAL,GAAkCuC,SAAlC;AACA,YAAA,MAAI,CAACtC,YAAL,GAAoBsC,SAApB;AACA,YAAA,MAAI,CAACrC,kBAAL,GAA0BqC,SAA1B;AACA,YAAA,MAAI,CAACpC,0BAAL,GAAkCoC,SAAlC;AACA,YAAA,MAAI,CAACnC,2BAAL,GAAmCmC,SAAnC;AAvBuC;AAwB1C;;AAGSH,QAAAA,aAAa,GAAS;AAC5B,cAAI,KAAKpD,gBAAT,EAA2B;AACvB4B,YAAAA,YAAY,CAAC,KAAK5B,gBAAN,CAAZ;AACA,iBAAKA,gBAAL,GAAwB,IAAxB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACoB8B,QAAAA,cAAc,CAAC0B,YAAD,EAA2BC,SAA3B,EAA+D;AAAA;;AAAA;AAAA,gBAA9DD,YAA8D;AAA9DA,cAAAA,YAA8D,GAAvC,CAAuC;AAAA;;AAAA,gBAApCC,SAAoC;AAApCA,cAAAA,SAAoC,GAAxB,IAAwB;AAAA;;AACzF,gBAAMC,MAAM,SAAS,MAAI,CAACC,SAAL,EAArB;;AACA,gBAAI,CAAC,MAAI,CAAC/E,YAAV,EAAwB;AACpB;AACA,qBAAO,KAAP;AACH,aALwF,CAMzF;;;AACA,gBAAI8E,MAAM,CAACE,IAAX,EAAiB;AAAA;;AACb,sCAAA,MAAI,CAACvC,MAAL,CAAY7C,MAAZ,kCAAoBqF,GAApB,CAAwB,OAAxB;AACA,uCAAA,MAAI,CAACxD,iBAAL,mCAAwBsB,IAAxB,CAA6B,MAA7B,EAAmC,IAAnC,EAAyC,IAAzC;AACA,qBAAO,IAAP;AACH,aAXwF,CAYzF;;;AACA,gBAAI,CAAC,MAAI,CAAC/C,YAAN,IAAsB8E,MAAM,CAACI,IAAP,IAAe;AAAA;AAAA,0CAAWC,oBAApD,EAA0EN,SAAS,GAAG,KAAZ;;AAE1E,gBAAIA,SAAS,IAAI,MAAI,CAAC3D,gBAAtB,EAAwC;AAAA;;AACpC0D,cAAAA,YAAY;AACZ,uCAAA,MAAI,CAACvD,gBAAL,mCAAuB0B,IAAvB,CAA4B,MAA5B,EAAkC6B,YAAlC;AACA,uCAAA,MAAI,CAACnC,MAAL,CAAY7C,MAAZ,mCAAoBwF,KAApB,CAA0B,UAAUN,MAAM,CAACO,GAAjB,GAAuB,GAAvB,GAA6B,MAAI,CAAClE,gBAAlC,GAAqD,SAA/E;AACA,kBAAI,MAAI,CAACC,gBAAT,EAA2B4B,YAAY,CAAC,MAAI,CAAC5B,gBAAN,CAAZ;AAC3B,cAAA,MAAI,CAACA,gBAAL,GAAwB6B,UAAU,CAAC,MAAM,MAAI,CAACC,cAAL,CAAoB0B,YAApB,EAAkCC,SAAlC,CAAP,EAAqD,MAAI,CAAC1D,gBAAL,GAAwB,IAA7E,CAAlC;AACH,aAND,MAMO;AAAA;;AACH,uCAAA,MAAI,CAACsB,MAAL,CAAY7C,MAAZ,mCAAoBwF,KAApB,CAA0B,UAAUN,MAAM,CAACO,GAA3C;AACA,kBAAIC,WAAW,GAAG,MAAI,CAAC7D,iBAAvB,CAFG,CAEsC;;AACzC,oBAAM,MAAI,CAAC8C,UAAL,CAAgB,iBAAhB,CAAN;AACAe,cAAAA,WAAW,QAAX,IAAAA,WAAW,CAAEvC,IAAb,CAAkB,MAAlB,EAAwB,KAAxB,EAA+B+B,MAAM,CAACO,GAAtC;AACH;;AACD,mBAAO,KAAP;AA3ByF;AA4B5F;AACD;AACJ;AACA;AACA;;;AACiBN,QAAAA,SAAS,GAA2B;AAAA;;AAAA;AAC7C,gBAAMQ,UAAU,SAAS,MAAI,CAAC9C,MAAL,CAAY+C,OAAZ,EAAzB;;AACA,gBAAI,CAACD,UAAU,CAACE,MAAhB,EAAwB;AACpB,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgB,UAAUH,UAAU,CAACnB,MAArC,CAAP;AACH;;AACD,gBAAI,CAAC,MAAI,CAACpE,YAAV,EAAwB;AACpB;AACA,qBAAO;AAAA;AAAA,oCAAO0F,QAAP,CAAgB,IAAhB,EAAsB,CAAtB,CAAP;AACH;;AACD,gBAAMC,QAAQ,SAAS,MAAI,CAAClD,MAAL,CAAYmD,OAAZ,CAAoB,WAApB,EAAiC;AACpD7F,cAAAA,WAAW,EAAE,MAAI,CAACC,YADkC;AAEpDc,cAAAA,qBAAqB,EAAE,MAAI,CAACA;AAFwB,aAAjC,CAAvB;;AAIA,gBAAI,CAAC,MAAI,CAACd,YAAV,EAAwB;AACpB;AACA,oBAAM,MAAI,CAACyC,MAAL,CAAY8B,UAAZ,EAAN;AACA,qBAAO;AAAA;AAAA,oCAAOmB,QAAP,CAAgB,IAAhB,EAAsB,CAAtB,CAAP;AACH;;AACD,gBAAI,CAACC,QAAQ,CAACF,MAAd,EAAsB;AAAA;;AAClB;AACA,oBAAM,MAAI,CAAChD,MAAL,CAAY8B,UAAZ,EAAN;AACA,qBAAO;AAAA;AAAA,oCAAOmB,QAAP,CAAgBC,QAAQ,CAACN,GAAT,CAAaQ,OAA7B,yCAAuCF,QAAQ,CAACN,GAAhD,qBAAuC,cAAcH,IAArD,iCAA6D,CAA7D,CAAP;AACH;;AACD,YAAA,MAAI,CAAChF,SAAL,GAAiByF,QAAQ,CAACG,GAAT,CAAa7F,QAA9B;AACA,YAAA,MAAI,CAACE,YAAL,GAAoBwF,QAAQ,CAACG,GAAT,CAAa3F,YAAjC;AACA,mBAAO;AAAA;AAAA,kCAAO4F,SAAP,CAAiB,IAAjB,CAAP;AAzB6C;AA0BhD;AAGD;AACJ;AACA;AACA;AACA;;;AACiBC,QAAAA,SAAS,CAACC,QAAD,EAAqD;AAAA;;AAAA;AAAA;;AACvE,gBAAMV,UAAU,SAAS,MAAI,CAAC9C,MAAL,CAAY+C,OAAZ,EAAzB;;AACA,gBAAI,CAACD,UAAU,CAACE,MAAhB,EAAwB;AACpB,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgB,UAAUH,UAAU,CAACnB,MAArC,CAAP;AACH;;AACD,gBAAI8B,GAAiB,YAAID,QAAJ,oBAAkC,EAAvD;AACAC,YAAAA,GAAG,CAACnG,WAAJ,GAAkB,MAAI,CAACC,YAAvB;AACAkG,YAAAA,GAAG,CAACpF,qBAAJ,GAA4B,MAAI,CAACA,qBAAjC;AACA,gBAAM6E,QAAQ,SAAS,MAAI,CAAClD,MAAL,CAAYmD,OAAZ,CAAoB,WAApB,EAAiCM,GAAjC,CAAvB;;AACA,gBAAI,CAACP,QAAQ,CAACF,MAAd,EAAsB;AAAA;;AAClB,kBAAIpB,QAAO,4CAAIsB,QAAQ,CAACN,GAAb,qBAAI,eAAcH,IAAlB,kCAA0B,CAArC;;AACA,cAAA,MAAI,CAACX,UAAL,CAAgB,iBAAhB;;AACA,qBAAO;AAAA;AAAA,oCAAOmB,QAAP,CAAgBC,QAAQ,CAACN,GAAT,CAAaQ,OAA7B,EAAsCxB,QAAtC,CAAP;AACH;;AACD,YAAA,MAAI,CAACnE,SAAL,GAAiByF,QAAQ,CAACG,GAAT,CAAaK,UAAb,CAAwBlG,QAAzC;AACA,mBAAO;AAAA;AAAA,kCAAO8F,SAAP,CAAiB,IAAjB,CAAP;AAfuE;AAgB1E;AAGD;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI;AACJ;AACA;AACA;AACA;;;AAEI;AACJ;AACA;AACA;AACA;AACA;AACiBK,QAAAA,QAAQ,CAACC,IAAD,EAA+BC,MAA/B,EAA6E;AAAA;;AAAA;AAAA;;AAC9F,gBAAIC,YAAJ;;AACA,gBAAI,OAAQF,IAAR,KAAkB,QAAtB,EAAgC;AAC5BE,cAAAA,YAAY,GAAG;AACXC,gBAAAA,MAAM,EAAEH,IADG;AAEXC,gBAAAA;AAFW,eAAf;AAIH,aALD,MAKO;AACHC,cAAAA,YAAY,GAAGF,IAAf;AACH;;AACD,gBAAMI,GAAG,SAAS,MAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,UAApB,EAAgCW,YAAhC,CAAlB;;AACA,gBAAI,CAACE,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,+BAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,SAASH,IAA3C,4BAAmD,CAAnD,CAAP;AACH;;AACD,YAAA,MAAI,CAAC/E,YAAL,GAAoBsG,GAAG,CAACX,GAAJ,CAAQzF,QAA5B;AACA,iCAAA,MAAI,CAACmB,UAAL,+BAAiBuB,IAAjB,CAAsB,MAAtB,EAA4B,MAAI,CAAC5C,YAAjC;AACA,mBAAO;AAAA;AAAA,kCAAO4F,SAAP,CAAiBU,GAAG,CAACX,GAAJ,CAAQzF,QAAzB,CAAP;AAhB8F;AAiBjG;AACD;AACJ;AACA;AACA;;;AACiBqG,QAAAA,SAAS,GAA2B;AAAA;;AAAA;AAC7C,gBAAMD,GAAG,SAAS,MAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,WAApB,EAAiC,EAAjC,CAAlB;;AAEA,gBAAI,CAACa,GAAG,CAAChB,MAAT,EAAiB,CACb;AACA;AACH;;AACD,gBAAI,MAAI,CAACtF,YAAT,EAAuB;AAAA;;AACnB,oCAAA,MAAI,CAACoB,WAAL,gCAAkBwB,IAAlB,CAAuB,MAAvB,EAA6B,MAAI,CAAC5C,YAAlC;AACH;;AACD,YAAA,MAAI,CAACA,YAAL,GAAoB,IAApB;AACA,mBAAO;AAAA;AAAA,kCAAO4F,SAAP,CAAiB,IAAjB,CAAP;AAX6C;AAYhD;AACD;AACJ;AACA;AACA;;;AACiBY,QAAAA,WAAW,GAA2B;AAAA;;AAAA;AAC/C,gBAAI,CAAC,MAAI,CAACxG,YAAV,EAAwB,OAAO;AAAA;AAAA,kCAAOuF,QAAP,CAAgB,UAAhB,CAAP;AACxB,gBAAMe,GAAG,SAAS,MAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,aAApB,EAAmC;AACjDY,cAAAA,MAAM,EAAE,MAAI,CAACrG,YAAL,CAAkBqG;AADuB,aAAnC,CAAlB;;AAGA,gBAAI,CAACC,GAAG,CAAChB,MAAT,EAAiB,CACb;AACA;AACH;;AACD,gBAAI,MAAI,CAACtF,YAAT,EAAuB;AAAA;;AACnB,oCAAA,MAAI,CAACoB,WAAL,gCAAkBwB,IAAlB,CAAuB,MAAvB,EAA6B,MAAI,CAAC5C,YAAlC;AACH;;AACD,YAAA,MAAI,CAACA,YAAL,GAAoB,IAApB;AACA,mBAAO;AAAA;AAAA,kCAAO4F,SAAP,CAAiB,IAAjB,CAAP;AAb+C;AAclD;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACiBa,QAAAA,UAAU,CAACC,UAAD,EAA2D;AAAA;;AAAA;AAC9E,gBAAMJ,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,YAApB,EAAkCiB,UAAlC,CAAlB;;AACA,gBAAI,CAACJ,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,iCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,UAASH,IAA3C,6BAAmD,CAAnD,CAAP;AACH;;AACD,YAAA,OAAI,CAAC/E,YAAL,GAAoBsG,GAAG,CAACX,GAAJ,CAAQzF,QAA5B;AACA,mBAAO;AAAA;AAAA,kCAAO0F,SAAP,CAAiBU,GAAG,CAACX,GAAJ,CAAQzF,QAAzB,CAAP;AAN8E;AAOjF;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACiByG,QAAAA,yBAAyB,CAACC,mBAAD,EAA8BC,aAA9B,EAA8E;AAAA;;AAAA;AAChH,gBAAMP,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,2BAApB,EAAiD;AAC/DmB,cAAAA,mBAD+D;AAE/DC,cAAAA;AAF+D,aAAjD,CAAlB;;AAIA,gBAAI,CAACP,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,iCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,UAASH,IAA3C,6BAAmD,CAAnD,CAAP;AACH;;AACD,gBAAI+B,gBAAJ;;AACA,gBAAID,aAAJ,EAAmB;AAAA;;AACfC,cAAAA,gBAAgB,2BAAG,OAAI,CAAC9G,YAAR,qBAAG,qBAAmBI,UAAnB,CAA8BC,IAA9B,CAAmCC,CAAC,IAAIA,CAAC,CAACR,QAAF,KAAe+G,aAAvD,CAAnB;AACH,aAFD,MAEO;AACHC,cAAAA,gBAAgB,GAAG,OAAI,CAAC3G,eAAxB;AACH;;AACD,gBAAI2G,gBAAJ,EAAsBA,gBAAgB,CAACF,mBAAjB,GAAuCA,mBAAvC;AACtB,mBAAO;AAAA;AAAA,kCAAOhB,SAAP,CAAiB,IAAjB,CAAP;AAfgH;AAgBnH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACiBmB,QAAAA,wBAAwB,CAACC,kBAAD,EAA6BH,aAA7B,EAA6E;AAAA;;AAAA;AAC9G,gBAAMP,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,0BAApB,EAAgD;AAC9DuB,cAAAA,kBAD8D;AAE9DH,cAAAA;AAF8D,aAAhD,CAAlB;;AAIA,gBAAI,CAACP,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,iCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,UAASH,IAA3C,6BAAmD,CAAnD,CAAP;AACH;;AACD,gBAAI+B,gBAAJ;;AACA,gBAAID,aAAJ,EAAmB;AAAA;;AACfC,cAAAA,gBAAgB,2BAAG,OAAI,CAAC9G,YAAR,qBAAG,qBAAmBI,UAAnB,CAA8BC,IAA9B,CAAmCC,CAAC,IAAIA,CAAC,CAACR,QAAF,KAAe+G,aAAvD,CAAnB;AACH,aAFD,MAEO;AACHC,cAAAA,gBAAgB,GAAG,OAAI,CAAC3G,eAAxB;AACH;;AACD,gBAAI2G,gBAAJ,EAAsBA,gBAAgB,CAACE,kBAAjB,GAAsCA,kBAAtC;AACtB,mBAAO;AAAA;AAAA,kCAAOpB,SAAP,CAAiB,IAAjB,CAAP;AAf8G;AAgBjH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACiBqB,QAAAA,gBAAgB,CAACC,SAAD,EAAqBL,aAArB,EAAqE;AAAA;;AAAA;AAC9F,gBAAMP,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,kBAApB,EAAwC;AACtDyB,cAAAA,SADsD;AAEtDL,cAAAA;AAFsD,aAAxC,CAAlB;;AAIA,gBAAI,CAACP,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,iCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,UAASH,IAA3C,6BAAmD,CAAnD,CAAP;AACH;;AACD,YAAA,OAAI,CAAC/E,YAAL,GAAoBsG,GAAG,CAACX,GAAJ,CAAQzF,QAA5B;AACA,mBAAO;AAAA;AAAA,kCAAO0F,SAAP,CAAiB,IAAjB,CAAP;AAT8F;AAUjG;AAGD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACiBuB,QAAAA,WAAW,CAACC,OAAD,EAAoBP,aAApB,EAAoE;AAAA;;AAAA;AACxF,gBAAMP,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,aAApB,EAAmC;AACjD2B,cAAAA,OADiD;AAEjDP,cAAAA;AAFiD,aAAnC,CAAlB;;AAIA,gBAAI,CAACP,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,iCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,UAASH,IAA3C,6BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiB,IAAjB,CAAP;AARwF;AAS3F;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACiByB,QAAAA,cAAc,GAA2B;AAAA;;AAAA;AAClD,gBAAMf,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,gBAApB,EAAsC,EAAtC,CAAlB;;AAEA,gBAAI,CAACa,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,iCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,UAASH,IAA3C,6BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiB,IAAjB,CAAP;AANkD;AAOrD;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACiB0B,QAAAA,aAAa,GAA2B;AAAA;;AAAA;AACjD,gBAAMhB,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,eAApB,EAAqC,EAArC,CAAlB;;AAEA,gBAAI,CAACa,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,iCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,UAASH,IAA3C,6BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiB,IAAjB,CAAP;AANiD;AAOpD;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACiB2B,QAAAA,cAAc,CAACC,WAAD,EAAqCX,aAArC,EAAqF;AAAA;;AAAA;AAC5G,gBAAMP,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYiC,OAAZ,CAAoB,gBAApB,EAAsC;AACpDkD,cAAAA,QAAQ,EAAED,WAD0C;AAEpDX,cAAAA;AAFoD,aAAtC,CAAlB;;AAIA,gBAAI,CAACP,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,iCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,UAASH,IAA3C,6BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiB,IAAjB,CAAP;AAR4G;AAS/G;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACiB8B,QAAAA,kBAAkB,GAAmC;AAAA;;AAAA;AAC9D,gBAAMpB,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,oBAApB,EAA0C,EAA1C,CAAlB;;AAEA,gBAAI,CAACa,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,mCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,WAASH,IAA3C,8BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiBU,GAAG,CAACX,GAArB,CAAP;AAN8D;AAOjE;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACiBgC,QAAAA,aAAa,CAACC,eAAD,EAA0BC,aAA1B,EAAqF;AAAA;;AAAA;AAC3G,gBAAMvB,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,eAApB,EAAqC;AACnDmC,cAAAA,eAAe,EAAEA,eADkC;AAEnDC,cAAAA,aAAa,EAAEA;AAFoC,aAArC,CAAlB;;AAIA,gBAAI,CAACvB,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,mCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,WAASH,IAA3C,8BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiBU,GAAG,CAACX,GAAJ,CAAQmC,MAAzB,CAAP;AAR2G;AAS9G;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACiBC,QAAAA,mBAAmB,CAACC,SAAD,EAAoBC,eAApB,EAAqE;AAAA;;AAAA;AACjG,gBAAM3B,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYiC,OAAZ,CAAoB,qBAApB,EAA2C;AACzDyD,cAAAA,SAAS,EAAEA,SAD8C;AAEzDC,cAAAA,eAAe,EAAEA;AAFwC,aAA3C,CAAlB;;AAIA,gBAAI,CAAC3B,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,mCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,WAASH,IAA3C,8BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiB,IAAjB,CAAP;AARiG;AASpG;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACiBsC,QAAAA,YAAY,CAAClE,WAAD,EAAuE;AAAA;;AAAA;AAC5F,gBAAMsC,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,cAApB,EAAoC;AAClDzB,cAAAA,WAAW,EAAEA;AADqC,aAApC,CAAlB;;AAGA,gBAAI,CAACsC,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,mCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,WAASH,IAA3C,8BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiBU,GAAG,CAACX,GAAJ,CAAQ7B,UAAzB,CAAP;AAP4F;AAQ/F;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACiBqE,QAAAA,WAAW,GAA2B;AAAA;;AAAA;AAC/C,gBAAM7B,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,aAApB,EAAmC,EAAnC,CAAlB;;AAEA,gBAAI,CAACa,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,mCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,WAASH,IAA3C,8BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiB,IAAjB,CAAP;AAN+C;AAOlD;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACiBwC,QAAAA,UAAU,GAAmC;AAAA;;AAAA;AACtD,gBAAM9B,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,YAApB,EAAkC,EAAlC,EACf;AACC3E,cAAAA,OAAO,EAAE;AADV,aADe,CAAlB;;AAIA,gBAAI,CAACwF,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,mCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,WAASH,IAA3C,8BAAmD,CAAnD,CAAP;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOa,SAAP,CAAiBU,GAAG,CAACX,GAAJ,CAAQxB,WAAzB,CAAP;AARsD;AASzD;AAID;AACJ;AACA;AACA;AACA;AACA;;;AACiBkE,QAAAA,eAAe,CAACC,QAAD,EAA4BnC,MAA5B,EAA4E;AAAA;;AAAA;AACpG,gBAAMG,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,iBAApB,EAAuC;AACrD6C,cAAAA,QADqD;AAErDnC,cAAAA;AAFqD,aAAvC,CAAlB;;AAIA,gBAAI,CAACG,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,mCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,WAASH,IAA3C,8BAAmD,CAAnD,CAAP;AACH;;AACD,gBAAI,OAAI,CAAC5E,eAAT,EAA0B;AAAA;;AACtB,cAAA,OAAI,CAACA,eAAL,CAAqBoI,YAArB,GAAoCC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQ,CACnD,6BAAG,OAAI,CAACvI,eAAL,CAAqBoI,YAAxB,oCAAwC,EAAxC,CADmD,EAEnDjC,GAAG,CAACX,GAAJ,CAAQgD,SAAR,CAAkB7I,QAFiC,CAAR,CAAX,CAApC;AAIH;;AACD,mBAAO;AAAA;AAAA,kCAAO8F,SAAP,CAAiBU,GAAG,CAACX,GAAJ,CAAQgD,SAAzB,CAAP;AAdoG;AAevG;AAED;AACJ;AACA;AACA;AACA;;;AACiBC,QAAAA,cAAc,CAAC/B,aAAD,EAAuD;AAAA;;AAAA;AAC9E,gBAAMP,GAAG,SAAS,OAAI,CAAChE,MAAL,CAAYmD,OAAZ,CAAoB,gBAApB,EAAsC;AACpDoB,cAAAA;AADoD,aAAtC,CAAlB;;AAGA,gBAAI,CAACP,GAAG,CAAChB,MAAT,EAAiB;AAAA;;AACb,qBAAO;AAAA;AAAA,oCAAOC,QAAP,CAAgBe,GAAG,CAACpB,GAAJ,CAAQQ,OAAxB,mCAAkCY,GAAG,CAACpB,GAAtC,qBAAkC,WAASH,IAA3C,8BAAmD,CAAnD,CAAP;AACH;;AACD,gBAAI,OAAI,CAAC5E,eAAT,EAA0B;AAAA;;AACtB,kBAAI0I,MAAM,GAAG,IAAIH,GAAJ,CAAQ,CACjB,6BAAG,OAAI,CAACvI,eAAL,CAAqBoI,YAAxB,oCAAwC,EAAxC,CADiB,CAAR,CAAb;AAGAM,cAAAA,MAAM,CAACC,MAAP,CAAcxC,GAAG,CAACX,GAAJ,CAAQgD,SAAR,CAAkB7I,QAAhC;AACA,cAAA,OAAI,CAACK,eAAL,CAAqBoI,YAArB,GAAoCC,KAAK,CAACC,IAAN,CAAWI,MAAX,CAApC;AACH;;AACD,mBAAO;AAAA;AAAA,kCAAOjD,SAAP,CAAiBU,GAAG,CAACX,GAAJ,CAAQgD,SAAzB,CAAP;AAd8E;AAejF;;AArtBqD,O","sourcesContent":["\n\nimport { BaseWsClient, BaseWsClientOptions } from \"tsrpc-base-client\";\nimport { ServiceProto } from \"tsrpc-proto\";\n\nimport { serviceProto as gameServiceProto, ServiceType } from \"./protocols/serviceProto\";\nimport { AWsClient } from \"../tsgf/AClient\";\nimport { logger } from \"../tsgf/logger\";\nimport { ErrorCodes, IResult, Result } from \"../tsgf/Result\";\nimport { IChangeCustomPlayerProfile, IChangeCustomPlayerStatus, IChangePlayerTeam, IPlayerInfoPara, IPlayerInfo } from \"../tsgf/player/IPlayerInfo\";\nimport { ReqAuthorize } from \"./protocols/PtlAuthorize\";\nimport { IChangeRoomPara, IJoinRoomPara, IRoomInfo } from \"../tsgf/room/IRoomInfo\";\nimport { IRecvRoomMsg, IRoomMsg } from \"../tsgf/room/IRoomMsg\";\nimport { IAfterFrames, IGameSyncFrame, IPlayerInputOperate } from \"../tsgf/room/IGameFrame\";\nimport { IMatchParamsFromRoomAllPlayer, IMatchResult, IMatchPlayerResultWithServer } from \"../tsgf/match/Models\";\n\n/**游戏服务器的通讯类型定义*/\nexport type gameServiceType = ServiceType;\n\n/**\n * 基础的游戏服务器api的客户端封装\n */\nexport class GameClient extends AWsClient<gameServiceType>{\n\n    protected _playerToken: string;\n    public get playerToken(): string {\n        return this._playerToken;\n    }\n    protected _playerId: string;\n    public get playerId(): string {\n        return this._playerId;\n    }\n\n    protected _currRoomInfo: IRoomInfo | null = null;\n    /**当前所在的房间, 各种操作会自动维护本属性值为最新*/\n    public get currRoomInfo(): IRoomInfo | null {\n        return this._currRoomInfo;\n    }\n    protected set currRoomInfo(roomInfo: IRoomInfo | null) {\n        this._currRoomInfo = roomInfo;\n        this._currPlayerInfo = this._currRoomInfo?.playerList.find(p => p.playerId === this._playerId) ?? null;\n    }\n\n    protected _currPlayerInfo: IPlayerInfo | null = null;\n    /**当前玩家信息对象*/\n    public get currPlayerInfo(): IPlayerInfo | null {\n        return this._currPlayerInfo;\n    }\n\n    /**是否启用断线重连*/\n    public enabledReconnect: boolean = true;\n    /**\n     * 断线重连等待秒数\n     */\n    public reconnectWaitSec = 2;\n    protected reconnectTimerHD: any;\n\n    /**可设置房间中断线后等待重连的毫秒数(认证和重连时使用),默认为60000ms(60秒),设成0表示断线后直接清理(按退出房间处理)不等待重连*/\n    public roomWaitReconnectTime?: number;\n\n    /**\n     * [需启用断线重连:enabledReconnect]每次开始断线重连时触发, [reconnectWaitSec]秒后开始重连\n     * @param currTryCount 已经重试了几次了, 首次断线重连则为0\n     */\n    public onReconnectStart?: (currTryCount: number) => void;\n    /**\n     * 彻底断开触发, 如下情况:\n     * 1. 断开连接时没启用断线重连则触发\n     * 2. 主动断开时触发, reason='ManualDisconnect'\n     * 3. 断线重连失败并不再重连时触发, reason='ReconnectFailed'\n     * 4. 认证失败时会断开连接, 同时触发, reason='AuthorizeFailed'\n     * @param reason 断开原因\n     */\n    public onDisconnected?: (reason?: string) => void;\n    /**当前玩家不管什么原因离开了房间都会触发(主动离开,主动解散,房间被解散等等)*/\n    public onLeaveRoom?: (roomInfo: IRoomInfo) => void;\n    /**当前玩家加入到房间后触发*/\n    public onJoinRoom?: (roomInfo: IRoomInfo) => void;\n    /**断线重连最终有结果时触发(终于连上了,或者返回不继续尝试了)*/\n    public onReconnectResult?: (succ: boolean, err: string | null) => void;\n    /**当接收到房间消息时触发*/\n    public onRecvRoomMsg?: (roomMsg: IRecvRoomMsg) => void;\n    /**【在房间中才能收到】玩家加入当前房间（自己操作的不触发）*/\n    public onPlayerJoinRoom?: (player: IPlayerInfo, roomInfo: IRoomInfo) => void;\n    /**【在房间中才能收到】玩家退出当前房间（自己操作的不触发）*/\n    public onPlayerLeaveRoom?: (player: IPlayerInfo, roomInfo: IRoomInfo) => void;\n    /**【在房间中才能收到】当前房间被解散（自己操作的不触发）*/\n    public onDismissRoom?: (roomInfo: IRoomInfo) => void;\n    /**【在房间中才能收到】房间中开始帧同步了*/\n    public onStartFrameSync?: (roomInfo: IRoomInfo, startPlayer: IPlayerInfo) => void;\n    /**【在房间中才能收到】房间中停止帧同步了*/\n    public onStopFrameSync?: (roomInfo: IRoomInfo, stopPlayer: IPlayerInfo) => void;\n    /**【在房间中才能收到】房间中收到一个同步帧*/\n    public onRecvFrame?: (syncFrame: IGameSyncFrame, dt: number) => void;\n    /**【在房间中才能收到】服务端要求玩家上传状态同步数据 (调用 playerSendSyncState 方法)*/\n    public onRequirePlayerSyncState?: () => void;\n    /**【在房间中才能收到】玩家加入当前房间（自己操作的不触发）*/\n    public onChangePlayerNetworkState?: (player: IPlayerInfo) => void;\n    /**【在房间中才能收到】有玩家修改了自定义属性(只要在房间,自己也会收到)*/\n    public onChangeCustomPlayerProfile?: (changeInfo: IChangeCustomPlayerProfile) => void;\n    /**【在房间中才能收到】有玩家修改了自定义状态(只要在房间,自己也会收到)*/\n    public onChangeCustomPlayerStatus?: (changeInfo: IChangeCustomPlayerStatus) => void;\n    /**【在房间中才能收到】有玩家修改了自定义属性(只要在房间,自己也会收到)*/\n    public onChangeRoom?: (roomInfo: IRoomInfo) => void;\n    /**【在房间中才能收到】有玩家修改了所在队伍(只要在房间,自己也会收到)*/\n    public onChangePlayerTeam?: (changeInfo: IChangePlayerTeam) => void;\n    /**【在房间中才能收到】有玩家发起了全房间玩家匹配(自己也会收到)*/\n    public onRoomAllPlayersMatchStart?: (matchReqId: string, req_playerId: string, matchParams: IMatchParamsFromRoomAllPlayer) => void;\n    /**【在房间中才能收到】全房间玩家匹配有结果了(自己也会收到) */\n    public onRoomAllPlayersMatchResult?: (errMsg?: string, errCode?: ErrorCodes, matchResult?: IMatchPlayerResultWithServer) => void;\n\n    /**\n     *\n     * @param _playerToken 服务端调用大厅授权接口，获得玩家授权令牌\n     * @param reqTimeout 请求超时毫秒数\n     * @param roomWaitReconnectTime 可设置房间中断线后等待重连的毫秒数(认证和重连时使用),默认为60000ms(60秒),设成0表示断线后直接清理(按退出房间处理)不等待重连\n     * @param serverUrl\n     */\n    constructor(serverUrl: string, _playerToken: string, reqTimeout?: number, roomWaitReconnectTime?: number) {\n        super(gameServiceProto, {\n            server: serverUrl,\n            json: false,\n            logger: logger,\n            timeout: reqTimeout,\n        });\n        this._playerToken = _playerToken;\n        this._playerId = \"\";\n        this.roomWaitReconnectTime = roomWaitReconnectTime;\n        //设置断线重连的中间件\n        this.client.flows.postDisconnectFlow.push(async v => {\n            //如果都没连上过就断开,那么忽略\n            if (!this._playerId) return v;\n\n            //判断是否需要重连\n            if (!v.isManual) {\n                if (this.enabledReconnect) {\n                    //启用断线重连\n                    this.onReconnectStart?.call(this, 0);\n                    if (this.reconnectTimerHD) clearTimeout(this.reconnectTimerHD);\n                    this.reconnectTimerHD = setTimeout(async () => this.startReconnect(0, true), this.reconnectWaitSec * 1000);\n                    return v;\n                }\n\n                //被断开,并且没启用断线重连\n                if (this.currRoomInfo) {\n                    //如果被断开时,有在房间中,则先触发离开房间\n                    this.onLeaveRoom?.call(this, this.currRoomInfo);\n                }\n                this.onDisconnected?.call(this, v.reason);\n            } else {\n                //主动断开\n                this.onDisconnected?.call(this, v.reason ?? 'ManualDisconnect');\n            }\n\n            //确认彻底断开了,清理数据\n            this.clearData();\n            return v;\n        });\n        this.client.listenMsg(\"NotifyRoomMsg\", (msg) => {\n            this.onRecvRoomMsg?.call(this, msg.recvRoomMsg);\n        });\n        this.client.listenMsg(\"NotifyJoinRoom\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            let joinPlayer = this.currRoomInfo.playerList.find(p => p.playerId === msg.joinPlayerId)!;\n            this.onPlayerJoinRoom?.call(this, joinPlayer, this.currRoomInfo);\n        });\n        this.client.listenMsg(\"NotifyLeaveRoom\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            this.onPlayerLeaveRoom?.call(this, msg.leavePlayerInfo, this.currRoomInfo);\n        });\n        this.client.listenMsg(\"NotifyDismissRoom\", (msg) => {\n            if (this.currRoomInfo) {\n                this.onLeaveRoom?.call(this, this.currRoomInfo);\n            }\n            this.currRoomInfo = null;\n            this.onDismissRoom?.call(this, msg.roomInfo);\n        });\n        this.client.listenMsg(\"NotifyStartFrameSync\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            this.onStartFrameSync?.call(this, this.currRoomInfo,\n                this.currRoomInfo.playerList.find(p => p.playerId === msg.startPlayerId)!);\n        });\n        this.client.listenMsg(\"NotifyStopFrameSync\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            this.onStopFrameSync?.call(this, this.currRoomInfo,\n                this.currRoomInfo.playerList.find(p => p.playerId === msg.stopPlayerId)!);\n        });\n        this.client.listenMsg(\"NotifySyncFrame\", (msg) => {\n            this.onRecvFrame?.call(this, msg.syncFrame, msg.dt);\n        });\n        this.client.listenMsg(\"RequirePlayerSyncState\", (msg) => {\n            this.onRequirePlayerSyncState?.call(this);\n        });\n        this.client.listenMsg(\"NotifyChangeRoom\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            this.onChangeRoom?.call(this, this.currRoomInfo);\n        });\n        this.client.listenMsg(\"NotifyChangePlayerNetworkState\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            let player = this.currRoomInfo.playerList.find(p => p.playerId === msg.changePlayerId)!;\n            this.onChangePlayerNetworkState?.call(this, player);\n        });\n        this.client.listenMsg(\"NotifyChangeCustomPlayerProfile\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            this.onChangeCustomPlayerProfile?.call(this, msg);\n        });\n        this.client.listenMsg(\"NotifyChangeCustomPlayerStatus\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            this.onChangeCustomPlayerStatus?.call(this, msg);\n        });\n        this.client.listenMsg(\"NotifyChangePlayerTeam\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            this.onChangePlayerTeam?.call(this, msg);\n        });\n        this.client.listenMsg(\"NotifyRoomAllPlayersMatchStart\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            this.onRoomAllPlayersMatchStart?.call(this, msg.matchReqId, msg.reqPlayerId, msg.matchParams);\n        });\n        this.client.listenMsg(\"NotifyRoomAllPlayersMatchResult\", (msg) => {\n            this.currRoomInfo = msg.roomInfo;\n\n            this.onRoomAllPlayersMatchResult?.call(this, msg.errMsg, msg.errCode, msg.matchResult);\n        });\n    }\n    /**\n     * Disconnects game client\n     * @param reason websocket的关闭原因字符串,可自定义\n     * @param code websocket的关闭原因代码, 取值范围: [1000,3000-4999]\n     * @returns disconnect \n     */\n    public async disconnect(reason: string = 'ManualDisconnect'): Promise<void> {\n        this.stopReconnect();\n        if (this._playerId || this.client.isConnected) {\n            if (this.currRoomInfo) {\n                //如果断开时,有在房间中,则先触发离开房间事件\n                this.onLeaveRoom?.call(this, this.currRoomInfo);\n            }\n            this.clearData();\n            await this.client.sendMsg(\"Disconnect\", {});\n            await this.client.disconnect(1000, reason);\n        }\n    }\n    protected async clearData(): Promise<void> {\n        this._playerId = '';\n        this._playerToken = '';\n        this._currRoomInfo = null;\n        this._currPlayerInfo = null;\n        this.onReconnectStart = undefined;\n        this.onDisconnected = undefined;\n        this.onReconnectResult = undefined;\n        this.onLeaveRoom = undefined;\n        this.onRecvRoomMsg = undefined;\n        this.onPlayerJoinRoom = undefined;\n        this.onPlayerLeaveRoom = undefined;\n        this.onDismissRoom = undefined;\n        this.onStartFrameSync = undefined;\n        this.onStopFrameSync = undefined;\n        this.onRecvFrame = undefined;\n        this.onRequirePlayerSyncState = undefined;\n        this.onChangePlayerNetworkState = undefined;\n        this.onChangeCustomPlayerProfile = undefined;\n        this.onChangeCustomPlayerStatus = undefined;\n        this.onChangeRoom = undefined;\n        this.onChangePlayerTeam = undefined;\n        this.onRoomAllPlayersMatchStart = undefined;\n        this.onRoomAllPlayersMatchResult = undefined;\n    }\n\n\n    protected stopReconnect(): void {\n        if (this.reconnectTimerHD) {\n            clearTimeout(this.reconnectTimerHD);\n            this.reconnectTimerHD = null;\n        }\n    }\n    /**\n     * Starts reconnect\n     * @param currTryCount 当前重试次数\n     * @param failReTry 本次失败后是否继续重试\n     * @returns reconnect \n     */\n    protected async startReconnect(currTryCount: number = 0, failReTry = true): Promise<boolean> {\n        const result = await this.reconnect();\n        if (!this._playerToken) {\n            //重连异步回来,发现已经取消\n            return false;\n        }\n        // 重连也错误，弹出错误提示\n        if (result.succ) {\n            this.client.logger?.log('重连成功!');\n            this.onReconnectResult?.call(this, true, null);\n            return true;\n        }\n        //如果是逻辑拒绝则不需要重连\n        if (!this._playerToken || result.code == ErrorCodes.AuthReconnectionFail) failReTry = false;\n\n        if (failReTry && this.enabledReconnect) {\n            currTryCount++;\n            this.onReconnectStart?.call(this, currTryCount);\n            this.client.logger?.error('重连失败:' + result.err + ' ' + this.reconnectWaitSec + '秒后自动重连!');\n            if (this.reconnectTimerHD) clearTimeout(this.reconnectTimerHD);\n            this.reconnectTimerHD = setTimeout(() => this.startReconnect(currTryCount, failReTry), this.reconnectWaitSec * 1000);\n        } else {\n            this.client.logger?.error('重连失败:' + result.err);\n            let tmpOnRecRet = this.onReconnectResult;//因为disconnect会清理数据，所以这里临时记录一下，用于接着触发\n            await this.disconnect('ReconnectFailed');\n            tmpOnRecRet?.call(this, false, result.err);\n        }\n        return false;\n    }\n    /**\n     * 断线重连, 失败的话要看code, ErrorCodes.AuthReconnectionFail 表示逻辑拒绝,不需要重连\n     * @returns  \n     */\n    public async reconnect(): Promise<IResult<null>> {\n        const connectRet = await this.client.connect();\n        if (!connectRet.isSucc) {\n            return Result.buildErr(\"连接失败:\" + connectRet.errMsg);\n        }\n        if (!this._playerToken) {\n            //重连异步回来,发现已经取消\n            return Result.buildErr('取消', 1);\n        }\n        const loginRet = await this.client.callApi(\"Reconnect\", {\n            playerToken: this._playerToken,\n            roomWaitReconnectTime: this.roomWaitReconnectTime,\n        });\n        if (!this._playerToken) {\n            //重连异步回来,发现已经取消\n            await this.client.disconnect();\n            return Result.buildErr('取消', 1);\n        }\n        if (!loginRet.isSucc) {\n            // 连上了, 但重连认证失败, 直接断开\n            await this.client.disconnect();\n            return Result.buildErr(loginRet.err.message, (loginRet.err?.code ?? 1) as number);\n        }\n        this._playerId = loginRet.res.playerId;\n        this.currRoomInfo = loginRet.res.currRoomInfo;\n        return Result.buildSucc(null);\n    }\n\n\n    /**\n     * 登录到游戏服务器, 失败则断开连接并清理数据\n     * @param infoPara \n     * @returns  \n     */\n    public async authorize(infoPara?: IPlayerInfoPara): Promise<IResult<null>> {\n        const connectRet = await this.client.connect();\n        if (!connectRet.isSucc) {\n            return Result.buildErr(\"连接失败:\" + connectRet.errMsg);\n        }\n        let req: ReqAuthorize = (infoPara as ReqAuthorize) ?? ({} as ReqAuthorize);\n        req.playerToken = this._playerToken;\n        req.roomWaitReconnectTime = this.roomWaitReconnectTime;\n        const loginRet = await this.client.callApi(\"Authorize\", req);\n        if (!loginRet.isSucc) {\n            let errCode = (loginRet.err?.code ?? 1) as number;\n            this.disconnect('AuthorizeFailed');\n            return Result.buildErr(loginRet.err.message, errCode);\n        }\n        this._playerId = loginRet.res.playerInfo.playerId;\n        return Result.buildSucc(null);\n    }\n\n\n    /**\n     * [兼容旧版本保留]进房间\n     * @param roomId \n     * @param teamId 同时加入指定队伍 \n     * @returns  \n     * @deprecated 本重载已弃用, 将在下个版本移除!!\n     */\n    public async joinRoom(roomId: string, teamId?: string): Promise<IResult<IRoomInfo>>;\n    /**\n     * 进房间\n     * @param joinRoomPara 加入房间参数, 根据房间的加入模式需要传入对应的数据\n     * @returns  \n     */\n    public async joinRoom(joinRoomPara: IJoinRoomPara): Promise<IResult<IRoomInfo>>;\n    /**\n     * 进房间\n     * @param roomId \n     * @param teamId 同时加入指定队伍 \n     * @returns  \n     */\n    public async joinRoom(para: IJoinRoomPara | string, teamId?: string): Promise<IResult<IRoomInfo>> {\n        let joinRoomPara: IJoinRoomPara;\n        if (typeof (para) === 'string') {\n            joinRoomPara = {\n                roomId: para,\n                teamId,\n            };\n        } else {\n            joinRoomPara = para;\n        }\n        const ret = await this.client.callApi(\"JoinRoom\", joinRoomPara);\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        this.currRoomInfo = ret.res.roomInfo;\n        this.onJoinRoom?.call(this, this.currRoomInfo);\n        return Result.buildSucc(ret.res.roomInfo);\n    }\n    /**\n     * 退出当前房间\n     * @returns  \n     */\n    public async leaveRoom(): Promise<IResult<null>> {\n        const ret = await this.client.callApi(\"LeaveRoom\", {\n        });\n        if (!ret.isSucc) {\n            //离开房间失败? 没事, 本地当作成功\n            //return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        if (this.currRoomInfo) {\n            this.onLeaveRoom?.call(this, this.currRoomInfo);\n        }\n        this.currRoomInfo = null;\n        return Result.buildSucc(null);\n    }\n    /**\n     * 【仅房主】解散当前房间\n     * @returns  \n     */\n    public async dismissRoom(): Promise<IResult<null>> {\n        if (!this.currRoomInfo) return Result.buildErr('当前不在房间中！');\n        const ret = await this.client.callApi(\"DismissRoom\", {\n            roomId: this.currRoomInfo.roomId\n        });\n        if (!ret.isSucc) {\n            //解散失败? 本地当作成功!\n            //return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        if (this.currRoomInfo) {\n            this.onLeaveRoom?.call(this, this.currRoomInfo);\n        }\n        this.currRoomInfo = null;\n        return Result.buildSucc(null);\n    }\n\n    /**\n     * 修改房间信息(注意,只能房主操作),同时同步更新本地当前房间信息\n     *\n     * @param changePara\n     * @returns\n     */\n    public async changeRoom(changePara: IChangeRoomPara): Promise<IResult<IRoomInfo>> {\n        const ret = await this.client.callApi(\"ChangeRoom\", changePara);\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        this.currRoomInfo = ret.res.roomInfo;\n        return Result.buildSucc(ret.res.roomInfo);\n    }\n    /**\n     * 修改自己的玩家自定义属性,如果当前在房间中会同时会触发通知(房间中所有玩家)\n     *\n     * @param customPlayerProfile\n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns\n     */\n    public async changeCustomPlayerProfile(customPlayerProfile: string, robotPlayerId?: string): Promise<IResult<null>> {\n        const ret = await this.client.callApi(\"ChangeCustomPlayerProfile\", {\n            customPlayerProfile,\n            robotPlayerId,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        let changePlayerInfo: IPlayerInfo | undefined | null;\n        if (robotPlayerId) {\n            changePlayerInfo = this.currRoomInfo?.playerList.find(p => p.playerId === robotPlayerId);\n        } else {\n            changePlayerInfo = this._currPlayerInfo;\n        }\n        if (changePlayerInfo) changePlayerInfo.customPlayerProfile = customPlayerProfile;\n        return Result.buildSucc(null);\n    }\n    /**\n     * 修改自己的玩家自定义状态,如果当前在房间中会同时会触发通知(房间中所有玩家)\n     *\n     * @param customPlayerStatus\n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns\n     */\n    public async changeCustomPlayerStatus(customPlayerStatus: number, robotPlayerId?: string): Promise<IResult<null>> {\n        const ret = await this.client.callApi(\"ChangeCustomPlayerStatus\", {\n            customPlayerStatus,\n            robotPlayerId,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        let changePlayerInfo: IPlayerInfo | undefined | null;\n        if (robotPlayerId) {\n            changePlayerInfo = this.currRoomInfo?.playerList.find(p => p.playerId === robotPlayerId);\n        } else {\n            changePlayerInfo = this._currPlayerInfo;\n        }\n        if (changePlayerInfo) changePlayerInfo.customPlayerStatus = customPlayerStatus;\n        return Result.buildSucc(null);\n    }\n\n    /**\n     *变更自己所在队伍\n     *\n     * @param newTeamId 传undefined表示改为无队伍; 如果有指定队伍, 但房间不存在该队伍id, 则需要房间开启自由队伍选项\n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns \n     */\n    public async changePlayerTeam(newTeamId?: string, robotPlayerId?: string): Promise<IResult<null>> {\n        const ret = await this.client.callApi(\"ChangePlayerTeam\", {\n            newTeamId,\n            robotPlayerId,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        this.currRoomInfo = ret.res.roomInfo;\n        return Result.buildSucc(null);\n    }\n\n\n    /**\n     * 发送房间消息（自定义消息），可以指定房间里的全部玩家或部分玩家或其他玩家\n     *\n     * @public\n     * @param roomMsg \n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns\n     */\n    public async sendRoomMsg(roomMsg: IRoomMsg, robotPlayerId?: string): Promise<IResult<null>> {\n        const ret = await this.client.callApi(\"SendRoomMsg\", {\n            roomMsg,\n            robotPlayerId,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(null);\n    }\n\n    /**\n     * 开始帧同步\n     *\n     * @public\n     * @returns\n     */\n    public async startFrameSync(): Promise<IResult<null>> {\n        const ret = await this.client.callApi(\"StartFrameSync\", {\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(null);\n    }\n    /**\n     * 停止帧同步\n     *\n     * @public\n     * @returns\n     */\n    public async stopFrameSync(): Promise<IResult<null>> {\n        const ret = await this.client.callApi(\"StopFrameSync\", {\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(null);\n    }\n\n    /**\n     * 发送玩家输入帧(加入到下一帧的操作列表)\n     *\n     * @public\n     * @param inpOperates \n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns\n     */\n    public async playerInpFrame(inpOperates: IPlayerInputOperate[], robotPlayerId?: string): Promise<IResult<null>> {\n        const ret = await this.client.sendMsg(\"PlayerInpFrame\", {\n            operates: inpOperates,\n            robotPlayerId\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(null);\n    }\n    /**\n     * 请求追帧数据(当前的所有帧数据[+同步状态数据])\n     *\n     * @public\n     * @returns\n     */\n    public async requestAfterFrames(): Promise<IResult<IAfterFrames>> {\n        const ret = await this.client.callApi(\"RequestAfterFrames\", {\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res);\n    }\n    /**\n     * 自主请求帧数组\n     *\n     * @public\n     * @param beginFrameIndex 起始帧索引(包含)\n     * @param endFrameIndex 结束帧索引(包含)\n     * @returns\n     */\n    public async requestFrames(beginFrameIndex: number, endFrameIndex: number): Promise<IResult<IGameSyncFrame[]>> {\n        const ret = await this.client.callApi(\"RequestFrames\", {\n            beginFrameIndex: beginFrameIndex,\n            endFrameIndex: endFrameIndex,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.frames);\n    }\n\n    /**\n     * 玩家发送本地的同步状态数据(有启用状态同步的时候才可以用)\n     *\n     * @public\n     * @param stateData\n     * @param stateFrameIndex\n     * @returns\n     */\n    public async playerSendSyncState(stateData: object, stateFrameIndex: number): Promise<IResult<null>> {\n        const ret = await this.client.sendMsg(\"PlayerSendSyncState\", {\n            stateData: stateData,\n            stateFrameIndex: stateFrameIndex,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(null);\n    }\n\n    /**\n     * 发起房间所有玩家匹配请求\n     * 请求成功即返回,同时房间中的所有玩家会收到通知\n     * 匹配有结果了还会收到消息通知, 并且可由一个玩家调用QueryMatch等待完整匹配结果\n     *\n     * @param matchParams\n     * @returns 匹配请求id\n     */\n    public async requestMatch(matchParams: IMatchParamsFromRoomAllPlayer): Promise<IResult<string>> {\n        const ret = await this.client.callApi(\"RequestMatch\", {\n            matchParams: matchParams\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.matchReqId);\n    }\n    /**\n     * 取消匹配请求\n     * 可能发生并发,导致虽然请求成功了,但还是收到了成功结果的通知\n     *\n     * @returns 匹配请求id\n     */\n    public async cancelMatch(): Promise<IResult<null>> {\n        const ret = await this.client.callApi(\"CancelMatch\", {\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(null);\n    }\n    /**\n     * 查询完整匹配结果\n     * 会等到有结果了才返回!\n     * 注意: 同时只能只有一个玩家进行查询等待,一般使用通知来获取结果即可\n     *\n     * @returns\n     */\n    public async queryMatch(): Promise<IResult<IMatchResult>> {\n        const ret = await this.client.callApi(\"QueryMatch\", {\n        }, {\n            timeout: 0\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.matchResult);\n    }\n\n\n\n    /**\n     * 玩家创建房间机器人(退出房间会同步退出)\n     * @param createPa \n     * @param [teamId] \n     * @returns 创建的机器人信息\n     */\n    public async createRoomRobot(createPa: IPlayerInfoPara, teamId?: string): Promise<IResult<IPlayerInfo>> {\n        const ret = await this.client.callApi(\"CreateRoomRobot\", {\n            createPa,\n            teamId,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        if (this._currPlayerInfo) {\n            this._currPlayerInfo.roomRobotIds = Array.from(new Set([\n                ...this._currPlayerInfo.roomRobotIds ?? [],\n                ret.res.robotInfo.playerId\n            ]));\n        }\n        return Result.buildSucc(ret.res.robotInfo);\n    }\n\n    /**\n     * 玩家的指定房间机器人退出房间(即销毁)\n     * @param robotPlayerId \n     * @returns 销毁的机器人信息\n     */\n    public async roomRobotLeave(robotPlayerId: string): Promise<IResult<IPlayerInfo>> {\n        const ret = await this.client.callApi(\"RoomRobotLeave\", {\n            robotPlayerId,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        if (this._currPlayerInfo) {\n            let tmpIds = new Set([\n                ...this._currPlayerInfo.roomRobotIds ?? [],\n            ]);\n            tmpIds.delete(ret.res.robotInfo.playerId);\n            this._currPlayerInfo.roomRobotIds = Array.from(tmpIds);\n        }\n        return Result.buildSucc(ret.res.robotInfo);\n    }\n\n}"]}