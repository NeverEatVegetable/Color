{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/server.ts"],"names":["startHallServer","hallServerCfg","hallServer","log","port","start","stopHallServer","stop","startGameServerClusterMgr","gameServerCluster","gameServerClusterMgr","nodeList","terminalList","json","logger","reuseClient","stopGameServerClusterMgr","startMatchServerClusterMgr","matchServerCluster","matchServerClusterMgr","stopMatchServerClusterMgr","startGameServer","serverCfg","gameServer","stopGameServer","startMatchServer","matchServer","clusterNodeId","serverName","stopMatchServer","startDemoServer","demoServer","flows","preRecvDataFlow","push","v","conn","httpRes","setHeader","autoImplementApi","path","resolve","__dirname","stopDemoServer","startServers","rs","runServer","includes","GameServerCluster","MatchServerCluster","GameServer","MatchServer","HallServer","DemoServer","stopServers","getServerConfig","getServerRedisClient","GameServerClusterMgr","MatchServerClusterMgr","HttpServer","demoServiceProto","serviceProto","RunServerKey"],"mappings":"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","sourcesContent":["\nimport * as path from \"path\";\n/*\n当前加载了哪些服务，由本文件决定\n*/\nimport { getServerConfig, getServerRedisClient } from \"./serverConfigMgr\";\nimport { logger } from \"./shared/tsgf/logger\";\nimport { IPlayer } from \"./shared/tsgfServer/auth/Models\";\n\nimport { HallServer } from \"./hallServer/HallServer\";\nimport { GameServerClusterMgr } from \"./gameServerCluster/GameServerClusterMgr\";\nimport { MatchServerClusterMgr } from \"./matchServerCluster/MatchServerClusterMgr\";\nimport { GameServer } from \"./gameServer/GameServer\";\nimport { MatchServer } from \"./matchServer/MatchServer\";\nimport { HttpConnection, HttpServer } from \"tsrpc\";\n\nimport { serviceProto as demoServiceProto, ServiceType as DemoServiceType } from \"./shared/demoClient/protocols/serviceProto\";\nimport { RunServerKey } from \"./ServerConfig\";\n\nlet hallServer: HallServer | null = null;\nlet gameServerClusterMgr: GameServerClusterMgr | null = null;\nlet matchServerClusterMgr: MatchServerClusterMgr | null = null;\nlet gameServer: GameServer | null = null;\nlet matchServer: MatchServer | null = null;\nlet demoServer: HttpServer | null = null;\n\n/**拓展字段*/\ndeclare module 'tsrpc' {\n    export interface BaseConnection {\n        /**连接ID,连接在服务端唯一标识*/\n        connectionId: string;\n        /**玩家ID, 只要通过认证都不会为空, 并且即使销毁, 这个字段值还在*/\n        playerId: string;\n        /**当前连接所属的玩家服务器对象, 只要通过认证都不会为空, 但断开连接后对象会销毁!*/\n        currPlayer: IPlayer;\n    }\n}\n\n\nasync function startHallServer() {\n    // 大厅服务器\n    let hallServerCfg = (await getServerConfig()).hallServer;\n    logger?.log(\"大厅服务器.port:\", hallServerCfg.port);\n    hallServer = new HallServer(\n        getServerRedisClient,\n        hallServerCfg,\n        async () => (await getServerConfig()).hallServer\n    );\n    await hallServer.start();\n    logger.log(\"大厅服务启动成功!\");\n}\nasync function stopHallServer(): Promise<void> {\n    await hallServer?.stop();\n}\n\nasync function startGameServerClusterMgr() {\n\n    // 游戏服务器集群管理服务（可选，即可另外独立部署、启动）\n    logger?.log(\"gameClusterServer.port:\", (await getServerConfig()).gameServerCluster.port);\n    gameServerClusterMgr = new GameServerClusterMgr(\n        async () => {\n            //每次都从配置中读取\n            return (await getServerConfig()).gameServerCluster.nodeList;\n        },\n        async () => {\n            //每次都从配置中读取\n            return (await getServerConfig()).gameServerCluster.terminalList;\n        },\n        {\n            port: (await getServerConfig()).gameServerCluster.port,\n            json: false,\n            logger: logger,\n        },\n        async (reuseClient: boolean = true) => await getServerRedisClient(reuseClient)\n    );\n    await gameServerClusterMgr.start();\n    logger.log(\"游戏集群管理服务启动成功!\");\n}\nasync function stopGameServerClusterMgr(): Promise<void> {\n    await gameServerClusterMgr?.stop();\n}\n\nasync function startMatchServerClusterMgr() {\n    // 匹配服务器集群管理服务（可选，即可另外独立部署、启动）\n    logger?.log(\"matchClusterServer.port:\", (await getServerConfig()).matchServerCluster.port);\n    matchServerClusterMgr = new MatchServerClusterMgr(\n        async () => {\n            //每次都从配置中读取\n            return (await getServerConfig()).matchServerCluster.nodeList;\n        },\n        async () => {\n            //每次都从配置中读取\n            return (await getServerConfig()).matchServerCluster.terminalList;\n        },\n        {\n            port: (await getServerConfig()).matchServerCluster.port,\n            json: false,\n            logger: logger,\n        },\n        async (reuseClient: boolean = true) => await getServerRedisClient(reuseClient)\n    );\n    await matchServerClusterMgr.start();\n    logger.log(\"匹配集群管理服务启动成功!\");\n}\nasync function stopMatchServerClusterMgr(): Promise<void> {\n    await matchServerClusterMgr?.stop();\n}\n\nasync function startGameServer() {\n    let serverCfg = await getServerConfig();\n    logger?.log(\"gameServer: port:\", serverCfg.gameServer.port);\n    gameServer = new GameServer(getServerRedisClient, serverCfg.gameServer, async () => (await getServerConfig()).gameServer);\n    await gameServer.start();\n    logger.log(\"游戏服务启动成功!\");\n}\nasync function stopGameServer(): Promise<void> {\n    await gameServer?.stop();\n}\n\nasync function startMatchServer() {\n    let serverCfg = await getServerConfig();\n    logger?.log(\"matchServer:\", serverCfg.matchServer.clusterNodeId, serverCfg.matchServer.serverName);\n    matchServer = new MatchServer(\n        getServerRedisClient,\n        serverCfg.matchServer,\n    );\n    await matchServer.start();\n    logger.log(\"匹配处理服务启动成功!\");\n}\nasync function stopMatchServer(): Promise<void> {\n    await matchServer?.stop();\n}\n\nasync function startDemoServer() {\n    demoServer = new HttpServer<DemoServiceType>(demoServiceProto, {\n        port: (await getServerConfig()).demoServer.port,\n        json: true,\n        logger: logger,\n    });\n    demoServer.flows.preRecvDataFlow.push(v => {\n        let conn = v.conn as HttpConnection;\n        //解决HTTP请求跨域问题\n        conn.httpRes.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        return v;\n    })\n    await demoServer.autoImplementApi(path.resolve(__dirname, 'demoServer/api'));\n    await demoServer.start();\n    logger.log(\"示例应用的用户系统模拟服务启动成功!\");\n}\nasync function stopDemoServer(): Promise<void> {\n    await demoServer?.stop();\n}\n\n\n/**启动当前选用的所有服务*/\nexport async function startServers() {\n    let rs = (await getServerConfig()).runServer;\n    if (rs.includes(RunServerKey.GameServerCluster)) {\n        await startGameServerClusterMgr();\n    }\n    if (rs.includes(RunServerKey.MatchServerCluster)) {\n        await startMatchServerClusterMgr();\n    }\n    if (rs.includes(RunServerKey.GameServer)) {\n        await startGameServer();\n    }\n    if (rs.includes(RunServerKey.MatchServer)) {\n        await startMatchServer();\n    }\n    if (rs.includes(RunServerKey.HallServer)) {\n        await startHallServer();\n    }\n    if (rs.includes(RunServerKey.DemoServer)) {\n        await startDemoServer();\n    }\n};\nexport async function stopServers() {\n    let rs = (await getServerConfig()).runServer;\n    if (rs.includes(RunServerKey.DemoServer)) {\n        await stopDemoServer();\n    }\n    if (rs.includes(RunServerKey.GameServer)) {\n        await stopGameServer();\n    }\n    if (rs.includes(RunServerKey.MatchServer)) {\n        await stopMatchServer();\n    }\n    if (rs.includes(RunServerKey.HallServer)) {\n        await stopHallServer();\n    }\n    if (rs.includes(RunServerKey.GameServerCluster)) {\n        await stopGameServerClusterMgr();\n    }\n    if (rs.includes(RunServerKey.MatchServerCluster)) {\n        await stopMatchServerClusterMgr();\n    }\n};"]}