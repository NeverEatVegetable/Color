{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/auth/PlayerAuthHelper.ts"],"names":["PlayerAuthHelper","v4","ErrorCodes","Result","buildPlayerId","init","getRedisClient","buildLastPlayerTokenKey","playerId","buildPlayerKey","playerToken","authorize","appId","openId","showName","authTokenDay","buildErr","match","openIdCheckRegex","length","redisClient","redisLastPlayerTokenKey","oldPToken","getString","oldPlayerRedisKey","oldPlayer","getObject","invalid","setObject","oneDaySec","exSec","authInfo","expireDate","Date","now","redisExSec","redisPlayerKey","setString","buildSucc","verification","redisKey","player","AuthPlayerTokenNotFound","AuthPlayerTokenInvalid","AuthPlayerTokenExpire","verificationFromId","updateShowName","playerAuth","updatePlayerCurrRoomId","roomId","currRoomId"],"mappings":"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","sourcesContent":["import { v4 } from \"uuid\";\nimport { ErrorCodes, IResult, Result } from \"../../tsgf/Result\";\nimport { GetRedisClient, IRedisClient } from \"../redisHelper\";\nimport { buildGuid, buildPlayerId } from \"../ServerUtils\";\nimport { IPlayerAuthInfo } from \"./Models\";\n\n/**玩家认证工具, 使用本模块需要初始化*/\nexport class PlayerAuthHelper {\n\n    /**需要全局初始化时设置*/\n    private static getRedisClient: GetRedisClient;\n    private static openIdCheckRegex = /^[0-9a-zA-Z\\-_]+$/ig;\n    private static oneDaySec = 24 * 60 * 60;\n\n\n    public static init(getRedisClient: GetRedisClient) {\n        PlayerAuthHelper.getRedisClient = getRedisClient;\n    }\n\n    private static buildLastPlayerTokenKey(playerId: string) {\n        return `PlayerAuth:playerIdToLastToken:playerId_${playerId}`;\n    }\n    private static buildPlayerKey(playerToken: string) {\n        return `PlayerAuth:Player:token_${playerToken}`;\n    }\n\n    /**\n     * 玩家认证,成功则返回playerToken\n     *\n     * @public\n     * @param appId\n     * @param openId\n     * @param showName\n     * @param authTokenDay 授权有效天数\n     */\n    public static async authorize(appId: string, openId: string, showName: string, authTokenDay: number): Promise<IResult<IPlayerAuthInfo>> {\n        if (!appId) {\n            return Result.buildErr('错误的参数 appId');\n        }\n        if (!openId) {\n            return Result.buildErr('错误的参数 playerId');\n        }\n        if (openId.match(PlayerAuthHelper.openIdCheckRegex)?.length === 2) {\n            return Result.buildErr('参数 openId 只能由数字、字母、下划线、连接线组成');\n        }\n        if (!showName) {\n            return Result.buildErr('错误的参数 showName');\n        }\n        if (authTokenDay <= 0) {\n            return Result.buildErr('错误的参数 authTokenDay');\n        }\n\n        //正常应该走数据库，这里简单哈希一下\n        let playerId = buildPlayerId(appId, openId);\n\n        let redisClient = await PlayerAuthHelper.getRedisClient();\n        let redisLastPlayerTokenKey = PlayerAuthHelper.buildLastPlayerTokenKey(playerId);\n        let oldPToken = await redisClient.getString(redisLastPlayerTokenKey);\n        if (oldPToken) {\n            //存在之前授权的token\n            let oldPlayerRedisKey = PlayerAuthHelper.buildPlayerKey(oldPToken);\n            let oldPlayer = await redisClient.getObject<IPlayerAuthInfo>(oldPlayerRedisKey);\n            if (oldPlayer) {\n                oldPlayer.invalid = true;\n                //重新设置进去，并且设置redis一天后过期\n                await redisClient.setObject(oldPlayerRedisKey, oldPlayer, PlayerAuthHelper.oneDaySec);\n            }\n        }\n        let playerToken = v4();\n        let exSec = authTokenDay * PlayerAuthHelper.oneDaySec;\n        let authInfo: IPlayerAuthInfo = {\n            playerId: playerId,\n            appId: appId,\n            openId: openId,\n            showName: showName,\n            playerToken: playerToken,\n            invalid: false,\n            expireDate: Date.now() + exSec * 1000\n        };\n        //redis里的多放一天\n        let redisExSec = exSec + PlayerAuthHelper.oneDaySec;\n        let redisPlayerKey = PlayerAuthHelper.buildPlayerKey(playerToken);\n        await redisClient.setObject(redisPlayerKey, authInfo, redisExSec);\n        await redisClient.setString(redisLastPlayerTokenKey, playerToken, exSec + redisExSec);\n        return Result.buildSucc(authInfo);\n    }\n\n\n    /**\n     * 身份认证，成功则返回玩家对象\n     *\n     * @public\n     * @param playerToken\n     * @returns\n     */\n    public static async verification(playerToken: string): Promise<IResult<IPlayerAuthInfo>> {\n        let redisKey = PlayerAuthHelper.buildPlayerKey(playerToken);\n        let player = await (await PlayerAuthHelper.getRedisClient()).getObject<IPlayerAuthInfo>(redisKey);\n        if (!player || !player.playerToken) {\n            return Result.buildErr('token过期或不存在！', ErrorCodes.AuthPlayerTokenNotFound);\n        }\n        if (player.invalid) {\n            return Result.buildErr('token已经失效！', ErrorCodes.AuthPlayerTokenInvalid);\n        }\n        if (player.expireDate < Date.now()) {\n            return Result.buildErr('token已经过期！', ErrorCodes.AuthPlayerTokenExpire);\n        }\n        return Result.buildSucc(player);\n    }\n\n    /**\n     * 使用id+token进行身份认证，成功则返回玩家对象\n     *\n     * @public\n     * @param playerId\n     * @param playerToken\n     * @param updateShowName 可更新玩家显示名\n     * @returns\n     */\n    public static async verificationFromId(playerId: string, playerToken: string, updateShowName?: string): Promise<IResult<IPlayerAuthInfo>> {\n\n        let redisClient = await PlayerAuthHelper.getRedisClient();\n        let redisLastPlayerTokenKey = PlayerAuthHelper.buildLastPlayerTokenKey(playerId);\n        let oldPToken = await redisClient.getString(redisLastPlayerTokenKey);\n        if (oldPToken !== playerToken) {\n            return Result.buildErr('token已失效！', ErrorCodes.AuthPlayerTokenInvalid);\n        }\n\n        let redisKey = PlayerAuthHelper.buildPlayerKey(playerToken);\n        let playerAuth = await redisClient.getObject<IPlayerAuthInfo>(redisKey);\n        if (!playerAuth || !playerAuth.playerToken) {\n            return Result.buildErr('token过期或不存在！', ErrorCodes.AuthPlayerTokenNotFound);\n        }\n        if (playerAuth.invalid) {\n            return Result.buildErr('token已经失效！', ErrorCodes.AuthPlayerTokenInvalid);\n        }\n        if (playerAuth.expireDate < Date.now()) {\n            return Result.buildErr('token已经过期！', ErrorCodes.AuthPlayerTokenExpire);\n        }\n\n        if (updateShowName) {\n            //有更新玩家信息，则更新进redis\n            playerAuth.showName = updateShowName;\n            await redisClient.setObject(redisKey, playerAuth, playerAuth.expireDate - Date.now());\n        }\n\n        return Result.buildSucc(playerAuth);\n    }\n\n    /**\n     * 更新玩家的当前所在房间id\n     * @param playerToken \n     * @param [roomId] \n     * @returns  \n     */\n    public static async updatePlayerCurrRoomId(playerToken: string, roomId?: string) {\n        let redisClient = await PlayerAuthHelper.getRedisClient();\n        let redisKey = PlayerAuthHelper.buildPlayerKey(playerToken);\n        let playerAuth = await redisClient.getObject<IPlayerAuthInfo>(redisKey);\n        if (!playerAuth) return;\n        playerAuth.currRoomId = roomId;\n        await redisClient.setObject(redisKey, playerAuth, playerAuth.expireDate - Date.now());\n    }\n\n}"]}