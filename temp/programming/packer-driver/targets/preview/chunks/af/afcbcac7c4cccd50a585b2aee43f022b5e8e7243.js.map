{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/match/MatchRequestHelper.ts"],"names":["MatchRequestHelper","RedisQueue","EMatchProcType","constructor","getRedisClient","subscribeClient","matchRequestQueue","buildMatchRequestModelRedisKey","appId","reqId","buildMatchRequestLockRedisKey","buildMatchRequestResultRedisKey","buildMatchProcQueueRedisKey","listenMatchProc","listen","queueKey","stopListenMatchProc","stopListen","pushRequestMatchProc","req","modelKey","matchReqId","lockKey","redisTimeoutSec","matchTimeoutSec","client","setObject","setString","matchProc","procType","RequestMatch","push","pushCancelMatchProc","CancelMatch","getMatchRequest","resultKey","ret","getObject","setMatchRequestResult","result","redisClient","inc","decr","pubMatchRequestResult","publishObject","request","getMatchRequestResult","removeMatchRequestAndResult","removeKeys","delete","startListenMatchResult","stopListenMatchResult","subscribeObject","item","unsubscribe","disconnect","undefined"],"mappings":"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","sourcesContent":["\nimport { v4 } from \"uuid\";\nimport { IMatchResult } from \"../../tsgf/match/Models\";\nimport { IResult } from \"../../tsgf/Result\";\nimport { IQueue, RedisQueue } from \"../Queue\";\nimport { IRedisClient } from \"../redisHelper\";\nimport { IMatcherExecResult, IMatchResultNotify, IMatchRequest, IMatchProc, EMatchProcType } from \"./Models\";\n\n/**匹配请求通用操作（跨服务器）*/\nexport class MatchRequestHelper {\n\n    public getRedisClient: (reuseClient: boolean) => Promise<IRedisClient>;\n\n    protected subscribeClient?: IRedisClient;\n    protected matchRequestQueue: IQueue;\n\n    constructor(getRedisClient: (reuseClient: boolean) => Promise<IRedisClient>) {\n        this.getRedisClient = getRedisClient;\n        this.matchRequestQueue = new RedisQueue(this.getRedisClient);\n    }\n\n    private static buildMatchRequestModelRedisKey(appId: string, reqId: string): string {\n        return `MatchServer:AppMatchRequest:App_${appId}:ReqId_${reqId}:Model`;\n    }\n    private static buildMatchRequestLockRedisKey(appId: string, reqId: string): string {\n        return `MatchServer:AppMatchRequest:App_${appId}:ReqId_${reqId}:Lock`;\n    }\n    private static buildMatchRequestResultRedisKey(appId: string, reqId: string): string {\n        return `MatchServer:AppMatchRequest:App_${appId}:ReqId_${reqId}:Result`;\n    }\n    private static buildMatchProcQueueRedisKey(appId: string): string {\n        return `MatchServer:AppMatchProc:App_${appId}:Queue`;\n    }\n\n    /**\n     * [匹配服务器] 开始侦听匹配操作队列\n     *\n     * @public\n     * @param appId\n     * @param listen\n     * @returns\n     */\n    public listenMatchProc(appId: string, listen: (req: IMatchProc) => void): void {\n        let queueKey = MatchRequestHelper.buildMatchProcQueueRedisKey(appId);\n        this.matchRequestQueue.listen<IMatchProc>(queueKey, listen);\n    }\n    /**\n     * [匹配服务器] 停止侦听匹配操作队列\n     *\n     * @public\n     * @param appId\n     */\n    public stopListenMatchProc(appId: string): void {\n        let queueKey = MatchRequestHelper.buildMatchProcQueueRedisKey(appId);\n        this.matchRequestQueue.stopListen(queueKey);\n    }\n\n    /**\n     * [大厅服务器、游戏服务器] 推送请求匹配操作到队列\n     *\n     * @public\n     * @param appId\n     * @param req\n     * @returns\n     */\n    public async pushRequestMatchProc(appId: string, req: IMatchRequest): Promise<void> {\n        let modelKey = MatchRequestHelper.buildMatchRequestModelRedisKey(appId, req.matchReqId);\n        let lockKey = MatchRequestHelper.buildMatchRequestLockRedisKey(appId, req.matchReqId);\n        let redisTimeoutSec = (req.matchTimeoutSec ?? 60) + 600;//redis的过期时间为匹配请求过期时间再加10分钟\n        let client = await this.getRedisClient(true);\n        client.setObject(modelKey, req, redisTimeoutSec);\n        //设置值为1，通过递减，并发的话值为0的只会有一个，来确保唯一处理结果\n        client.setString(lockKey, \"1\", redisTimeoutSec);\n\n        let queueKey = MatchRequestHelper.buildMatchProcQueueRedisKey(appId);\n        let matchProc: IMatchProc = {\n            procType: EMatchProcType.RequestMatch,\n            matchReqId: req.matchReqId,\n        };\n        this.matchRequestQueue.push(queueKey, matchProc);\n    }\n    /**\n     * [大厅服务器、游戏服务器] 推送取消匹配操作到队列\n     *\n     * @public\n     * @param appId\n     * @param matchReqId\n     * @returns\n     */\n    public async pushCancelMatchProc(appId: string, matchReqId: string): Promise<void> {\n        let queueKey = MatchRequestHelper.buildMatchProcQueueRedisKey(appId);\n        let matchProc: IMatchProc = {\n            procType: EMatchProcType.CancelMatch,\n            matchReqId: matchReqId,\n        };\n        this.matchRequestQueue.push(queueKey, matchProc);\n    }\n\n    /**\n     * [大厅服务器、游戏服务器、匹配服务器] 获取匹配请求\n     *\n     * @public\n     * @param appId \n     * @param reqId \n     * @returns\n     */\n    public async getMatchRequest(appId: string, reqId: string): Promise<IMatchRequest | null> {\n        let resultKey = MatchRequestHelper.buildMatchRequestModelRedisKey(appId, reqId);\n        let ret = await (await this.getRedisClient(true)).getObject<IMatchRequest>(resultKey);\n        if (!ret) return null;\n        return ret as IMatchRequest;\n    }\n\n    /**\n     * 设置请求结果，只有返回true才表示设置成功，false则表示其他并发抢去了，请忽略这次匹配结果，防止影响到抢下并发的逻辑\n     * 使用 startListenMatchResult 来侦听全局匹配结果的消息\n     *\n     * @public\n     * @param appId\n     * @param req\n     * @param result\n     * @returns\n     */\n    public async setMatchRequestResult(appId: string, req: IMatchRequest, result: IResult<IMatchResult>): Promise<boolean> {\n        let lockKey = MatchRequestHelper.buildMatchRequestLockRedisKey(appId, req.matchReqId);\n        let redisClient = await this.getRedisClient(true);\n        let inc = await redisClient.decr(lockKey);\n        if (inc !== 0) {\n            //成功递减为0的才表示抢下并发了，其他值则为并发落后了！\n            return false;\n        }\n        //设置结果对象到redis\n        let resultKey = MatchRequestHelper.buildMatchRequestResultRedisKey(appId, req.matchReqId);\n        await redisClient.setObject(resultKey, result, 600);\n\n        // 推送结果通知, 不需要等待\n        this.pubMatchRequestResult(req, result);\n        return true;\n    }\n    /**\n     *推送匹配结果到订阅频道, 让所有订阅结果的地方都能收到, 独立的数据通道,其他redis键删掉也不影响结果频道获取数据\n     *\n     * @param req\n     * @param result\n     */\n    public async pubMatchRequestResult(req: IMatchRequest, result: IResult<IMatchResult>){\n        let redisClient = await this.getRedisClient(true);\n        //将结果消息推送到订阅消息\n        await redisClient.publishObject<IMatchResultNotify>(\"MatchRequestsResult\", {\n            request: req,\n            result: result,\n        });\n    }\n    /**\n     * 获取匹配请求结果\n     *\n     * @public\n     * @param appId \n     * @param reqId \n     * @returns\n     */\n    public async getMatchRequestResult(appId: string, reqId: string): Promise<IResult<IMatchResult> | null> {\n        let resultKey = MatchRequestHelper.buildMatchRequestResultRedisKey(appId, reqId);\n        let ret = await (await this.getRedisClient(true)).getObject<IResult<IMatchResult>>(resultKey);\n        if (!ret) return null;\n        return ret as IResult<IMatchResult>;\n    }\n\n    /**\n     * 直接移除匹配请求和结果的redis数据, 由发起请求端调用(如果是终端发起,则终端拿到结果后删除, 如果是匹配服务发起,则匹配服务有结果后调用删除)\n     *\n     * @public\n     * @param appId\n     * @param reqId\n     * @returns\n     */\n    public async removeMatchRequestAndResult(appId: string, reqId: string): Promise<void> {\n        let removeKeys = [\n            MatchRequestHelper.buildMatchRequestModelRedisKey(appId, reqId),\n            MatchRequestHelper.buildMatchRequestLockRedisKey(appId, reqId),\n            MatchRequestHelper.buildMatchRequestResultRedisKey(appId, reqId),\n        ];\n        await (await this.getRedisClient(true)).delete(...removeKeys);\n    }\n\n\n    /**\n     * [大厅服务器、游戏服务器] 开始侦听全局的匹配请求结果的消息\n     *\n     * @public\n     * @param listen\n     * @returns\n     */\n    public async startListenMatchResult(listen: (notify: IMatchResultNotify) => void): Promise<void> {\n        this.stopListenMatchResult();\n\n        this.subscribeClient = await this.getRedisClient(false);\n        await this.subscribeClient.subscribeObject<IMatchResultNotify>(\"MatchRequestsResult\", item => listen(item));\n    }\n\n    /**\n     * [大厅服务器、游戏服务器] 取消侦听全局的匹配请求结果\n     *\n     * @public\n     * @returns\n     */\n    public async stopListenMatchResult(): Promise<void> {\n        if (this.subscribeClient) {\n            this.subscribeClient.unsubscribe(\"MatchRequestsResult\");\n            this.subscribeClient.disconnect();\n            this.subscribeClient = undefined;\n        }\n    }\n\n}"]}