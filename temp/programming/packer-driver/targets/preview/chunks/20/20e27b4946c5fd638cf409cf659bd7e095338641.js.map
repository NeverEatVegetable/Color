{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/tsgf-sdk/scripts/postBuild.js"],"names":["_cjsLoader","_req","__cjsMetaURL","_req0","_req1","_req2","url","define","exports","require","module","__filename","__dirname","fs","path","content","readFileSync","resolve","replace","writeFileSync","forEach","filepath","version","_cjsExports"],"mappings":";;;;;;;;;AAAOA,MAAAA,U;;AACkBC,MAAAA,I,OAAhBC,Y;;AACgBC,MAAAA,K,SAAhBD,Y;;AACgBE,MAAAA,K,iBAAhBF,Y;;AACgBG,MAAAA,K,iBAAhBH,Y;;;8BAEHA,Y,GAAe,cAAYI,G;;AACjCN,MAAAA,UAAU,CAACO,MAAX,CAAkBL,YAAlB,EAAgC,UAAUM,OAAV,EAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,UAApC,EAAgDC,SAAhD,EAA2D;AAC3F;AAGC,YAAMC,EAAE,GAAGJ,OAAO,CAAC,IAAD,CAAlB;;AACA,YAAMK,IAAI,GAAGL,OAAO,CAAC,MAAD,CAApB,CAL0F,CAO1F;;;AACA,SAAC,MAAM;AACH,cAAIM,OAAO,GAAGF,EAAE,CAACG,YAAH,CAAgBF,IAAI,CAACG,OAAL,CAAaL,SAAb,EAAwB,oBAAxB,CAAhB,EAA+D,OAA/D,CAAd;AACAG,UAAAA,OAAO,GAAGA,OAAO,CAACG,OAAR,CAAgB,sCAAhB,EAAwD,EAAxD,CAAV;AACAH,UAAAA,OAAO,GAAGA,OAAO,CAACG,OAAR,CAAgB,sCAAhB,EAAwD,EAAxD,CAAV;AAEAH,UAAAA,OAAO,GAAGN,OAAO,CAAC,aAAD,CAAP,GAAyB,IAAzB,GAAgCM,OAA1C;AAEAF,UAAAA,EAAE,CAACM,aAAH,CAAiBL,IAAI,CAACG,OAAL,CAAaL,SAAb,EAAwB,oBAAxB,CAAjB,EAAgEG,OAAhE,EAAyE,OAAzE;AACH,SARD,IAR0F,CAkB1F;;;AACA,SACID,IAAI,CAACG,OAAL,CAAaL,SAAb,EAAwB,kBAAxB,CADJ,EAEIE,IAAI,CAACG,OAAL,CAAaL,SAAb,EAAwB,mBAAxB,CAFJ,EAGEQ,OAHF,CAGUC,QAAQ,IAAI;AAClB,cAAIN,OAAO,GAAGF,EAAE,CAACG,YAAH,CAAgBK,QAAhB,EAA0B,OAA1B,CAAd;AACAN,UAAAA,OAAO,GAAGA,OAAO,CAACG,OAAR,CAAgB,kBAAhB,EAAoCT,OAAO,CAAC,iBAAD,CAAP,CAA2Ba,OAA/D,CAAV;AAAkF;AAClFT,UAAAA,EAAE,CAACM,aAAH,CAAiBE,QAAjB,EAA2BN,OAA3B,EAAoC,OAApC;AACH,SAPD,EAnB0F,CA4B3F;;AAEA,2BAAAQ,WAAW,GAAGb,MAAM,CAACF,OAArB;AAGC,OAjCD,EAiCG,OAAO;AACR,cAAMP,IADE;AAER,gBAAQE,KAFA;AAGR,uBAAeC,KAHP;AAIR,2BAAmBC;AAJX,OAAP,CAjCH","sourcesContent":["import _cjsLoader from 'cce:/internal/ml/cjs-loader.mjs';\nimport { __cjsMetaURL as _req} from 'fs';\nimport { __cjsMetaURL as _req0} from 'path';\nimport { __cjsMetaURL as _req1} from './copyright';\nimport { __cjsMetaURL as _req2} from '../package.json';\nlet _cjsExports;\nconst __cjsMetaURL = import.meta.url;\n_cjsLoader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {\n// #region ORIGINAL CODE\n\n\n const fs = require('fs');\n const path = require('path');\n\n // remove private / protected index.d.ts\n (() => {\n     let content = fs.readFileSync(path.resolve(__dirname, '../dist/index.d.ts'), 'utf-8');\n     content = content.replace(/\\r?\\n\\s*(private|protected)\\s+_.+;/ig, '');\n     content = content.replace(/\\/\\/\\/ <reference types=\"node\" \\/>/ig, '');\n\n     content = require('./copyright') + '\\n' + content;\n\n     fs.writeFileSync(path.resolve(__dirname, '../dist/index.d.ts'), content, 'utf-8');\n })();\n\n // replace __TSGF_VERSION__from index.js/mjs\n [\n     path.resolve(__dirname, '../dist/index.js'),\n     path.resolve(__dirname, '../dist/index.mjs')\n ].forEach(filepath => {\n     let content = fs.readFileSync(filepath, 'utf-8');\n     content = content.replace('__TSGF_VERSION__', require('../package.json').version);;\n     fs.writeFileSync(filepath, content, 'utf-8');\n });\n\n// #endregion ORIGINAL CODE\n\n_cjsExports = module.exports;\n\n\n}, () => ({\n  'fs': _req,\n  'path': _req0,\n  './copyright': _req1,\n  '../package.json': _req2,\n}));\nexport { _cjsExports as default };\nexport { __cjsMetaURL }\n"]}