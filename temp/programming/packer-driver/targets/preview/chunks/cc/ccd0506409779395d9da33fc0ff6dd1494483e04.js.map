{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/test/unitTest/api/ApiReconnect.test.ts"],"names":["delay","assert","createAndEnterRoom","hallClient","joinRoom","testEachBuild","ENetworkState","GameClient","ErrorCodes","describe","testData","test","msgCount","gameClient1Ret","playerToken1","playerId1","ok","succ","err","gameClient1","data","gameClient","roomId","gameClient2","playerToken2","gameClient3","playerToken3","onChangePlayerNetworkState","p","console","error","playerId","networkState","OFFLINE","JSON","stringify","oldToken","playerToken","oldPid","client","disconnect","fail","_playerToken","_playerId","recRet","reconnect","onJoinCount","onPlayerJoinRoom","roomIdRet","recoverPlayerRoom","gameServerUrl","reconnectRet","undefined","code","AuthReconnectionFail"],"mappings":"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","sourcesContent":["\nimport { delay } from \"../../../src/shared/tsgf/Utils\";\nimport { assert } from 'chai';\nimport { authPlayerToken, createAndEnterRoom, hallClient, joinRoom, testEachBuild } from \"./ApiUtils\";\nimport { ENetworkState } from \"../../../src/shared/tsgf/player/IPlayerInfo\";\nimport { GameClient } from \"../../../src/shared/gameClient/GameClient\";\nimport { ErrorCodes } from \"../../../src/shared/tsgf/Result\";\n\ndescribe(\"断线重连\", () => {\n\n    let testData = testEachBuild(5);\n\n    test('断线重连同时测试网络事件', async function () {\n\n        let msgCount = 0;\n\n        //玩家1创建房间并进入游戏服务器\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1');\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n        testData.gameClient2 = await joinRoom(testData.playerToken2, roomId, 'zum2');\n        testData.gameClient3 = await joinRoom(testData.playerToken3, roomId, 'zum3');\n\n\n        msgCount = 0;\n        testData.gameClient1.onChangePlayerNetworkState = (p) => {\n            msgCount--;\n            console.error(`不应该收到自己的网络事件`);\n        };\n        testData.gameClient2.onChangePlayerNetworkState = (p) => {\n            if (p.playerId === testData.playerId1 && p.networkState === ENetworkState.OFFLINE) {\n                msgCount++;\n            } else {\n                console.error(`这个时候应该收到玩家1【${testData.playerId1}】的变更通知,但实际收到的是:${JSON.stringify(p)}`);\n            }\n        };\n        testData.gameClient3.onChangePlayerNetworkState = (p) => {\n            if (p.playerId === testData.playerId1 && p.networkState === ENetworkState.OFFLINE) {\n                msgCount++;\n            } else {\n                console.error(`这个时候应该收到玩家1【${testData.playerId1}】的变更通知,但实际收到的是:${JSON.stringify(p)}`);\n            }\n        };\n\n        let oldToken = testData.gameClient1.playerToken;\n        let oldPid = testData.gameClient1.playerId;\n        await testData.gameClient1.client.disconnect();\n\n        await delay(200);\n        assert.ok(msgCount === 2, '剩下2个人都应该收到网络变更通知, 实际只为' + msgCount);\n\n        msgCount = 0;\n        testData.gameClient1.onChangePlayerNetworkState = (p) => {\n            msgCount++;\n            assert.fail('不应该收到自己的网络事件');\n        };\n        testData.gameClient2.onChangePlayerNetworkState = (p) => {\n            msgCount++;\n        };\n        testData.gameClient3.onChangePlayerNetworkState = (p) => {\n            msgCount++;\n        };\n\n        //@ts-ignore\n        testData.gameClient1._playerToken = oldToken;\n        //@ts-ignore\n        testData.gameClient1._playerId = oldPid;\n        let recRet = await testData.gameClient1.reconnect();\n        assert.ok(recRet.succ, '重连失败!:' + recRet.err);\n\n        await delay(200);\n        assert.ok(msgCount === 2, '剩下2个人都应该收到网络变更通知, 实际只为' + msgCount);\n\n        //await delay(5000);//临时延迟5秒，方便我查看一下redis\n\n        oldPid = testData.gameClient1.playerId;\n        oldToken = testData.gameClient1.playerToken;\n        await testData.gameClient1.client.disconnect();\n        await delay(200);\n\n        let onJoinCount = 0;\n        testData.gameClient1.onPlayerJoinRoom = (p) => {\n            onJoinCount++;\n        };\n        testData.gameClient2.onPlayerJoinRoom = (p) => {\n            onJoinCount++;\n        };\n        testData.gameClient3.onPlayerJoinRoom = (p) => {\n            onJoinCount++;\n        };\n        msgCount = 0;\n        let roomIdRet = await hallClient.recoverPlayerRoom(oldPid, oldToken, '全新的名字');\n        assert.ok(roomIdRet.succ, '恢复失败!' + roomIdRet.err);\n\n        //开始游戏服务器的重连操作\n        testData.gameClient1 = new GameClient(roomIdRet.data!.gameServerUrl!, oldToken);\n        let reconnectRet = await testData.gameClient1.reconnect();\n        assert.ok(reconnectRet.succ, '恢复失败!' + reconnectRet.err);\n\n        await delay(200);\n        assert.ok(onJoinCount === 0, '应该有0个玩家收到玩家加入通知, 实际为' + onJoinCount);\n        assert.ok(msgCount === 2, '剩下2个人都应该收到网络变更通知, 实际为' + msgCount);\n\n\n    }, 60 * 1000);\n\n\n    test('断线超时重连测试是否房间自动解散', async function () {\n        //玩家1创建房间并进入游戏服务器\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {}, undefined, 0);\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n\n        let oldToken = testData.gameClient1.playerToken;\n        let oldPid = testData.gameClient1.playerId;\n        await testData.gameClient1.client.disconnect();\n\n        await delay(200);\n\n        //@ts-ignore\n        testData.gameClient1._playerToken = oldToken;\n        //@ts-ignore\n        testData.gameClient1._playerId = oldPid;\n        let recRet = await testData.gameClient1.reconnect();\n        assert.ok(!recRet.succ && recRet.code === ErrorCodes.AuthReconnectionFail,\n            '重连应该失败!' + JSON.stringify(recRet));\n\n        // 接着尝试恢复房间数据, token是成功的, 但当前房间id应该为空\n        let roomIdRet = await hallClient.recoverPlayerRoom(oldPid, oldToken, '全新的名字');\n        assert.ok(roomIdRet.succ && !roomIdRet.data, '这里应该恢复成功,但没有房间id!' + roomIdRet.err);\n\n\n    }, 60 * 1000)\n\n\n});"]}