{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/gameServer/FrameSyncGame.ts"],"names":["FrameSyncGame","ConnectionStatus","FrameSyncExecutor","EPlayerInputFrameType","inSync","_inSync","inRandomRequirePlayerSyncState","_inRandomRequirePlayerSyncState","constructor","roomInfo","gameWsServer","gameConnMgr","getRoomAllPlayerConns","syncFrameRate","randomRequirePlayerSyncStateInvMs","frameSyncExecutor","randomRequirePlayerSyncStateHD","requireSyncStatePlayerId","msg","onSyncOneFrame","dispose","stopGame","playerConnList","length","broadcastMsg","playerInpFrame","playerInfo","inpFrameType","setOthersProp","addPlayerInpFrame","playerId","buildAfterFrames","startFrameIndex","requestFrames","beginFrameIndex","endFrameIndex","syncStateData","stateData","stateFrameIndex","stopRandomRequireConnSyncState","clearInterval","startRandomRequireConnSyncState","setInterval","onRandomRequireConnSyncState","bind","playerSendSyncState","player","playerList","conn","getPlayerConn","status","Opened","connIndex","Math","floor","random","sendMsg","startGame","startSyncFrame","PlayerEnterGame","inpFrame","stopSyncFrame"],"mappings":"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","sourcesContent":["\nimport { MsgNotifySyncFrame } from \"../shared/gameClient/protocols/MsgNotifySyncFrame\";\nimport { MsgPlayerInpFrame } from \"../shared/gameClient/protocols/MsgPlayerInpFrame\";\nimport { MsgPlayerSendSyncState } from \"../shared/gameClient/protocols/MsgPlayerSendSyncState\";\nimport { ConnectionStatus } from \"tsrpc\";\nimport { FrameSyncExecutor } from \"./FrameSyncExecutor\";\nimport { ClientConnection, GameMsgCall, GameServer, GameWsServer } from \"./GameServer\";\nimport { GameConnMgr } from \"./GameConnMgr\";\nimport { IRoomInfo } from \"../shared/tsgf/room/IRoomInfo\";\nimport { IPlayer } from \"../shared/tsgfServer/auth/Models\";\nimport { EPlayerInputFrameType, IAfterFrames, IGameSyncFrame, IFramePlayerInput, IPlayerInputOperate } from \"../shared/tsgf/room/IGameFrame\";\nimport { IPlayerInfo } from \"../shared/tsgf/player/IPlayerInfo\";\n\n\n/**帧同步游戏*/\nexport class FrameSyncGame {\n\n    private _inSync = false;\n    /**是否已经开始了同步*/\n    get inSync() {\n        return this._inSync;\n    }\n\n    /**帧同步执行器*/\n    private frameSyncExecutor: FrameSyncExecutor;\n\n    private _inRandomRequirePlayerSyncState: boolean = false;\n    /**当前是否在随机要求连接同步游戏状态数据到服务端*/\n    get inRandomRequirePlayerSyncState() {\n        return this._inRandomRequirePlayerSyncState;\n    }\n    /**随机要求连接同步游戏状态数据到服务端的 定时器句柄*/\n    private randomRequirePlayerSyncStateHD!: NodeJS.Timeout;\n    /**随机要求连接同步游戏状态数据到服务端的 定时间隔*/\n    public randomRequirePlayerSyncStateInvMs?: number;\n    /**当前要求同步状态的玩家ID,即不是所有客户端发来的同步状态都使用的*/\n    private requireSyncStatePlayerId: string | undefined;\n\n    private roomInfo: IRoomInfo;\n    private gameWsServer: GameWsServer;\n    private gameConnMgr: GameConnMgr;\n    private getRoomAllPlayerConns: () => ClientConnection[];\n    /**\n     * 构造函数\n     * @param syncFrameRate 同步帧率(每秒多少帧),默认每秒30帧\n     * @param randomRequirePlayerSyncEnabled 是否启用随机要求玩家同步状态给服务端的功能【前提客户端要实现】,方便大大缩短追帧时间\n     * @param randomRequirePlayerSyncStateInvMs 启用随机要求玩家同步状态功能的间隔\n     */\n    constructor(roomInfo: IRoomInfo, gameWsServer: GameWsServer, gameConnMgr: GameConnMgr, getRoomAllPlayerConns: () => ClientConnection[], syncFrameRate = 30, randomRequirePlayerSyncStateInvMs?:number) {\n        this.roomInfo = roomInfo;\n        this.gameWsServer = gameWsServer;\n        this.gameConnMgr = gameConnMgr;\n        this.randomRequirePlayerSyncStateInvMs = randomRequirePlayerSyncStateInvMs;\n        this.getRoomAllPlayerConns = getRoomAllPlayerConns;\n        this.frameSyncExecutor = new FrameSyncExecutor((msg) => this.onSyncOneFrame(msg), syncFrameRate);\n    }\n\n    /**销毁游戏数据,方便快速回收*/\n    public dispose(): void {\n        this.stopGame();\n    }\n\n    private onSyncOneFrame(msg: MsgNotifySyncFrame) {\n        let playerConnList = this.getRoomAllPlayerConns();\n        if (playerConnList.length <= 0) return;\n        //广播给游戏中所有连接\n        this.gameWsServer.broadcastMsg(\"NotifySyncFrame\", msg, playerConnList);\n    }\n\n\n    /**\n     * [同步中才有效]玩家输入操作帧\n     *\n     * @public\n     * @param playerInfo\n     * @param inpFrameType\n     * @param setOthersProp 自行设置额外字段, 如帧输入类型是操作,则需要设置operates字段\n     */\n    public playerInpFrame(playerInfo: IPlayerInfo, inpFrameType: EPlayerInputFrameType,\n        setOthersProp?: (inpFrame: IFramePlayerInput) => void) {\n        this.frameSyncExecutor.addPlayerInpFrame(playerInfo.playerId, inpFrameType, setOthersProp);\n    }\n\n    /**\n     * 获取追帧数据(最后状态数据+追帧包)\n     * @param startFrameIndex 使用指定的帧索引开始追帧. 不传则默认使用服务端状态同步所在帧索引开始,如果没有状态同步则从头开始\n     */\n    public buildAfterFrames(startFrameIndex?: number): IAfterFrames {\n        return this.frameSyncExecutor.buildAfterFrames(startFrameIndex);\n    }\n    /**\n     * 请求帧数组\n     *\n     * @public\n     * @param beginFrameIndex 起始帧索引(包含)\n     * @param endFrameIndex 截止帧索引(包含)\n     * @returns\n     */\n    public requestFrames(beginFrameIndex: number, endFrameIndex: number): IGameSyncFrame[] {\n        return this.frameSyncExecutor.requestFrames(beginFrameIndex, endFrameIndex);\n    }\n\n    /**\n     * 同步游戏状态数据\n     * @param stateData \n     * @param stateFrameIndex \n     */\n    public syncStateData(stateData: any, stateFrameIndex: number): void {\n        this.frameSyncExecutor.syncStateData(stateData, stateFrameIndex);\n    }\n\n\n    /**\n     * 停止随机要求连接同步游戏状态数据给服务端\n     */\n    public stopRandomRequireConnSyncState(): void {\n        this._inRandomRequirePlayerSyncState = false;\n        clearInterval(this.randomRequirePlayerSyncStateHD);\n    }\n    /**\n     * 开始随机要求连接同步游戏状态数据给服务端\n     */\n    public startRandomRequireConnSyncState(): void {\n        this.stopRandomRequireConnSyncState();\n        if (this.randomRequirePlayerSyncStateInvMs) {\n            this._inRandomRequirePlayerSyncState = true;\n            this.randomRequirePlayerSyncStateHD = setInterval(this.onRandomRequireConnSyncState.bind(this), this.randomRequirePlayerSyncStateInvMs);\n        }\n    }\n\n    /**玩家发送*/\n    public playerSendSyncState(player: IPlayer, msg: MsgPlayerSendSyncState) {\n        if (!this._inRandomRequirePlayerSyncState) return;\n        //必须是服务端当前指定的(信任的),否则不使用这同步数据\n        if (this.requireSyncStatePlayerId !== player?.playerInfo?.playerId) return;\n        //同步服务端状态数据\n        this.frameSyncExecutor.syncStateData(msg.stateData, msg.stateFrameIndex);\n    }\n    /**\n     * 处理随机要求连接同步游戏状态数据给服务端\n     */\n    onRandomRequireConnSyncState(): void {\n        //如果当前没有连接,直接返回\n        if (this.roomInfo.playerList.length <= 0) return;\n\n        let conn: ClientConnection | undefined;\n        if (this.requireSyncStatePlayerId) {\n            //已经指定过连接了,直接获取\n            conn = this.gameConnMgr.getPlayerConn(this.requireSyncStatePlayerId);\n        }\n        if (!conn || conn.status != ConnectionStatus.Opened) {\n            //没指定过或者之前指定的不能用了,则重新随机一个\n            let connIndex = Math.floor(Math.random() * this.roomInfo.playerList.length);\n            this.requireSyncStatePlayerId = this.roomInfo.playerList[connIndex].playerId;\n            conn = this.gameConnMgr.getPlayerConn(this.requireSyncStatePlayerId);\n        }\n\n        conn!.sendMsg(\"RequirePlayerSyncState\", {});\n    }\n\n\n    /**开始游戏,根据启用的功能,直接开始游戏服务支持*/\n    public startGame(): void {\n        this.frameSyncExecutor.startSyncFrame();\n        this.startRandomRequireConnSyncState();\n        this._inSync = true;\n\n        for (let playerInfo of this.roomInfo.playerList) {\n            this.frameSyncExecutor.addPlayerInpFrame(playerInfo.playerId, EPlayerInputFrameType.PlayerEnterGame,\n                inpFrame => inpFrame.playerInfo = playerInfo);\n        }\n    }\n    /**停止游戏内相关功能,并回收或重置相关数据*/\n    public stopGame(): void {\n        this._inSync = false;\n        this.frameSyncExecutor.stopSyncFrame();\n        this.stopRandomRequireConnSyncState();\n    }\n\n}"]}