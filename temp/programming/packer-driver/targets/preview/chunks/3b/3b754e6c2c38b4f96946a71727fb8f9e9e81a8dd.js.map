{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/gameServer/api/ApiSendRoomMsg.ts"],"names":["ApiSendRoomMsg","call","gameServer","getGameServer","roomInfo","roomMgr","getRoomInfo","conn","currPlayer","error","fromPlayerInfo","req","robotPlayerId","roomRobotPlayers","get","playerInfo","playerInfos","roomMsg","recvType","ROOM_ALL","playerList","ROOM_OTHERS","filter","p","playerId","ROOM_SOME","recvPlayerList","length","pidList","includes","connList","gameConnMgr","getPlayerConn","push","server","broadcastMsg","recvRoomMsg","msg","succ","ERoomMsgRecvType"],"mappings":";;;;;;;;;WAKsBA,c;;;;;wCAAf,WAA8BC,IAA9B,EAAiF;AACpF,UAAIC,UAAU,GAAGD,IAAI,CAACE,aAAL,EAAjB;AACA,UAAIC,QAAQ,SAASF,UAAU,CAACG,OAAX,CAAmBC,WAAnB,CAA+BL,IAAI,CAACM,IAAL,CAAUC,UAAzC,CAArB;AACA,UAAI,CAACJ,QAAL,EAAe,aAAaH,IAAI,CAACQ,KAAL,CAAW,UAAX,CAAb;AACf,UAAIC,cAAJ;;AACA,UAAIT,IAAI,CAACU,GAAL,CAASC,aAAb,EAA4B;AACxBF,QAAAA,cAAc,GAAGT,IAAI,CAACM,IAAL,CAAUC,UAAV,CAAqBK,gBAArB,CAAsCC,GAAtC,CAA0Cb,IAAI,CAACU,GAAL,CAASC,aAAnD,CAAjB;;AACA,YAAI,CAACF,cAAL,EAAqB;AACjB,uBAAaT,IAAI,CAACQ,KAAL,CAAW,QAAX,CAAb;AACH;AACJ,OALD,MAKO;AACHC,QAAAA,cAAc,GAAGT,IAAI,CAACM,IAAL,CAAUC,UAAV,CAAqBO,UAAtC;AACH;;AACD,UAAIC,WAAJ;AACA,UAAIC,OAAO,GAAGhB,IAAI,CAACU,GAAL,CAASM,OAAvB;;AACA,cAAQA,OAAO,CAACC,QAAhB;AACI,aAAK;AAAA;AAAA,kDAAiBC,QAAtB;AACIH,UAAAA,WAAW,GAAGZ,QAAQ,CAACgB,UAAvB;AACA;;AACJ,aAAK;AAAA;AAAA,kDAAiBC,WAAtB;AACIL,UAAAA,WAAW,GAAGZ,QAAQ,CAACgB,UAAT,CAAoBE,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACC,QAAF,KAAed,cAAc,CAAEc,QAA/D,CAAd;AACA;;AACJ,aAAK;AAAA;AAAA,kDAAiBC,SAAtB;AACI,cAAI,CAACR,OAAO,CAACS,cAAT,IAA2BT,OAAO,CAACS,cAAR,CAAuBC,MAAvB,IAAiC,CAAhE,EAAmE;AAC/D,yBAAa1B,IAAI,CAACQ,KAAL,CAAW,8BAAX,CAAb;AACH;;AACD,cAAImB,OAAiB,GAAGX,OAAO,CAACS,cAAhC;AACAV,UAAAA,WAAW,GAAGZ,QAAQ,CAAEgB,UAAV,CAAqBE,MAArB,CAA4BC,CAAC,IAAIK,OAAO,CAACC,QAAR,CAAiBN,CAAC,CAACC,QAAnB,CAAjC,CAAd;AACA;AAbR;;AAeA,UAAIR,WAAW,CAACW,MAAZ,GAAqB,CAAzB,EAA4B;AACxB,YAAIG,QAA4B,GAAG,EAAnC;;AACA,aAAK,IAAIf,UAAT,IAAuBC,WAAvB,EAAoC;AAChC,cAAIT,IAAI,GAAGL,UAAU,CAAC6B,WAAX,CAAuBC,aAAvB,CAAqCjB,UAAU,CAACS,QAAhD,CAAX;AACA,cAAI,CAACjB,IAAL,EAAW;AACXuB,UAAAA,QAAQ,CAACG,IAAT,CAAc1B,IAAd;AACH;;AACDL,QAAAA,UAAU,CAACgC,MAAX,CAAkBC,YAAlB,CAA+B,eAA/B,EAAgD;AAC5CC,UAAAA,WAAW,EAAE;AACTC,YAAAA,GAAG,EAAEpB,OAAO,CAACoB,GADJ;AAETnB,YAAAA,QAAQ,EAAED,OAAO,CAACC,QAFT;AAGTR,YAAAA,cAAc,EAAEA;AAHP;AAD+B,SAAhD,EAMGoB,QANH;AAOH;;AACD,mBAAa7B,IAAI,CAACqC,IAAL,CAAU,EAAV,CAAb;AACH,K;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA9CqBtC,c;;;;;;;;AAJbuC,MAAAA,gB,iBAAAA,gB","sourcesContent":["import { IPlayerInfo } from \"../../shared/tsgf/player/IPlayerInfo\";\nimport { ERoomMsgRecvType } from \"../../shared/tsgf/room/IRoomMsg\";\nimport { ReqSendRoomMsg, ResSendRoomMsg } from \"../../shared/gameClient/protocols/PtlSendRoomMsg\";\nimport { ClientConnection, GameApiCall } from \"../GameServer\";\n\nexport async function ApiSendRoomMsg(call: GameApiCall<ReqSendRoomMsg, ResSendRoomMsg>) {\n    let gameServer = call.getGameServer();\n    let roomInfo = await gameServer.roomMgr.getRoomInfo(call.conn.currPlayer);\n    if (!roomInfo) return await call.error('玩家不在房间中！');\n    let fromPlayerInfo: IPlayerInfo | undefined;\n    if (call.req.robotPlayerId) {\n        fromPlayerInfo = call.conn.currPlayer.roomRobotPlayers.get(call.req.robotPlayerId);\n        if (!fromPlayerInfo) {\n            return await call.error('非可控玩家!');\n        }\n    } else {\n        fromPlayerInfo = call.conn.currPlayer.playerInfo;\n    }\n    let playerInfos: IPlayerInfo[];\n    let roomMsg = call.req.roomMsg;\n    switch (roomMsg.recvType) {\n        case ERoomMsgRecvType.ROOM_ALL:\n            playerInfos = roomInfo.playerList;\n            break;\n        case ERoomMsgRecvType.ROOM_OTHERS:\n            playerInfos = roomInfo.playerList.filter(p => p.playerId !== fromPlayerInfo!.playerId);\n            break;\n        case ERoomMsgRecvType.ROOM_SOME:\n            if (!roomMsg.recvPlayerList || roomMsg.recvPlayerList.length <= 0) {\n                return await call.error('指定玩家接收，则需要定义recvPlayerList字段');\n            }\n            let pidList: string[] = roomMsg.recvPlayerList;\n            playerInfos = roomInfo!.playerList.filter(p => pidList.includes(p.playerId));\n            break;\n    }\n    if (playerInfos.length > 0) {\n        let connList: ClientConnection[] = [];\n        for (let playerInfo of playerInfos) {\n            let conn = gameServer.gameConnMgr.getPlayerConn(playerInfo.playerId);\n            if (!conn) continue;\n            connList.push(conn);\n        }\n        gameServer.server.broadcastMsg(\"NotifyRoomMsg\", {\n            recvRoomMsg: {\n                msg: roomMsg.msg,\n                recvType: roomMsg.recvType,\n                fromPlayerInfo: fromPlayerInfo,\n            }\n        }, connList);\n    }\n    return await call.succ({});\n}"]}