{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/match/AppMatchRequestHandler.ts"],"names":["AppMatchRequestHandler","MatcherRequests","buildRoomJoinUsMatchRequest","EMatchProcType","ErrorCodes","Result","EMatchFromType","ERoomRegChangedType","arrRemoveItems","arrSum","logger","ERoomCreateType","teamPlayerIdsAdd","teamPlayerIdsAddSingle","teamPlayerIdsSubtractSingle","constructor","appId","reqHelper","gameClusterTerminal","matchers","Map","allMatcherReqs","allReqs","roomRegInfos","roomJoinUsReq","pollMatchReqHd","pollProcTimeoutMatchReqHd","listenMatchProc","proc","onNewAppMatchProc","startPollProcTimeoutReqs","dispose","stopListenMatchProc","stopPollReqs","roomRegInfoChanged","regRoomChanged","get","regInfo","roomId","changedType","Create","set","ChangeInfo","Delete","delete","removeMatchRequestAndResult","PlayerJoinRoom","fromInfo","matchFromInfo","teamsPlayerIds","joinRoomPlayerId","teamId","currPlayerCount","t","playerIds","length","PlayerLeaveRoom","leaveRoomPlayerId","PlayerChangeTeam","changePlayerId","oldTeamId","newTeamId","clearTimeout","startPollAllReqs","setTimeout","pollAllReqs","pollProcTimeoutReqs","size","matcherKey","matcherReqs","matcher","log","result","onPollMatcherReqs","slice","procMatcherExecResult","addNewMatchReq","matchReq","startMatchTime","Date","now","matchReqId","matcherAllReqs","push","matchFromType","RoomJoinUs","existsJoinUsReq","faildMatchRequest","MatchRequestCancelled","stopPollProcTimeoutReqs","timeoutReqIds","keys","i","req","matchTimeoutSec","faildMatchRequests","MatchTimeout","matchProc","procType","RequestMatch","onNewAppMatchReq","CancelMatch","onCancelMatchReq","getMatchRequest","warn","MatchMatcherNotFound","ParamsError","ret","onNewMatchReq","buildErr","setMatchRequestResult","currReq","resultErrCode","resultErrMsg","MatchUnknown","hasResult","error","resultCreateRoom","createRoomResult","matchRequestPlayerResults","createRoomRet","createRoom","createRoomPara","MATCH_CREATE","succ","forEach","reqPlayerResult","find","r","err","code","roomOnlineInfo","data","matchTeamsPlayerIds","firstReq","playerRet","matchPlayerResults","playerId","matchResult","gameServerUrl","succMatchRequest","roomJoinUsMatch","useReq","resultJoinRoom","getRoomOLInfo","getRoomOnlineInfo","joinRoomResult","joinRoomId","errMsg","errCode","buildSucc","succMatchRequests"],"mappings":"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","sourcesContent":["\nimport { IMatcher } from \"./IMatcher\";\nimport { MatcherRequests } from \"./MatcherRequests\";\nimport { buildRoomJoinUsMatchRequest, EMatchProcType, IMatcherExecResult, IMatchFromRoomJoinUsOnServer, IMatchProc, IMatchRequest } from \"./Models\";\nimport { MatchRequestHelper } from \"./MatchRequestHelper\";\nimport { ErrorCodes, IResult, Result } from \"../../tsgf/Result\";\nimport { EMatchFromType, IMatchResult } from \"../../tsgf/match/Models\";\nimport { ERoomRegChangedType, IRoomInfoPack, IRoomRegChanged, RoomHelper } from \"../room/RoomHelper\";\nimport { arrRemoveItems, arrSum } from \"../../tsgf/Utils\";\nimport { logger } from \"../../tsgf/logger\";\nimport { ERoomCreateType, ICreateRoomPara, ITeamPlayerIds } from \"../../tsgf/room/IRoomInfo\";\nimport { IRoomRegInfo, teamPlayerIdsAdd, teamPlayerIdsAddSingle, teamPlayerIdsSubtractSingle } from \"../room/Models\";\nimport { IGameServerInfoInServer } from \"../game/Models\";\nimport { GameServerHelper } from \"../game/GameServerHelper\";\nimport { GameClusterTerminal } from \"../gameCluster/GameClusterTerminal\";\n\n/**应用匹配请求处理器*/\nexport class AppMatchRequestHandler {\n\n    public appId: string;\n    /**本应用的所有匹配器，按匹配器标识字典*/\n    public matchers: Map<string, IMatcher> = new Map<string, IMatcher>();\n    /**本应用的所有匹配器下的匹配请求*/\n    public allMatcherReqs: Map<string, MatcherRequests> = new Map<string, MatcherRequests>();\n    /**本应用的所有匹配请求*/\n    public allReqs: Map<string, IMatchRequest> = new Map<string, IMatchRequest>();\n    /**公共的请求处理工具*/\n    public reqHelper: MatchRequestHelper;\n\n    /**本应用下的房间注册信息缓存, 由父级服务进行维护*/\n    public roomRegInfos: Map<string, IRoomRegInfo> = new Map<string, IRoomRegInfo>();\n    /**房间招人的匹配,一个房间只能存在一个匹配请求*/\n    public roomJoinUsReq: Map<string, IMatchRequest> = new Map<string, IMatchRequest>();\n\n    public gameClusterTerminal: GameClusterTerminal;\n\n    protected pollMatchReqHd: any = null;\n    protected pollProcTimeoutMatchReqHd: any = null;\n\n    /**\n     *\n     * @param appId\n     * @param reqHelper 公共的请求工具类\n     * @param allotGameServer 设置一个分配游戏服务器的方法\n     */\n    constructor(appId: string, reqHelper: MatchRequestHelper, gameClusterTerminal: GameClusterTerminal) {\n        this.appId = appId;\n        this.reqHelper = reqHelper;\n        this.reqHelper.listenMatchProc(this.appId, async (proc) => {\n            await this.onNewAppMatchProc(proc);\n        });\n        this.gameClusterTerminal = gameClusterTerminal;\n        this.startPollProcTimeoutReqs();\n    }\n    /**\n     * 清除数据\n     *\n     * @public\n     */\n    public dispose() {\n        this.reqHelper.stopListenMatchProc(this.appId);\n        this.stopPollReqs();\n        this.startPollProcTimeoutReqs();\n    }\n\n    public roomRegInfoChanged(regRoomChanged: IRoomRegChanged) {\n        let roomJoinUsReq = this.roomJoinUsReq.get(regRoomChanged.regInfo.roomId);\n        switch (regRoomChanged.changedType) {\n            case ERoomRegChangedType.Create:\n                this.roomRegInfos.set(regRoomChanged.regInfo.roomId, regRoomChanged.regInfo);\n                break;\n            case ERoomRegChangedType.ChangeInfo:\n                this.roomRegInfos.set(regRoomChanged.regInfo.roomId, regRoomChanged.regInfo);\n                break;\n            case ERoomRegChangedType.Delete:\n                this.roomRegInfos.delete(regRoomChanged.regInfo.roomId);\n                if (roomJoinUsReq) {\n                    //如果存在房间招人匹配,则同步删除匹配!\n                    this.removeMatchRequestAndResult(roomJoinUsReq);\n                }\n                break;\n            case ERoomRegChangedType.PlayerJoinRoom:\n                if (roomJoinUsReq) {\n                    //如果存在房间招人匹配,更新人数\n                    let fromInfo = roomJoinUsReq.matchFromInfo as IMatchFromRoomJoinUsOnServer;\n                    teamPlayerIdsAddSingle(fromInfo.teamsPlayerIds,\n                        regRoomChanged.joinRoomPlayerId, regRoomChanged.teamId);\n                    fromInfo.currPlayerCount = arrSum(fromInfo.teamsPlayerIds, t => t.playerIds.length);\n                }\n                break;\n            case ERoomRegChangedType.PlayerLeaveRoom:\n                if (roomJoinUsReq) {\n                    //如果存在房间招人匹配,更新人数\n                    let fromInfo = roomJoinUsReq.matchFromInfo as IMatchFromRoomJoinUsOnServer;\n                    teamPlayerIdsSubtractSingle(fromInfo.teamsPlayerIds,\n                        regRoomChanged.leaveRoomPlayerId, regRoomChanged.teamId);\n                    fromInfo.currPlayerCount = arrSum(fromInfo.teamsPlayerIds, t => t.playerIds.length);\n                }\n                break;\n            case ERoomRegChangedType.PlayerChangeTeam:\n                if (roomJoinUsReq) {\n                    //如果存在房间招人匹配,更新人数\n                    let fromInfo = roomJoinUsReq.matchFromInfo as IMatchFromRoomJoinUsOnServer;\n                    teamPlayerIdsSubtractSingle(fromInfo.teamsPlayerIds,\n                        regRoomChanged.changePlayerId, regRoomChanged.oldTeamId);\n                    teamPlayerIdsAddSingle(fromInfo.teamsPlayerIds,\n                        regRoomChanged.changePlayerId, regRoomChanged.newTeamId);\n                    fromInfo.currPlayerCount = arrSum(fromInfo.teamsPlayerIds, t => t.playerIds.length);\n                }\n                break;\n        }\n    }\n\n\n    /**停止定时轮询请求*/\n    protected stopPollReqs() {\n        if (this.pollMatchReqHd) clearTimeout(this.pollMatchReqHd);\n        this.pollMatchReqHd = null;\n    }\n    /**开始轮询所有请求*/\n    protected startPollAllReqs() {\n        this.stopPollReqs();\n        this.pollMatchReqHd = setTimeout(async () => await this.pollAllReqs(), 1000);\n    }\n    /**执行轮询所有请求（给匹配器执行自己匹配器下的请求集合）*/\n    protected async pollAllReqs(): Promise<void> {\n        //处理一遍超时的\n        await this.pollProcTimeoutReqs();\n\n        if (this.allMatcherReqs.size > 0) {\n            for (let [matcherKey, matcherReqs] of this.allMatcherReqs) {\n                let matcher = this.matchers.get(matcherKey);\n                if (!matcher || matcherReqs.length <= 0) continue;\n                logger.log('AppMatchRequestMgr', `pollAllReqs: ${matcher.matcherKey},matcherReqsCount:${matcherReqs.length}`);\n                let result = matcher.onPollMatcherReqs(matcherReqs.slice());\n                await this.procMatcherExecResult(result, matcherReqs);\n            }\n        }\n        //重新开始定时轮询\n        this.startPollAllReqs();\n    }\n\n    /**新匹配请求添加进本管理器*/\n    protected async addNewMatchReq(matchReq: IMatchRequest): Promise<MatcherRequests> {\n        //更新请求相关字段\n        matchReq.startMatchTime = Date.now();\n        //添加到所有请求集合中\n        this.allReqs.set(matchReq.matchReqId, matchReq);\n        //添加到同匹配器下的请求集合中\n        let matcherAllReqs = this.allMatcherReqs.get(matchReq.matcherKey);\n        if (!matcherAllReqs) {\n            matcherAllReqs = new MatcherRequests(matchReq.matcherKey);\n            this.allMatcherReqs.set(matcherAllReqs.matcherKey, matcherAllReqs);\n        }\n        matcherAllReqs.push(matchReq);\n\n        if (matchReq.matchFromType === EMatchFromType.RoomJoinUs) {\n            //如果是房间招人匹配,特殊处理一下\n            let existsJoinUsReq = this.roomJoinUsReq.get(matchReq.matchFromInfo.roomId);\n            if (existsJoinUsReq) {\n                //居然存在同房间还有其他的招人匹配!正常不应该,但出现了就设置为失败\n                await this.faildMatchRequest(existsJoinUsReq, `被其他房间招人匹配覆盖！`, ErrorCodes.MatchRequestCancelled, matcherAllReqs);\n            }\n            //放在房间招人字典里,统一管理\n            this.roomJoinUsReq.set(matchReq.matchFromInfo.roomId, matchReq);\n        }\n\n        return matcherAllReqs;\n    }\n\n    protected stopPollProcTimeoutReqs() {\n        if (this.pollProcTimeoutMatchReqHd) clearTimeout(this.pollProcTimeoutMatchReqHd);\n        this.pollProcTimeoutMatchReqHd = null;\n    }\n    protected startPollProcTimeoutReqs() {\n        this.stopPollProcTimeoutReqs();\n        this.pollProcTimeoutMatchReqHd = setTimeout(async () => await this.pollProcTimeoutReqs(), 1000);\n    }\n    /**处理超时的匹配(设置结果并移出管理)*/\n    protected async pollProcTimeoutReqs(): Promise<void> {\n        if (this.allMatcherReqs.size > 0) {\n            let now = Date.now();\n            let timeoutReqIds: IMatchRequest[] = [];\n            for (let matcherKey of this.allMatcherReqs.keys()) {\n                let matcherReqs = this.allMatcherReqs.get(matcherKey);\n                let matcher = this.matchers.get(matcherKey);\n                if (!matcher || !matcherReqs || matcherReqs.length <= 0) continue;\n                for (let i = 0; i < matcherReqs.length; i++) {\n                    let req = matcherReqs[i];\n                    if (!req.matchTimeoutSec) continue;\n                    if (req.startMatchTime + req.matchTimeoutSec * 1000 < now) {\n                        //这个请求已经超时\n                        timeoutReqIds.push(req);\n                    }\n                }\n            }\n            if (timeoutReqIds.length > 0) {\n                await this.faildMatchRequests(timeoutReqIds, '匹配超时！', ErrorCodes.MatchTimeout);\n            }\n        }\n\n        //重新开始定时轮询\n        this.startPollProcTimeoutReqs();\n    }\n\n    /**当收到新匹配请求的处理*/\n    protected async onNewAppMatchProc(matchProc: IMatchProc) {\n        if (matchProc.procType === EMatchProcType.RequestMatch) {\n            //收到新的匹配请求\n            return await this.onNewAppMatchReq(matchProc.matchReqId);\n        } else if (matchProc.procType === EMatchProcType.CancelMatch) {\n            //收到取消匹配操作\n            return await this.onCancelMatchReq(matchProc.matchReqId);\n        }\n    }\n    protected async onNewAppMatchReq(matchReqId: string) {\n        let matchReq = await this.reqHelper.getMatchRequest(this.appId, matchReqId);\n        if (!matchReq) {\n            //全局请求数据已经被删除,则忽略\n            logger.warn('AppMatchRequestMgr', '匹配请求已经被删除!', this.appId, matchReqId);\n            return;\n        }\n        let matcher = this.matchers.get(matchReq.matcherKey);\n        if (!matcher) {\n            //没实现的匹配器,设置匹配失败结果\n            return await this.faildMatchRequest(matchReq, `没有对应的匹配器实现${matchReq.matcherKey}`, ErrorCodes.MatchMatcherNotFound);\n        }\n        if (matchReq.matchFromType === EMatchFromType.RoomJoinUs) {\n            //如果是房间招人匹配, 则需要提交房间id\n            if (!matchReq.matchFromInfo.roomId) {\n                return await this.faildMatchRequest(matchReq, `matchFromInfo.roomId不能为空！`, ErrorCodes.ParamsError);\n            }\n        }\n\n        //验证都通过了,加入匹配请求!\n        let matcherAllReqs = await this.addNewMatchReq(matchReq);\n\n        //停止定时轮询\n        this.stopPollReqs();\n\n        //匹配器执行得到结果\n        logger.log('AppMatchRequestMgr', `onNewMatchReq:${matcher.matcherKey},matcherReqsCount:${matcherAllReqs.length}`);\n        let ret = matcher.onNewMatchReq(matchReq, matcherAllReqs.slice());\n        await this.procMatcherExecResult(ret, matcherAllReqs, matchReq);\n\n        //重新开始定时轮询\n        this.startPollAllReqs();\n\n    }\n    protected async onCancelMatchReq(matchReqId: string) {\n        let matchReq: IMatchRequest | undefined | null = this.allReqs.get(matchReqId);\n        if (!matchReq) {\n            //如果不在本地，则尝试读取redis中的\n            matchReq = await this.reqHelper.getMatchRequest(this.appId, matchReqId);\n            if (!matchReq) {\n                //还是没有，则忽略掉，当作已经完成取消！\n                return;\n            }\n        }\n        let matcherReqs = this.allMatcherReqs.get(matchReq.matcherKey);\n        if (!matcherReqs) {\n            matcherReqs = new MatcherRequests(matchReq.matcherKey);\n            this.allMatcherReqs.set(matcherReqs.matcherKey, matcherReqs);\n        }\n\n        let result = Result.buildErr<IMatchResult>('请求被取消', ErrorCodes.MatchRequestCancelled);\n        this.setMatchRequestResult(matchReq, result, matcherReqs);\n    }\n\n\n\n    /**\n     * 处理匹配器执行结果\n     *\n     * @protected\n     * @param result\n     * @param matcherAllReqs 匹配器下的所有匹配请求, 只有在新的匹配请求且没对应匹配器时，才没得传！\n     * @param currReq 针对单个匹配请求触发时\n     * @returns\n     */\n    protected async procMatcherExecResult(result: IMatcherExecResult, matcherAllReqs?: MatcherRequests, currReq?: IMatchRequest): Promise<void> {\n        if (result.resultErrCode || result.resultErrMsg) {\n            result.resultErrMsg = result.resultErrMsg ?? '匹配失败';\n            result.resultErrCode = result.resultErrCode ?? ErrorCodes.MatchUnknown;\n            //有错误，并且有指定请求，才设置当前请求为失败\n            if (currReq) {\n                this.faildMatchRequest(currReq, result.resultErrMsg, result.resultErrCode);\n                return;\n            }\n            if (matcherAllReqs) {\n                for (let req of matcherAllReqs) {\n                    this.faildMatchRequest(req, result.resultErrMsg, result.resultErrCode);\n                }\n                return;\n            }\n            return;\n        }\n        if (!result.hasResult) {\n            //没结果直接返回\n            return;\n        }\n\n        if (!matcherAllReqs) {\n            //正常这里要传当前匹配器下的所有请求,如果没有\n            logger.error(`AppMatchRequestMgr.procMatcherExecResult 都有结果了，还没传匹配器下所有匹配请求！`);\n            return;\n        }\n\n        if (result.resultCreateRoom) {\n            //匹配结果有创建房间\n            for (let createRoomResult of result.resultCreateRoom) {\n                if (createRoomResult.matchRequestPlayerResults.length <= 0) continue;\n                let createRoomRet = await this.gameClusterTerminal.createRoom(\n                    this.appId, createRoomResult.createRoomPara, ERoomCreateType.MATCH_CREATE);\n                if (!createRoomRet.succ) {\n                    createRoomResult.matchRequestPlayerResults.forEach(async reqPlayerResult => {\n                        let req = matcherAllReqs.find(r => r.matchReqId === reqPlayerResult.matchReqId);\n                        if (!req) return;\n                        await this.faildMatchRequest(req, createRoomRet.err!, createRoomRet.code);\n                    });\n                    return;\n                }\n\n                let roomOnlineInfo = createRoomRet.data;\n\n                let matchTeamsPlayerIds: ITeamPlayerIds[] = [];\n                let firstReq!: IMatchRequest;\n                //分派请求结果, 同时匹配结果的玩家信息转成队伍玩家的结构\n                for (let reqPlayerResult of createRoomResult.matchRequestPlayerResults) {\n                    let req = matcherAllReqs.find(r => r.matchReqId === reqPlayerResult.matchReqId);\n                    if (!req) continue;\n                    if (!firstReq) firstReq = req;\n\n                    for (let playerRet of reqPlayerResult.matchPlayerResults) {\n                        teamPlayerIdsAddSingle(matchTeamsPlayerIds, playerRet.playerId, playerRet.teamId);\n                    }\n                    let matchResult: IMatchResult = {\n                        roomId: roomOnlineInfo.roomId,\n                        gameServerUrl: roomOnlineInfo.gameServerUrl,\n                        matchPlayerResults: reqPlayerResult.matchPlayerResults,\n                    };\n                    await this.succMatchRequest(req, matchResult, matcherAllReqs);\n                }\n\n                if (createRoomResult.roomJoinUsMatch) {\n                    //创建好的房间,如果还需要继续招人匹配\n                    //则构建匹配请求数据,并加入本管理(将在下个轮询或者下个新匹配时触发)\n                    let useReq = firstReq;\n                    let roomJoinUsReq =\n                        buildRoomJoinUsMatchRequest(useReq, roomOnlineInfo.roomId, matchTeamsPlayerIds);\n                    await this.addNewMatchReq(roomJoinUsReq);\n                }\n            }\n        }\n\n        if (result.resultJoinRoom) {\n            //匹配结果有加入房间\n            for (let joinRoomResult of result.resultJoinRoom) {\n                //找到要加入的房间的注册信息\n                let getRoomOLInfo = await this.gameClusterTerminal.getRoomOnlineInfo(joinRoomResult.joinRoomId);\n                if (!getRoomOLInfo.succ) {\n                    joinRoomResult.matchRequestPlayerResults.forEach(async reqPlayerResult => {\n                        let req = matcherAllReqs.find(r => r.matchReqId === reqPlayerResult.matchReqId);\n                        if (!req) return;\n                        //房间已经被解散, 但因为对玩家来说是加入一个现有房间, 所以还是返回服务器爆满\n                        await this.faildMatchRequest(req, getRoomOLInfo.err!, getRoomOLInfo.code);\n                    });\n                    return;\n                }\n                //要追加到房间的队伍玩家列表\n                let matchTeamsPlayerIds: ITeamPlayerIds[] = [];\n\n                //分派请求结果, 同时匹配结果的玩家信息转成队伍玩家的结构\n                for (let reqPlayerResult of joinRoomResult.matchRequestPlayerResults) {\n                    let req = matcherAllReqs.find(r => r.matchReqId === reqPlayerResult.matchReqId);\n                    if (!req) continue;\n                    for (let playerRet of reqPlayerResult.matchPlayerResults) {\n                        teamPlayerIdsAddSingle(matchTeamsPlayerIds, playerRet.playerId, playerRet.teamId);\n                    }\n                    let matchResult: IMatchResult = {\n                        roomId: joinRoomResult.joinRoomId,\n                        gameServerUrl: getRoomOLInfo.data.gameServerUrl,\n                        matchPlayerResults: reqPlayerResult.matchPlayerResults,\n                    };\n                    await this.succMatchRequest(req, matchResult, matcherAllReqs);\n                }\n\n                let roomJoinUsMatch = this.roomJoinUsReq.get(joinRoomResult.joinRoomId);\n                if (roomJoinUsMatch) {\n                    //这个房间存在招人匹配,则需要额外处理\n                    let fromInfo = roomJoinUsMatch.matchFromInfo as IMatchFromRoomJoinUsOnServer;\n                    //将结果中增加的匹配玩家,追加到这个房间的队伍玩家数据中\n                    teamPlayerIdsAdd(fromInfo.teamsPlayerIds, matchTeamsPlayerIds);\n                    if (!joinRoomResult.roomJoinUsMatch) {\n                        //加入的房间,要求停止招人匹配,执行清除数据\n                        this.removeMatchRequestAndResult(roomJoinUsMatch);\n                    }\n                }\n            }\n        }\n\n    }\n\n    /**\n     * 设置匹配请求结果,并移除本地数据\n     *\n     * @protected\n     * @param matchReq\n     * @param result\n     * @param matcherAllReqs 如果有获取好的匹配器所有请求,则传入\n     * @returns\n     */\n    protected async setMatchRequestResult(matchReq: IMatchRequest, result: IResult<IMatchResult>, matcherAllReqs?: IMatchRequest[]): Promise<boolean> {\n        if (!matcherAllReqs) {\n            matcherAllReqs = this.allMatcherReqs.get(matchReq.matcherKey);\n        }\n        if (matcherAllReqs) {\n            //匹配器请求中移除\n            arrRemoveItems(matcherAllReqs, r => r.matchReqId === matchReq.matchReqId);\n        }\n        //从所有请求中移除\n        this.allReqs.delete(matchReq.matchReqId);\n        //如果是房间招人的匹配,则同步删除房间招人匹配列表\n        if (matchReq.matchFromType === EMatchFromType.RoomJoinUs) {\n            this.roomJoinUsReq.delete(matchReq.matchFromInfo.roomId);\n        }\n        //设置redis中的匹配结果\n        return await this.reqHelper.setMatchRequestResult(this.appId, matchReq, result);\n    }\n\n    /**\n     * 移除匹配请求数据(本地和redis), 只有在不需要结果的情况下,才直接删除(比如已经拿到结果 或者 系统类型取消如房间招人匹配)\n     *\n     * @protected\n     * @param matchReq\n     * @param matcherAllReqs 如果有获取好的匹配器所有请求,则传入\n     * @returns\n     */\n    protected async removeMatchRequestAndResult(matchReq: IMatchRequest, matcherAllReqs?: IMatchRequest[]): Promise<void> {\n        if (!matcherAllReqs) {\n            matcherAllReqs = this.allMatcherReqs.get(matchReq.matcherKey);\n        }\n        if (matcherAllReqs) {\n            //匹配器请求中移除\n            arrRemoveItems(matcherAllReqs, r => r.matchReqId === matchReq.matchReqId);\n        }\n        //从所有请求中移除\n        this.allReqs.delete(matchReq.matchReqId);\n        //如果是房间招人的匹配,则同步删除房间招人匹配列表\n        if (matchReq.matchFromType === EMatchFromType.RoomJoinUs) {\n            this.roomJoinUsReq.delete(matchReq.matchFromInfo.roomId);\n        }\n        //删除redis中的数据\n        return await this.reqHelper.removeMatchRequestAndResult(this.appId, matchReq.matchReqId);\n    }\n\n    /**\n     * 设置匹配请求为失败\n     *\n     * @public\n     * @param matchReq\n     * @param errMsg\n     * @param errCode 错误码请看 IMatcherExecResult 的注释\n     * @param matcherAllReqs 如果有获取好的匹配器所有请求,则传入\n     * @returns\n     */\n    public async faildMatchRequest(matchReq: IMatchRequest, errMsg: string, errCode: number, matcherAllReqs?: IMatchRequest[]): Promise<void> {\n        await this.setMatchRequestResult(matchReq, Result.buildErr(errMsg, errCode), matcherAllReqs);\n    }\n    /**\n     * 设置多个匹配请求为失败\n     *\n     * @public\n     * @param matcherReqs\n     * @param errMsg\n     * @param errCode 错误码请看 IMatcherExecResult 的注释\n     * @param matcherAllReqs 如果有获取好的匹配器所有请求,则传入\n     * @returns\n     */\n    public async faildMatchRequests(matcherReqs: Array<IMatchRequest>, errMsg: string, errCode: number, matcherAllReqs?: IMatchRequest[]): Promise<void> {\n        for (let req of matcherReqs) {\n            await this.setMatchRequestResult(req, Result.buildErr(errMsg, errCode), matcherAllReqs);\n        }\n    }\n    /**\n     * 设置匹配请求为成功\n     *\n     * @public\n     * @param matchReq\n     * @param result\n     * @param matcherAllReqs 如果有获取好的匹配器所有请求,则传入\n     * @returns\n     */\n    public async succMatchRequest(matchReq: IMatchRequest, result: IMatchResult, matcherAllReqs?: IMatchRequest[]): Promise<void> {\n        await this.setMatchRequestResult(matchReq, Result.buildSucc(result), matcherAllReqs);\n    }\n    /**\n     * 设置多个匹配请求为成功\n     *\n     * @public\n     * @param matcherReqs\n     * @param result\n     * @param matcherAllReqs 如果有获取好的匹配器所有请求,则传入\n     * @returns\n     */\n    public async succMatchRequests(matcherReqs: Array<IMatchRequest>, result: IMatchResult, matcherAllReqs?: IMatchRequest[]): Promise<void> {\n        for (let req of matcherReqs) {\n            await this.setMatchRequestResult(req, Result.buildSucc(result), matcherAllReqs);\n        }\n    }\n}"]}