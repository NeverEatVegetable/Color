{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgf/logger.ts"],"names":["formatObj","obj","stack","JSON","stringify","objArrJoin","arr","str","sp","i","length","logger","ignoreKeys","debug","log","args","find","a","indexOf","k","console","Date","toLocaleString","warn","error"],"mappings":";;;;;AACA,WAASA,SAAT,CAAmBC,GAAnB,EAA6B;AACzB,QAAIA,GAAG,CAACC,KAAR,EAAe;AACX,aAAOD,GAAG,CAACC,KAAX;AACH,KAFD,MAEO,IAAI,OAAQD,GAAR,KAAiB,QAArB,EAA+B;AAClC,aAAOE,IAAI,CAACC,SAAL,CAAeH,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAP;AACH;;AACD,WAAOA,GAAP;AACH;;AACD,WAASI,UAAT,CAAoBC,GAApB,EAAgC;AAC5B,QAAIC,GAAG,GAAG,EAAV;AAAA,QAAcC,EAAE,GAAG,EAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACjCF,MAAAA,GAAG,IAAIC,EAAP;AACAD,MAAAA,GAAG,IAAIP,SAAS,CAACM,GAAG,CAACG,CAAD,CAAJ,CAAhB;AACAD,MAAAA,EAAE,GAAG,IAAL;AACH;;AACD,WAAOD,GAAP;AACH;;;;;;;;;;;wBAEYI,M,GAAS;AAClBC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,qBAAd,EAAqC,UAArC,EAAiD,aAAjD,EAAgE,WAAhE,CADM;;AAElBC,QAAAA,KAAK,GAAiB,CAClB;AACH,SAJiB;;AAKlBC,QAAAA,GAAG,GAAiB;AAAA,4CAAbC,IAAa;AAAbA,YAAAA,IAAa;AAAA;;AAChB,cAAI,CAACA,IAAD,IAASA,IAAI,CAACL,MAAL,IAAe,CAA5B,EAA+B,OADf,CAEhB;;AACA,cACIK,IAAI,CAACC,IAAL,CAAUC,CAAC,IAAIA,CAAC,IAAIA,CAAC,CAACC,OAAP,IAAkB,KAAKN,UAAL,CAAgBI,IAAhB,CAAqBG,CAAC,IAAIF,CAAC,CAACC,OAAF,CAAUC,CAAV,IAAe,CAAC,CAA1C,CAAjC,CADJ,EAEE;AACE;AACA;AACH;;AACDC,UAAAA,OAAO,CAACN,GAAR,CAAY,IAAIO,IAAJ,GAAWC,cAAX,KAA8B,GAA9B,GAAoCjB,UAAU,CAACU,IAAD,CAA1D,EATgB,CAUhB;AACH,SAhBiB;;AAiBlBQ,QAAAA,IAAI,GAAiB;AAAA,6CAAbR,IAAa;AAAbA,YAAAA,IAAa;AAAA;;AACjB,cAAI,CAACA,IAAD,IAASA,IAAI,CAACL,MAAL,IAAe,CAA5B,EAA+B;AAC/BU,UAAAA,OAAO,CAACG,IAAR,CAAa,IAAIF,IAAJ,GAAWC,cAAX,KAA8B,GAA9B,GAAoCjB,UAAU,CAACU,IAAD,CAA3D,EAFiB,CAGjB;AACH,SArBiB;;AAsBlBS,QAAAA,KAAK,GAAiB;AAAA,6CAAbT,IAAa;AAAbA,YAAAA,IAAa;AAAA;;AAClB,cAAI,CAACA,IAAD,IAASA,IAAI,CAACL,MAAL,IAAe,CAA5B,EAA+B;AAC/BU,UAAAA,OAAO,CAACI,KAAR,CAAc,IAAIH,IAAJ,GAAWC,cAAX,KAA8B,GAA9B,GAAoCjB,UAAU,CAACU,IAAD,CAA5D,EAFkB,CAGlB;AACH;;AA1BiB,O","sourcesContent":["\nfunction formatObj(obj: any) {\n    if (obj.stack) {\n        return obj.stack;\n    } else if (typeof (obj) === 'object') {\n        return JSON.stringify(obj, null, 4);\n    }\n    return obj;\n}\nfunction objArrJoin(arr: any[]) {\n    let str = \"\", sp = \"\";\n    for (let i = 0; i < arr.length; i++) {\n        str += sp;\n        str += formatObj(arr[i]);\n        sp = \"\\n\";\n    }\n    return str\n}\n\nexport const logger = {\n    ignoreKeys: [\"SyncFrame\", \"ClusterSyncNodeInfo\", \"InpFrame\", \"AfterFrames\", \"SyncState\"],\n    debug(...args: any[]) {\n        // 什么也不做，相当于隐藏了日志\n    },\n    log(...args: any[]) {\n        if (!args || args.length <= 0) return;\n        // 让日志仍然输出到控制台\n        if (\n            args.find(a => a && a.indexOf && this.ignoreKeys.find(k => a.indexOf(k) > -1))\n        ) {\n            //有忽略的关键字，跳过\n            return;\n        }\n        console.log(new Date().toLocaleString() + \"|\" + objArrJoin(args));\n        //console.log(...args);\n    },\n    warn(...args: any[]) {\n        if (!args || args.length <= 0) return;\n        console.warn(new Date().toLocaleString() + \"|\" + objArrJoin(args));\n        //console.warn(...args);\n    },\n    error(...args: any[]) {\n        if (!args || args.length <= 0) return;\n        console.error(new Date().toLocaleString() + \"|\" + objArrJoin(args));\n        //console.error(...args);\n    },\n}"]}