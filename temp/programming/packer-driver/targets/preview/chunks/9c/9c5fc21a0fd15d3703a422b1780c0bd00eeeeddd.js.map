{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/matchServerCluster/MatchServerClusterMgr.ts"],"names":["MatchServerClusterMgr","ClusterMgr","SimpleAppHelper","Result","arrWinner","matchClusterServiceProto","serviceProto","constructor","getNodesCfg","getTerminalCfg","serverOption","getRedisClient","getAppCancel","initAppsRunning","unassignedApps","apps","Map","servers","onNodeConnected","node","onMatchServerConnected","onNodeDisconnected","nodeId","onMatchServerDisconnected","start","initApps","stop","cancel","set","nodeInfo","clusterNodeId","serverNode","procAllUnassignedApp","disconnectedServer","get","delete","forEach","app","appId","push","selectAll","allAppRet","waitResult","err","server","logger","error","clear","data","uApp","shift","ret","appAssignServer","succ","getLeastAppsServer","minKV","values","winner","item","size","appAS","appCancelAssignServer","buildErr","serverNodeId","assignTask","cancelTask"],"mappings":"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","sourcesContent":["\nimport { ClusterMgr, IClusterNode } from \"../shared/tsgfServer/cluster/ClusterMgr\";\nimport { WsServerOptions } from \"tsrpc\";\nimport { GetRedisClient, IRedisClient } from \"../shared/tsgfServer/redisHelper\";\nimport { IApp } from \"../shared/tsgfServerEDB/Models\";\nimport { SimpleAppHelper } from \"../shared/tsgfServerEDB/BLL\";\nimport { ICancelableExec } from \"../shared/tsgf/ICancelable\";\nimport { IResult, Result } from \"../shared/tsgf/Result\";\nimport { IMatchServerInfo } from \"../shared/tsgfServer/match/IMatchServerInfo\";\nimport { arrWinner } from \"../shared/tsgf/Utils\";\nimport { IClusterNodeCfg, IClusterTerminalCfg } from \"../ServerConfig\";\nimport { ServiceType as MatchClusterServiceType, serviceProto as matchClusterServiceProto } from \"../shared/tsgfServer/matchCluster/protocols/serviceProto\";\n\n/**应用信息以及分配到哪个服务器处理*/\ninterface AppAssignServer {\n    app: IApp;\n    serverNodeId: string;\n}\n/**服务器信息以及下面都有哪些应用*/\ninterface ServerApps {\n    serverNode: IClusterNode<IMatchServerInfo>;\n    apps: Map<string, IApp>;\n}\n\n\n/**匹配服务器管理节点， 依赖redis，mysql*/\nexport class MatchServerClusterMgr extends ClusterMgr<MatchClusterServiceType, IMatchServerInfo>{\n\n    protected getAppCancel: ICancelableExec<IApp[]> | null = null;\n    protected initAppsRunning = false;\n    /**未分配服务器的应用*/\n    protected unassignedApps: IApp[] = [];\n    /**已经分配好服务器的应用*/\n    protected apps: Map<string, AppAssignServer> = new Map<string, AppAssignServer>();\n    /**当前接入的匹配服务器，以及所负责的应用列表*/\n    protected servers: Map<string, ServerApps> = new Map<string, ServerApps>();\n\n    constructor(\n        getNodesCfg: () => Promise<IClusterNodeCfg[]>,\n        getTerminalCfg: () => Promise<IClusterTerminalCfg[] | undefined>,\n        serverOption: Partial<WsServerOptions<MatchClusterServiceType>>,\n        getRedisClient: GetRedisClient) {\n        super(matchClusterServiceProto, \"MatchServer\", getNodesCfg, getTerminalCfg, serverOption, getRedisClient);\n\n        this.onNodeConnected = (node) => {\n            this.onMatchServerConnected(node);\n        };\n        this.onNodeDisconnected = (nodeId) => {\n            this.onMatchServerDisconnected(nodeId);\n        };\n    }\n\n    public override async start(): Promise<void> {\n        await super.start();\n        //启动应用初始化\n        this.initAppsRunning = true;\n        this.initApps();//不用await，让他异步开始执行\n    }\n    public override async stop(): Promise<void> {\n        await super.stop();\n\n        //中止应用初始化\n        this.initAppsRunning = false;\n        await this.getAppCancel?.cancel();\n        this.getAppCancel = null;\n    }\n\n    private async onMatchServerConnected(node: IClusterNode<IMatchServerInfo>) {\n        //新匹配服务器连上来，加入服务列表\n        this.servers.set(node.nodeInfo.clusterNodeId, {\n            serverNode: node,\n            apps: new Map<string, IApp>(),\n        });\n        //开始异步处理所有未分配的应用\n        this.procAllUnassignedApp();\n    }\n    private async onMatchServerDisconnected(nodeId: string) {\n        //匹配服务器断开, 需要将原本负责的应用转移到其他服务器\n        let disconnectedServer = this.servers.get(nodeId);\n        //移除服务列表\n        this.servers.delete(nodeId);\n        if (disconnectedServer) {\n            //该服务下所有应用转到未分配应用之下\n            disconnectedServer.apps.forEach(app => {\n                this.apps.delete(app.appId);\n                this.unassignedApps.push(app);\n            });\n        }\n        //开始异步处理所有未分配的应用\n        this.procAllUnassignedApp();\n\n    }\n\n    private async initApps(): Promise<boolean> {\n        if (!this.initAppsRunning) return false;\n        //this.getAppCancel = AppBLL.Ins.selectAll();\n        this.getAppCancel = SimpleAppHelper.selectAll();\n        let allAppRet = await this.getAppCancel.waitResult();\n        if (!this.initAppsRunning) return false;\n\n        if (allAppRet.err) {\n            this.server.logger.error(\"获取所有应用失败：\", allAppRet.err, \"服务即将停止！\");\n            await this.stop();\n            return false;\n        }\n\n        this.apps.clear();\n        this.servers.clear();\n        this.unassignedApps.push(...allAppRet.data!);\n        await this.procAllUnassignedApp();\n        return true;\n    }\n\n    private async procAllUnassignedApp() {\n        let uApp;\n        while (uApp = this.unassignedApps.shift()) {\n            let ret = await this.appAssignServer(uApp);\n            if (!ret.succ) {\n                //没分配成功，推入未分配，中断\n                this.unassignedApps.push(uApp);\n                break;\n            }\n        }\n    }\n\n    private getLeastAppsServer(): ServerApps | null {\n        /*\n        let minKV: ServerApps | null = null;\n        this.servers.forEach((server) => {\n            if (!minKV || minKV.apps.size > server.apps.size) minKV = server;\n        });\n        */\n        let minKV = arrWinner(this.servers.values(),\n            (winner, item) => winner.apps.size > item.apps.size ? item : winner);\n        return minKV;\n    }\n    private async appAssignServer(app: IApp): Promise<IResult<null>> {\n        //如果已经分配过，则取消一下\n        let appAS = this.apps.get(app.appId);\n        if (appAS) {\n            //如果已经分配，则取消一下(一般可能出现在转移上面)\n            await this.appCancelAssignServer(appAS);\n        }\n        //现在的分配规则：负责应用少的服务器优先分配\n        let server = this.getLeastAppsServer();\n        if (!server) {\n            return Result.buildErr('不存在匹配服务器！无法分配！');\n        }\n        server.apps.set(app.appId, app);\n        this.apps.set(app.appId, {\n            app: app,\n            serverNodeId: server.serverNode.nodeInfo.clusterNodeId,\n        });\n        return await this.assignTask(server.serverNode.nodeInfo.clusterNodeId, app.appId, app);\n    }\n    private async appCancelAssignServer(appAS: AppAssignServer): Promise<IResult<null>> {\n        //不管是否成功，都删除掉\n        this.apps.delete(appAS.app.appId);\n\n        let server = this.servers.get(appAS.serverNodeId);\n        if (!server) {\n            //之前分配的服务器,已经下线,直接返回失败\n            return Result.buildErr('之前分配的服务器已经离线');\n        }\n        //不管是否成功，都删除掉\n        server.apps.delete(appAS.app.appId);\n\n        return await this.cancelTask(server.serverNode.nodeInfo.clusterNodeId, appAS.app.appId);\n    }\n\n}"]}