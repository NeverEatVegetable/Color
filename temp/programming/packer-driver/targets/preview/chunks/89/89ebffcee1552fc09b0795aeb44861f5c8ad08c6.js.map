{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/matchServer/MatchServer.ts"],"names":["MatchServer","AppMatchRequestHandler","logger","ErrorCodes","ClusterNodeClient","MatcherSingle","MatchRequestHelper","RoomHelper","EClusterClientType","matchClusterServiceProto","serviceProto","GameClusterTerminal","constructor","getRedisClient","matchServerCfg","clusterWSUrl","Node","clusterNodeId","clusterKey","Promise","resolve","serverId","matchAppCount","appMatchRequestMgrs","size","matchRequestHelper","Map","roomRegChangedCancel","gameClusterTerminal","onNewAppMatchTask","onCancelAppMatchTask","onAssignTask","taskId","taskData","appId","data","mgr","get","set","matchers","clear","matcher","matcherKey","call","onCancelTask","reqs","allMatcherReqs","values","faildMatchRequests","MatchRequestCancelled","gameClusterServerUrl","gameClusterTerminalId","gameClusterTerminalKey","start","startListenRoomRegInfoChanged","changedInfo","regInfo","roomRegInfoChanged","joinErr","joinCluster","error","stop","log","cancel","disconnectCluster"],"mappings":"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","sourcesContent":["import { AppMatchRequestHandler } from \"../shared/tsgfServer/match/AppMatchRequestHandler\";\nimport { ICancelable } from \"../shared/tsgf/ICancelable\";\nimport { logger } from \"../shared/tsgf/logger\";\nimport { ErrorCodes } from \"../shared/tsgf/Result\";\nimport { ClusterNodeClient } from \"../shared/tsgfServer/cluster/ClusterNodeClient\";\nimport { GameServerHelper } from \"../shared/tsgfServer/game/GameServerHelper\";\nimport { IAppMatchTaskData } from \"../shared/tsgfServer/match/IAppMatchTaskData\";\nimport { IMatchServerInfo } from \"../shared/tsgfServer/match/IMatchServerInfo\";\nimport { MatcherSingle } from \"../shared/tsgfServer/match/MatcherSingle\";\nimport { MatchRequestHelper } from \"../shared/tsgfServer/match/MatchRequestHelper\";\nimport { GetRedisClient } from \"../shared/tsgfServer/redisHelper\";\nimport { RoomHelper } from \"../shared/tsgfServer/room/RoomHelper\";\nimport { EClusterClientType } from \"../shared/tsgfServer/cluster/Models\";\nimport { ServiceType as MatchClusterServiceType, serviceProto as matchClusterServiceProto } from \"../shared/tsgfServer/matchCluster/protocols/serviceProto\";\nimport { GameClusterTerminal } from \"../shared/tsgfServer/gameCluster/GameClusterTerminal\";\nimport { IMatchServerCfg } from \"../ServerConfig\";\n\n/**匹配服务器, 由匹配集群分配负责匹配的应用, 具体由应用匹配请求处理器负责处理*/\nexport class MatchServer extends ClusterNodeClient<MatchClusterServiceType, IMatchServerInfo> {\n\n    // 公共的匹配请求工具实例\n    public matchRequestHelper: MatchRequestHelper;\n    // 所有分配到本服务实例处理的应用下匹配请求处理器\n    public appMatchRequestMgrs: Map<string, AppMatchRequestHandler> = new Map<string, AppMatchRequestHandler>();\n    public getRedisClient: GetRedisClient;\n    protected roomRegChangedCancel?: ICancelable;\n    public gameClusterTerminal: GameClusterTerminal;\n\n    /**有新的应用匹配任务被接受后触发*/\n    public onNewAppMatchTask?: (appId: string, mgr: AppMatchRequestHandler) => void;\n    /**应用匹配任务被取消后触发*/\n    public onCancelAppMatchTask?: (appId: string, mgr: AppMatchRequestHandler) => void;\n\n    //clusterServerUrl: string, serverNodeId: string, clusterKey: string, getRedisClient: GetRedisClient\n    constructor(\n        getRedisClient: GetRedisClient,\n        matchServerCfg: IMatchServerCfg\n        //,getMatchServerCfg: () => Promise<IMatchServerCfg>\n    ) {\n\n        super(matchClusterServiceProto, matchServerCfg.clusterWSUrl, EClusterClientType.Node, matchServerCfg.clusterNodeId, matchServerCfg.clusterKey, async () => {\n            return Promise.resolve({\n                serverId: matchServerCfg.clusterNodeId,\n                matchAppCount: this.appMatchRequestMgrs.size\n            });\n        });\n\n        this.getRedisClient = getRedisClient;\n        this.matchRequestHelper = new MatchRequestHelper(this.getRedisClient);\n\n\n        //匹配服务的任务，就是负责处理应用的匹配，所以把应用ID当作任务ID使用\n        this.onAssignTask = (taskId, taskData) => {\n            let appId = taskId;\n            let data = taskData as IAppMatchTaskData;\n            let mgr = this.appMatchRequestMgrs.get(appId);\n            if (!mgr) {\n                mgr = new AppMatchRequestHandler(appId, this.matchRequestHelper, this.gameClusterTerminal);\n                this.appMatchRequestMgrs.set(appId, mgr);\n            }\n            mgr.matchers.clear();\n\n            //先加入内置匹配器\n            let matcher = new MatcherSingle();\n            mgr.matchers.set(matcher.matcherKey, matcher);\n\n            //再加入自定义匹配器\n            //TODO: 未实现自定义匹配器的传递方案/动态加载方案\n\n            this.onNewAppMatchTask?.call(this, appId, mgr);\n        };\n        this.onCancelTask = (taskId) => {\n            let appId = taskId;\n\n            let mgr = this.appMatchRequestMgrs.get(appId);\n            if (!mgr) return;\n\n            for (let reqs of mgr.allMatcherReqs.values()) {\n                mgr.faildMatchRequests(reqs, '匹配服务器调整，请再次匹配', ErrorCodes.MatchRequestCancelled);\n            }\n\n            this.onCancelAppMatchTask?.call(this, appId, mgr);\n\n        };\n\n        this.gameClusterTerminal = new GameClusterTerminal(\n            matchServerCfg.gameClusterServerUrl,\n            matchServerCfg.gameClusterTerminalId,\n            matchServerCfg.gameClusterTerminalKey);\n    }\n\n\n    public async start(): Promise<void> {\n        //订阅房间注册信息变更事件,更新到应用匹配管理下的房间注册信息缓存,方便匹配使用\n        this.roomRegChangedCancel = await RoomHelper.startListenRoomRegInfoChanged(changedInfo => {\n            let mgr = this.appMatchRequestMgrs.get(changedInfo.regInfo.appId);\n            if (!mgr) return;\n            mgr.roomRegInfoChanged(changedInfo);\n        });\n\n        let joinErr = await this.joinCluster();\n        if (joinErr) {\n            logger?.error(\"MatchServer: 加入集群服务器失败:\" + joinErr + '. 即将停止服务!');\n            await this.stop();\n            return;\n        } else {\n            logger?.log(\"MatchServer: 加入集群服务器成功!\");\n        }\n\n        joinErr = await this.gameClusterTerminal.joinCluster();\n        if (joinErr) {\n            logger?.error(\"MatchServer: 游戏集群终端连接失败:\" + joinErr + '. 即将停止服务!');\n            await this.stop();\n            return;\n        } else {\n            logger?.log(\"MatchServer: 游戏集群终端连接成功!\");\n        }\n    }\n\n    public async stop(): Promise<void> {\n        await this.roomRegChangedCancel?.cancel();\n        await this.disconnectCluster();\n    }\n}"]}