{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/gameServer/GameServer.ts"],"names":["GameServer","WsServer","GameConnMgr","path","v4","GameServiceProto","serviceProto","logger","GameServerAppRoomMgr","MatchRequestTerminal","GameClusterNodeClient","constructor","getRedisClient","currGameServerCfg","getGameServerCfg","server","gameConnMgr","roomMgr","matchReqTerminal","gameClusterClient","port","json","flows","preApiCallFlow","push","v","getGameServer","preMsgCallFlow","postConnectFlow","connectionId","connections","length","onAssignTask","taskId","taskData","roomId","procTaskDismissRoom","clusterNodeId","start","autoImplementApi","resolve","__dirname","log","joinErr","joinCluster","stop","disconnectCluster","dismissRoom","undefined"],"mappings":"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","sourcesContent":["\n\nimport { ApiCallWs, MsgCallWs, WsConnection, WsServer } from \"tsrpc\";\nimport { GameConnMgr } from \"./GameConnMgr\";\nimport * as path from \"path\";\nimport { v4 } from \"uuid\";\nimport { serviceProto as GameServiceProto, ServiceType as GameServiceType } from \"../shared/gameClient/protocols/serviceProto\";\nimport { GetRedisClient } from \"../shared/tsgfServer/redisHelper\";\nimport { logger } from \"../shared/tsgf/logger\";\nimport { GameServerAppRoomMgr } from \"./GameServerAppRoomMgr\";\nimport { MatchRequestTerminal } from \"../shared/tsgfServer/match/MatchRequestTerminal\";\nimport { IGameServerCfg } from \"../ServerConfig\";\nimport { GameServerHelper } from \"../shared/tsgfServer/game/GameServerHelper\";\nimport { IResult } from \"../shared/tsgf/Result\";\nimport { IRoomInfo } from \"../shared/tsgf/room/IRoomInfo\";\nimport { GameClusterNodeClient } from \"../shared/tsgfServer/gameCluster/GameClusterNodeClient\";\n\n/**\n * 游戏服务器API专用的ApiCall类型，可用于获取Game服务对象\n * @date 2022/4/26 - 16:21:57\n *\n * @typedef {GameApiCall}\n * @typeParam req\n * @typeParam res\n */\nexport type GameApiCall<req, res> = ApiCallWs<req, res, GameServiceType> & {\n    getGameServer: () => GameServer;\n};\n/**\n * 游戏服务器Msg专用的MsgCall类型，可用于获取Game服务对象\n * @date 2022/4/26 - 16:21:57\n *\n * @typedef {GameMsgCall}\n * @typeParam msg\n */\nexport type GameMsgCall<msg> = MsgCallWs<msg, GameServiceType> & {\n    getGameServer: () => GameServer;\n};\n\n/**游戏服务端的客户端连接*/\nexport type ClientConnection = WsConnection<GameServiceType>;\n\n/**游戏的websocket服务类型*/\nexport type GameWsServer = WsServer<GameServiceType>;\n\nexport class GameServer {\n\n    public server: WsServer<GameServiceType>;\n\n    private getRedisClient: GetRedisClient;\n    private getGameServerCfg: () => Promise<IGameServerCfg>;\n\n    public gameConnMgr: GameConnMgr;\n    public roomMgr: GameServerAppRoomMgr;\n\n    public matchReqTerminal: MatchRequestTerminal;\n    public gameClusterClient: GameClusterNodeClient;\n\n    constructor(\n        getRedisClient: GetRedisClient,\n        currGameServerCfg: IGameServerCfg,\n        getGameServerCfg: () => Promise<IGameServerCfg>\n    ) {\n        this.getRedisClient = getRedisClient;\n        this.getGameServerCfg = getGameServerCfg;\n\n        //固定值的使用 tmpGameServerCfg, 每次都获取配置的则用 this.getGameServerCfg()\n        this.server = new WsServer(GameServiceProto, {\n            port: currGameServerCfg.port,\n            json: false,\n            logger: logger,\n        });\n        //让Call能获取到本服务实例\n        this.server.flows.preApiCallFlow.push((v: GameApiCall<any, any>) => {\n            v.getGameServer = () => this;\n            return v;\n        });\n        this.server.flows.preMsgCallFlow.push((v: GameMsgCall<any>) => {\n            v.getGameServer = () => this;\n            return v;\n        });\n        //设置游戏服务连接ID\n        this.server.flows.postConnectFlow.push(async v => {\n            v.connectionId = v4();\n            return v;\n        });\n        \n        //集群\n        this.gameClusterClient = new GameClusterNodeClient(\n            currGameServerCfg, this.getGameServerCfg, () => this.server!.connections.length);\n        this.gameClusterClient.onAssignTask = (taskId, taskData) => {\n            switch (taskId) {\n                case 'DismissRoom':\n                    let roomId = taskData as string;\n                    this.procTaskDismissRoom(roomId);\n                    break;\n            }\n        };\n\n        //游戏服务器各管理模块启动\n        this.matchReqTerminal = new MatchRequestTerminal(this.getRedisClient, true);\n        this.gameConnMgr = new GameConnMgr(this.server, this.getGameServerCfg);\n        this.roomMgr = new GameServerAppRoomMgr(this.server, this.gameConnMgr, this.gameClusterClient, this.matchReqTerminal, currGameServerCfg.clusterNodeId);\n\n    }\n\n    public async start(): Promise<void> {\n        await this.server.autoImplementApi(path.resolve(__dirname, 'api'));\n        await this.server.start();\n        this.server.logger?.log(\"GameServer: 服务启动成功!\");\n\n        await this.matchReqTerminal.start();\n\n        let joinErr = await this.gameClusterClient.joinCluster();\n        if (joinErr) {\n            this.server.logger?.log(\"GameServer: 加入集群服务器失败:\" + joinErr + \". 即将停止服务!\");\n            await this.stop();\n            return;\n        } else {\n            this.server.logger?.log(\"GameServer: 加入集群服务器成功!\");\n        }\n    }\n\n    public async stop(): Promise<void> {\n        await this.gameClusterClient.disconnectCluster();\n        await this.matchReqTerminal.stop();\n        await this.server.stop();\n    }\n\n    private async procTaskDismissRoom(roomId: string): Promise<IResult<IRoomInfo>> {\n        return await this.roomMgr.dismissRoom(undefined, roomId);\n    }\n\n}"]}