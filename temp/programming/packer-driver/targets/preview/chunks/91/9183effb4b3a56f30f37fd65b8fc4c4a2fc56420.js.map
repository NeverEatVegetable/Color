{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/cluster/ClusterNodeClient.ts"],"names":["ClusterNodeClient","WsClient","logger","EClusterClientType","constructor","clusterServiceProto","clusterServerUrl","clientType","id","key","getNodeInfo","clusterCAutoReconnectHD","clusterClient","autoSyncInfoHD","allTasks","Map","onAssignTask","onCancelTask","server","json","flows","postDisconnectFlow","push","v","clearInterval","isManual","error","clearTimeout","setTimeout","reJoinCluster","listenMsg","msg","set","taskId","taskData","call","delete","joinCluster","Error","isConnected","connectRet","connect","isSucc","errMsg","req","Node","nodeId","clusterKey","nodeInfo","Terminal","terminalId","terminalKey","ret","callApi","err","message","setInterval","sendMsg","failReTry","log","disconnectCluster","disconnect"],"mappings":"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","sourcesContent":["\nimport { ServiceProto, WsClient } from \"tsrpc\";\nimport { logger } from \"../../tsgf/logger\";\nimport { ClusterServiceType, EClusterClientType, ReqClusterLogin } from \"./Models\";\n\n/**\n * 集群节点客户端\n * @date 2022/4/19 - 16:50:02\n *\n * @class ClusterNodeClient\n * @typedef {ClusterNodeClient}\n * @typeParam NodeInfo 节点信息的类型，可自定义\n */\nexport class ClusterNodeClient<ServiceType extends ClusterServiceType, NodeInfo extends any>{\n\n    public clientType: EClusterClientType;\n    private id?: string;\n    private key?: string;\n    private getNodeInfo?: () => Promise<NodeInfo>;\n\n    private clusterServerUrl: string;\n    private clusterCAutoReconnectHD: any;\n    public clusterClient?: WsClient<ServiceType>;\n    private autoSyncInfoHD: any = 0;\n\n    /**当前所有进行中的任务，任务ID=>任务数据*/\n    public allTasks: Map<string, any> = new Map<string, any>();\n    /**事件: 当接受了一个新任务(来自集群管理)*/\n    public onAssignTask?: (taskId: string, taskData: any) => void;\n    /**事件: 当取消了一个任务(来自集群管理)*/\n    public onCancelTask?: (taskId: string) => void;\n\n    constructor(clusterServiceProto: ServiceProto<ServiceType>, clusterServerUrl: string, clientType: EClusterClientType.Terminal, terminalId: string, terminalKey: string);\n    constructor(clusterServiceProto: ServiceProto<ServiceType>, clusterServerUrl: string, clientType: EClusterClientType.Node, nodeId: string, clusterKey: string, getNodeInfo: () => Promise<NodeInfo>);\n    constructor(clusterServiceProto: ServiceProto<ServiceType>, clusterServerUrl: string, clientType: EClusterClientType, id?: string, key?: string, getNodeInfo?: () => Promise<NodeInfo>) {\n        this.clusterServerUrl = clusterServerUrl;\n        this.clientType = clientType;\n        this.id = id;\n        this.key = key;\n        this.getNodeInfo = getNodeInfo;\n\n        this.clusterClient = new WsClient(clusterServiceProto, {\n            server: this.clusterServerUrl,\n            json: false,\n            logger: logger,\n        });\n        //断开操作\n        this.clusterClient.flows.postDisconnectFlow.push(v => {\n            //只要断开, 就清理自动同步定时器\n            if (this.autoSyncInfoHD) clearInterval(this.autoSyncInfoHD);\n            this.autoSyncInfoHD = 0;\n\n            if (!v.isManual) {\n                //如果非手动断开,则自动开始重连\n                logger.error('集群服务器-连接断开,等待2秒后自动重连');\n                clearTimeout(this.clusterCAutoReconnectHD);\n                this.clusterCAutoReconnectHD = setTimeout(() => this.reJoinCluster(true), 2000);\n            }\n\n            return v;\n        });\n\n        //监听各种需要的消息\n        this.clusterClient.listenMsg(\"AssignTask\", (msg) => {\n            this.allTasks.set(msg.taskId, msg.taskData);\n            this.onAssignTask?.call(this, msg.taskId, msg.taskData);\n        });\n        this.clusterClient.listenMsg(\"CancelTask\", (msg) => {\n            this.allTasks.delete(msg.taskId);\n            this.onCancelTask?.call(this, msg.taskId);\n        });\n    }\n\n\n    /**\n     * 连接集群服务器,失败返回错误消息，连上了之后如果非手动断开，则会自动重连\n     * @returns \n     */\n    public async joinCluster(): Promise<string | null> {\n        if (!this.clusterClient) {\n            throw new Error('本对象已经被释放!');\n        }\n        if (this.clusterClient.isConnected === true) {\n            //已经连上的,则直接返回成功\n            return null;\n        }\n\n        let connectRet = await this.clusterClient.connect();\n        if (!connectRet.isSucc) {\n            return \"连接失败:\" + connectRet.errMsg;\n        }\n        let req: ReqClusterLogin;\n        if (this.clientType === EClusterClientType.Node) {\n            req = {\n                clientType: EClusterClientType.Node,\n                nodeId: this.id!,\n                clusterKey: this.key!,\n                nodeInfo: await this.getNodeInfo?.(),\n            };\n        } else {\n            req = {\n                clientType: EClusterClientType.Terminal,\n                terminalId: this.id!,\n                terminalKey: this.key!,\n            };\n        }\n        let ret = await this.clusterClient.callApi(\"ClusterLogin\", req);\n        if (!ret.isSucc) {\n            return ret.err.message;\n        }\n\n        if (this.clientType === EClusterClientType.Node) {\n            //成功连上了,开始自动同步信息给集群\n            if (this.autoSyncInfoHD) clearInterval(this.autoSyncInfoHD);\n            this.autoSyncInfoHD = setInterval(async () => {\n                if (this.clusterClient?.isConnected !== true) {\n                    //发现断开,但还进定时器了,则取消自动重连 (正常断开就不会进定时器了)\n                    if (this.autoSyncInfoHD) clearInterval(this.autoSyncInfoHD);\n                    return;\n                }\n                //发送信息\n                this.clusterClient.sendMsg(\"ClusterSyncNodeInfo\", {\n                    nodeInfo: await this.getNodeInfo?.(),\n                });\n            }, 1000);\n        }\n\n        return null;\n    }\n    /**\n     * 当集群断开后用于重新连接集群\n     * @param failReTry\n     * @returns \n     */\n    private async reJoinCluster(failReTry: boolean = true): Promise<boolean> {\n        const err = await this.joinCluster();\n        // 重连也错误，弹出错误提示\n        if (!err) {\n            logger.log('集群服务器-重连成功!');\n            return true;\n        }\n        if (failReTry) {\n            logger.error('集群服务器-重连失败:' + err + '  2秒后自动重连!');\n            clearTimeout(this.clusterCAutoReconnectHD);\n            this.clusterCAutoReconnectHD = setTimeout(() => this.reJoinCluster(failReTry), 2000);\n        } else {\n            logger.error('集群服务器-重连失败:' + err);\n        }\n        return false;\n    }\n\n    public async disconnectCluster(): Promise<void> {\n        try {\n            clearTimeout(this.clusterCAutoReconnectHD);\n            clearInterval(this.autoSyncInfoHD);\n            await this.clusterClient?.disconnect();\n        } catch { }\n    }\n}"]}