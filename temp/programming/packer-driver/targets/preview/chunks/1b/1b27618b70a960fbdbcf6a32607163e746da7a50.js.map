{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/redisHelper.ts"],"names":["RedisClient","MemRedisClient","initRedisClient","cfg","configKey","allRedisCfg","set","existsClient","allRedisClients","get","disconnect","useMemRedis","createClient","getRedisClient","reuseClient","client","Error","commandOptions","v4","logger","delay","constructor","config","configUrl","reconnectHd","reconnectWaiting","showConnectError","id","url","ssl","username","password","host","port","database","rc","isFirst","connTask","Promise","resolve","on","error","tryReconnect","connect","retryEx","ex","clearTimeout","setTimeout","reconnect","undefined","isOpen","log","e","delete","keys","del","setString","key","val","exTimeSec","opt","EX","getString","setObject","valJson","JSON","stringify","getObject","json","parse","setHashObject","field","valueObject","setHashString","valueString","hSet","getHashString","hGet","getHashObject","getHashObjects","kv","hGetAll","ret","getHashValues","removeHashValue","hDel","rPushObject","redisKey","item","rPush","lPopObject","lPop","blPopObject","timeoutSec","blPop","isolated","element","incr","decr","incrBy","increment","decrBy","publishObject","publish","subscribeObject","listen","subscribe","unsubscribe","memCacheKV","memCacheHSet","Map","obj","list","memCacheList","push","shift","time","allTime","nStr","n","parseInt","ls","memCachePubSub","fn","memCacheInc"],"mappings":"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","sourcesContent":["\nimport { commandOptions, createClient, RedisClientType, RedisFunctions, RedisModules, RedisScripts } from 'redis';\nimport { v4 } from \"uuid\";\nimport { RedisConfig } from '../../ServerConfig';\nimport { logger } from \"../tsgf/logger\";\nimport { delay } from \"../tsgf/Utils\";\n\n/**\n * redis客户端接口\n */\nexport interface IRedisClient {\n    disconnect(): Promise<void>;\n    /**\n     * 删除键\n     *\n     * @public\n     * @param keys\n     * @returns\n     */\n    delete(...keys: string[]): Promise<void>;\n    /**\n     * 设置键值对,值是字符串\n     * @param key \n     * @param val \n     * @param exTimeSec 在几秒后过期,0表示永不过期\n     */\n    setString(key: string, val: string, exTimeSec: number): Promise<void>;\n    /**\n     * 获取 @see setString 设置的值\n     * @param key \n     * @returns \n     */\n    getString(key: string): Promise<string | null>;\n    /**\n     * 设置键值对,值类型是对象\n     * @param key \n     * @param val \n     * @param exTimeSec 在几秒后过期,0表示永不过期\n     */\n    setObject(key: string, val: any, exTimeSec: number): Promise<void>;\n    /**\n     * 获取 @see setObject 设置的值\n     * @param key \n     * @returns \n     */\n    getObject<T>(key: string): Promise<T | null>;\n    /**\n     * 设置hash表的字段为对象值（会被序列化为json字符串进行存储）\n     *\n     * @public\n     * @param key\n     * @param field\n     * @param valueObject 对象类型\n     * @returns\n     */\n    setHashObject(key: string, field: string, valueObject: any): Promise<void>;\n    /**\n     * 设置hash表的字段为字符串值\n     *\n     * @public\n     * @param key\n     * @param field\n     * @param valueString 字符串类型\n     * @returns\n     */\n    setHashString(key: string, field: string, valueString: string): Promise<void>;\n    /**\n     * 获取hash表的字段的字符串值\n     *\n     * @public\n     * @param key\n     * @param field\n     * @returns\n     */\n    getHashString(key: string, field: string): Promise<string | null | undefined>;\n    /**\n     * 设置hash表的字段为对象值（会被序列化为json字符串进行存储）\n     *\n     * @public\n     * @param key\n     * @param field\n     * @param valueObject 对象类型\n     * @returns\n     */\n    getHashObject<T extends object>(key: string, field: string): Promise<T | null>;\n    /**\n     * 获取哈希表里的所有键值对，字段值为对象类型\n     *\n     * @public\n     * @typeParam ValueType\n     * @param key\n     * @returns\n     */\n    getHashObjects<ValueType>(key: string): Promise<{ [key: string]: ValueType }>;\n    /**\n     * 获取哈希表里的所有键值对，字段值为字符串类型\n     *\n     * @public\n     * @typeParam ValueType\n     * @param key\n     * @returns\n     */\n    getHashValues(key: string): Promise<{ [key: string]: string }>;\n    /**\n     * 删除hash表的字段\n     * @public\n     * @param key\n     * @param field\n     * @returns\n     */\n    removeHashValue(key: string, field: string): Promise<void>;\n    /**\n     * 将一个元素推入列表的最后\n     *\n     * @public\n     * @typeParam T extends object 必须是对象类型\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    rPushObject<T extends object>(redisKey: string, item: T): Promise<void>;\n    /**\n     * 读取并移除列表第一个元素，并json解析为对象，如果列表为空这个返回null\n     *\n     * @public\n     * @typeParam T extends object 必须是对象类型\n     * @param redisKey\n     * @returns\n     */\n    lPopObject<T extends object>(redisKey: string): Promise<T | null>;\n    /**\n     * 阻塞的方式读取并移除列表第一个元素，并解析为对象，如果列表为空则会一直阻塞\n     *\n     * @public\n     * @typeParam T extends object 必须是对象类型\n     * @param redisKey\n     * @param timeoutSec 阻塞超时秒数，传0表示不超时，没数据则一直阻塞下去\n     * @returns\n     */\n    blPopObject<T extends object>(redisKey: string, timeoutSec: number): Promise<T | null>;/**\n     * 递增1并返回递增后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @returns\n     */\n    incr(redisKey: string): Promise<number>;\n    /**\n     * 递减1并返回递减后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @returns\n     */\n    decr(redisKey: string): Promise<number>;\n    /**\n     * 递增指定数值并返回递增后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @param increment 整数\n     * @returns\n     */\n    incrBy(redisKey: string, increment: number): Promise<number>;\n    /**\n     * 递减指定数值并返回递减后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @param increment 整数\n     * @returns\n     */\n    decrBy(redisKey: string, increment: number): Promise<number>;\n    /**\n     * 【发布、订阅】发布一个对象到key中\n     *\n     * @public\n     * @typeParam T extends object 需要是一个对象\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    publishObject<T extends object>(redisKey: string, item: T): Promise<void>;\n    /**\n     * 【发布、订阅】订阅一个key中的消息，注意，本操作需要一个独立的连接！（可以使用getRedisClient(false)来创建一个全新的连接）\n     *\n     * @public\n     * @typeParam T extends object 需要是一个对象\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    subscribeObject<T extends object>(redisKey: string, listen: (item: T) => void): Promise<void>;\n    /**\n     * 【发布、订阅】取消订阅一个key中的消息，注意，本操作的连接需要和订阅是同一个！\n     *\n     * @public\n     * @typeParam T extends object 需要是一个对象\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    unsubscribe(redisKey: string): Promise<void>;\n}\n\n/**获取redis客户端实例的方法定义*/\nexport type GetRedisClient = () => Promise<IRedisClient>;\n\n/**redis客户端封装 */\nexport class RedisClient implements IRedisClient {\n    private config?: RedisConfig;\n    private configUrl: string;\n    private client?: RedisClientType<RedisModules, RedisFunctions, RedisScripts>;\n    private reconnectHd: any;\n    private reconnectWaiting: boolean = false;\n    /**是否已经显示过连接错误了*/\n    private showConnectError: boolean = false;\n    private id: string;\n    /**\n     * 初始化\n     * @param cfg 配置对象\n     */\n    private constructor(cfg: RedisConfig) {\n        this.id = v4();\n        this.config = cfg;\n        //redis[s]://[[username][:password]@][host][:port][/db-number]:\n        let url = \"redis\" + (this.config.ssl ? 's' : '') + \"://\";\n        if (this.config.username) {\n            url += this.config.username;\n            if (this.config.password) {\n                url += \":\" + this.config.password;\n            }\n            url += \"@\";\n        }\n        url += this.config.host + ':' + this.config.port\n            + '/' + this.config.database;\n        this.configUrl = url;\n\n        this.client = createClient({\n            url: this.configUrl\n        });\n    }\n\n    /**\n     * 创建连接好的客户端,建议全局静态一个\n     * @param cfg \n     * @returns \n     */\n    public static async createClient(cfg: RedisConfig): Promise<IRedisClient> {\n        let rc = new RedisClient(cfg);\n        let isFirst = true;\n        //redis的connect()方法实现的很坑, 如果没连接成功,触发完on('error')事件后,不会resolve或者reject继续,并且还会走自动重连\n        //所以这里统一封装一个连接的异步任务,兼容connect的处理流程,即使连不上,也能正常走后续\n        let connTask = new Promise<void>(async (resolve) => {\n            //实现额外的网络错误重连\n            rc.client?.on('error', async (error: any) => {\n                //暂时不启用自定义重连机制,暂时先相信redis客户端自己的重连机制\n                //IRedisClient.tryReconnect(rc, null);\n                //logger.log(`redisClient错误[${rc.id}]!`, error);\n                if (!rc.showConnectError) {\n                    rc.showConnectError = true;\n                    logger.error(`redisClient连接错误[${rc.id}]!(自动重试中...)`, error);\n                }\n                if (isFirst) {\n                    //还没连上就出错了,那就补充connect那边的异步回调\n                    isFirst = false;\n                    return resolve();\n                }\n            });\n            rc.client?.on('reconnecting', async () => {\n                //logger.log(`redisClient正在重连[${rc.id}]!`);\n            });\n            rc.client?.on('end', async (error: any) => {\n                isFirst = false;\n                //断开事件触发后尝试重连(如果是手动调用断开的会跳过)\n                RedisClient.tryReconnect(rc, null);\n            });\n            rc.client?.on('ready', async (error: any) => {\n                isFirst = false;\n                rc.showConnectError = false;\n                //logger.log(`redisClient连接成功[${rc.id}]!`);\n            });\n            await rc.client?.connect();\n            //到这里了,说明连接成功了!返回\n            return resolve();\n        });\n        await connTask;\n        return rc;\n    }\n\n    /**暂时不需要自己的重连机制*/\n    private static async tryReconnect(rc?: RedisClient, retryEx: any | null = null) {\n        if (!rc) return;\n        if (!rc.reconnectWaiting) {\n            //因为error事件会多次重复触发, 所以用个标志只处理一次\n            try {\n                await rc.client?.disconnect();\n            } catch (ex) {\n                //logger.error(`redisClient断开[${rc.id}]产生错误`, ex);\n            }\n            rc.reconnectWaiting = true;\n            if (retryEx) {\n                logger.error(`redisClient重连失败[${rc.id}], 2秒后再次重连!`, retryEx);\n            } else {\n                logger.error(`redisClient断开[${rc.id}], 2秒后重连尝试!`);\n            }\n            clearTimeout(rc.reconnectHd);\n            rc.reconnectHd = setTimeout((rc?: RedisClient) => {\n                if (rc) {\n                    rc.reconnectWaiting = false;\n                    RedisClient.reconnect(rc)\n                    rc = undefined;\n                }\n            }, 2000, rc);\n        }\n        rc = undefined;\n    }\n    /**暂时不需要自己的重连机制*/\n    private static async reconnect(rc?: RedisClient) {\n        if (!rc) return;\n        clearTimeout(rc.reconnectHd);\n        if (rc.client?.isOpen === true) {\n            //开始重连时,状态就是连上的,则直接成功\n            logger.log(`redisClient重连成功[${rc.id}]! [01]`);\n        } else {\n            try {\n                //尝试连接\n                await rc.client?.connect();\n                //没报错则成功\n                logger.log(`redisClient重连成功[${rc.id}]! [02]`);\n            } catch (ex) {\n                if (rc.client?.isOpen) {\n                    //报错后发现是连接状态的,则视为成功\n                    logger.log(`redisClient重连成功[${rc.id}]! [03]`);\n                    return;\n                }\n                //其他错误,则再次重试\n                RedisClient.tryReconnect(rc, ex);\n            }\n        }\n        rc = undefined;\n    }\n    public async disconnect(): Promise<void> {\n        clearTimeout(this.reconnectHd);\n        try {\n            await this.client?.disconnect();\n        } catch (e) { }\n        this.client = undefined;\n        this.config = undefined;\n    }\n\n\n    /**\n     * 删除键\n     *\n     * @public\n     * @param keys\n     * @returns\n     */\n    public async delete(...keys: string[]): Promise<void> {\n        await this.client?.del(keys);\n    }\n    /**\n     * 设置键值对,值是字符串\n     * @param key \n     * @param val \n     * @param exTimeSec 在几秒后过期,0表示永不过期\n     */\n    public async setString(key: string, val: string, exTimeSec: number = 0): Promise<void> {\n        let opt: any = {};\n        if (exTimeSec) {\n            opt.EX = exTimeSec;\n        }\n        await this.client?.set(key, val, opt);\n    }\n    /**\n     * 获取 @see setString 设置的值\n     * @param key \n     * @returns \n     */\n    public async getString(key: string): Promise<string | null> {\n        return await this.client?.get(key) ?? null;\n    }\n\n    /**\n     * 设置键值对,值类型是对象\n     * @param key \n     * @param val \n     * @param exTimeSec 在几秒后过期,0表示永不过期\n     */\n    public async setObject(key: string, val: any, exTimeSec: number = 0): Promise<void> {\n        let valJson: any = null;\n        if (val) {\n            valJson = JSON.stringify(val);\n        }\n        await this.setString(key, valJson, exTimeSec);\n    }\n    /**\n     * 获取 @see setObject 设置的值\n     * @param key \n     * @returns \n     */\n    public async getObject<T>(key: string): Promise<T | null> {\n        let json = await this.getString(key);\n        if (!json) return null;\n        try {\n            return JSON.parse(json) as T;\n        } catch (ex) {\n            logger.error('getObject(\"' + key + '\")json解析失败:', json);\n            return null;\n        }\n    }\n\n\n    /**\n     * 设置hash表的字段为对象值（会被序列化为json字符串进行存储）\n     *\n     * @public\n     * @param key\n     * @param field\n     * @param valueObject 对象类型\n     * @returns\n     */\n    public async setHashObject(key: string, field: string, valueObject: any): Promise<void> {\n        let valJson: any = null;\n        if (valueObject) {\n            valJson = JSON.stringify(valueObject);\n        }\n        await this.setHashString(key, field, valJson);\n    }\n    /**\n     * 设置hash表的字段为字符串值\n     *\n     * @public\n     * @param key\n     * @param field\n     * @param valueString 字符串类型\n     * @returns\n     */\n    public async setHashString(key: string, field: string, valueString: string): Promise<void> {\n        await this.client?.hSet(key, field, valueString);\n    }\n    /**\n     * 获取hash表的字段的字符串值\n     *\n     * @public\n     * @param key\n     * @param field\n     * @returns\n     */\n    public async getHashString(key: string, field: string): Promise<string | null | undefined> {\n        return await this.client?.hGet(key, field);\n    }\n    /**\n     * 设置hash表的字段为对象值（会被序列化为json字符串进行存储）\n     *\n     * @public\n     * @param key\n     * @param field\n     * @param valueObject 对象类型\n     * @returns\n     */\n    public async getHashObject<T extends object>(key: string, field: string): Promise<T | null> {\n        let json: any = await this.getHashString(key, field);\n        if (!json) return null;\n        try {\n            return JSON.parse(json) as T;\n        } catch (ex) {\n            logger.error(`getHashObject(${key}, ${field})json解析失败:`, json);\n            return null;\n        }\n\n    }\n\n\n    /**\n     * 获取哈希表里的所有键值对，字段值为对象类型\n     *\n     * @public\n     * @typeParam ValueType\n     * @param key\n     * @returns\n     */\n    public async getHashObjects<ValueType>(key: string): Promise<{ [key: string]: ValueType }> {\n        let kv = await this.client?.hGetAll(key);\n        let ret: { [key: string]: ValueType } = {};\n        if (kv) {\n            for (let key in kv) {\n                let json = kv[key];\n                ret[key] = JSON.parse(json);\n            }\n        }\n        return ret;\n    }\n    /**\n     * 获取哈希表里的所有键值对，字段值为字符串类型\n     *\n     * @public\n     * @typeParam ValueType\n     * @param key\n     * @returns\n     */\n    public async getHashValues(key: string): Promise<{ [key: string]: string }> {\n        return await this.client?.hGetAll(key) ?? {};\n    }\n\n    /**\n     * 删除hash表的字段\n     * @public\n     * @param key\n     * @param field\n     * @returns\n     */\n    public async removeHashValue(key: string, field: string): Promise<void> {\n        await this.client?.hDel(key, field);\n    }\n\n\n    /**\n     * 将一个元素推入列表的最后\n     *\n     * @public\n     * @typeParam T extends object 必须是对象类型\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    public async rPushObject<T extends object>(redisKey: string, item: T): Promise<void> {\n        let valJson: any = null;\n        if (item) {\n            valJson = JSON.stringify(item);\n        }\n        await this.client?.rPush(redisKey, valJson);\n    }\n\n\n    /**\n     * 读取并移除列表第一个元素，并json解析为对象，如果列表为空这个返回null\n     *\n     * @public\n     * @typeParam T extends object 必须是对象类型\n     * @param redisKey\n     * @returns\n     */\n    public async lPopObject<T extends object>(redisKey: string): Promise<T | null> {\n        let json = await this.client?.lPop(redisKey);\n        if (!json) return null;\n        try {\n            return JSON.parse(json) as T;\n        } catch (ex) {\n            logger.error('IRedisClient.lPopObject(\"' + redisKey + '\")json解析失败:', json);\n            return null;\n        }\n    }\n\n\n    /**\n     * 阻塞的方式读取并移除列表第一个元素，并解析为对象，如果列表为空则会一直阻塞\n     *\n     * @public\n     * @typeParam T extends object 必须是对象类型\n     * @param redisKey\n     * @param timeoutSec 阻塞超时秒数，传0表示不超时，没数据则一直阻塞下去\n     * @returns\n     */\n    public async blPopObject<T extends object>(redisKey: string, timeoutSec: number): Promise<T | null> {\n        let ret = await this.client?.blPop(commandOptions({ isolated: true }), redisKey, timeoutSec);\n        if (!ret || !ret.element) return null;\n        try {\n            return JSON.parse(ret.element) as T;\n        } catch (ex) {\n            logger.error('IRedisClient.blPopObject(\"' + redisKey + '\")json解析失败:', ret.element);\n            return null;\n        }\n    }\n\n\n    /**\n     * 递增1并返回递增后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @returns\n     */\n    public async incr(redisKey: string): Promise<number> {\n        return await this.client?.incr(redisKey) ?? 0;\n    }\n    /**\n     * 递减1并返回递减后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @returns\n     */\n    public async decr(redisKey: string): Promise<number> {\n        return await this.client?.decr(redisKey) ?? 0;\n    }\n\n    /**\n     * 递增指定数值并返回递增后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @param increment 整数\n     * @returns\n     */\n    public async incrBy(redisKey: string, increment: number): Promise<number> {\n        return await this.client?.incrBy(redisKey, increment) ?? 0;\n    }\n    /**\n     * 递减指定数值并返回递减后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @param increment 整数\n     * @returns\n     */\n    public async decrBy(redisKey: string, increment: number): Promise<number> {\n        return await this.client?.decrBy(redisKey, increment) ?? 0;\n    }\n\n\n\n    /**\n     * 【发布、订阅】发布一个对象到key中\n     *\n     * @public\n     * @typeParam T extends object 需要是一个对象\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    public async publishObject<T extends object>(redisKey: string, item: T): Promise<void> {\n        let valJson: any = null;\n        if (item) {\n            valJson = JSON.stringify(item);\n        }\n        await this.client?.publish(redisKey, valJson);\n    }\n\n    /**\n     * 【发布、订阅】订阅一个key中的消息，注意，本操作需要一个独立的连接！（可以使用getRedisClient(false)来创建一个全新的连接）\n     *\n     * @public\n     * @typeParam T extends object 需要是一个对象\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    public async subscribeObject<T extends object>(redisKey: string, listen: (item: T) => void): Promise<void> {\n        await this.client?.subscribe(redisKey, (json: string) => {\n            if (!json) return;\n            let item: T;\n            try {\n                item = JSON.parse(json) as T;\n            } catch (ex) {\n                logger.error('IRedisClient.subscribeObject(\"' + redisKey + '\")json解析失败:', ex, \"json:\", json);\n                return;\n            }\n            listen(item);\n        });\n    }\n    /**\n     * 【发布、订阅】取消订阅一个key中的消息，注意，本操作的连接需要和订阅是同一个！\n     *\n     * @public\n     * @typeParam T extends object 需要是一个对象\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    public async unsubscribe(redisKey: string): Promise<void> {\n        await this.client?.unsubscribe(redisKey);\n    }\n}\n/**单机内存版的实现，用在简易的all-in-one场景，减少redis的依赖！*/\nexport class MemRedisClient implements IRedisClient {\n\n    private static memCacheKV: Map<string, string> = new Map<string, string>();\n    private static memCacheHSet: Map<string, Map<string, string>> = new Map<string, Map<string, string>>();\n    private static memCacheList: Map<string, string[]> = new Map<string, string[]>();\n    private static memCacheInc: Map<string, number> = new Map<string, number>();\n    private static memCachePubSub: Map<string, ((item: string) => void)[]> = new Map<string, ((item: string) => void)[]>();\n\n    public async disconnect(): Promise<void> {\n    }\n\n\n    /**\n     * 删除键\n     *\n     * @public\n     * @param key\n     * @returns\n     */\n    public async delete(...keys: string[]): Promise<void> {\n        for (let key of keys) {\n            MemRedisClient.memCacheKV.delete(key);\n        }\n    }\n    /**\n     * 设置键值对,值是字符串\n     * @param key \n     * @param val \n     * @param exTimeSec 在几秒后过期,0表示永不过期\n     */\n    public async setString(key: string, val: string, exTimeSec: number = 0): Promise<void> {\n        let opt: any = {};\n        if (exTimeSec) {\n            opt.EX = exTimeSec;\n        }\n        MemRedisClient.memCacheKV.set(key, val);\n    }\n    /**\n     * 获取 @see setString 设置的值\n     * @param key \n     * @returns \n     */\n    public async getString(key: string): Promise<string | null> {\n        return MemRedisClient.memCacheKV.get(key) ?? null;\n    }\n\n    /**\n     * 设置键值对,值类型是对象\n     * @param key \n     * @param val \n     * @param exTimeSec 在几秒后过期,0表示永不过期\n     */\n    public async setObject(key: string, val: any, exTimeSec: number = 0): Promise<void> {\n        let valJson: any = null;\n        if (val) {\n            valJson = JSON.stringify(val);\n        }\n        await this.setString(key, valJson, exTimeSec);\n    }\n    /**\n     * 获取 @see setObject 设置的值\n     * @param key \n     * @returns \n     */\n    public async getObject<T>(key: string): Promise<T | null> {\n        let json = await this.getString(key);\n        if (!json) return null;\n        try {\n            return JSON.parse(json) as T;\n        } catch (ex) {\n            logger.error('getObject(\"' + key + '\")json解析失败:', json);\n            return null;\n        }\n    }\n\n\n    /**\n     * 设置hash表的字段为对象值（会被序列化为json字符串进行存储）\n     *\n     * @public\n     * @param key\n     * @param field\n     * @param valueObject 对象类型\n     * @returns\n     */\n    public async setHashObject(key: string, field: string, valueObject: any): Promise<void> {\n        let valJson: any = null;\n        if (valueObject) {\n            valJson = JSON.stringify(valueObject);\n        }\n        await this.setHashString(key, field, valJson);\n    }\n    /**\n     * 设置hash表的字段为字符串值\n     *\n     * @public\n     * @param key\n     * @param field\n     * @param valueString 字符串类型\n     * @returns\n     */\n    public async setHashString(key: string, field: string, valueString: string): Promise<void> {\n        let set = MemRedisClient.memCacheHSet.get(key);\n        if (!set) {\n            set = new Map<string, string>();\n            MemRedisClient.memCacheHSet.set(key, set);\n        }\n        set.set(field, valueString);\n    }\n    /**\n     * 获取hash表的字段的字符串值\n     *\n     * @public\n     * @param key\n     * @param field\n     * @returns\n     */\n    public async getHashString(key: string, field: string): Promise<string | null | undefined> {\n        let set = MemRedisClient.memCacheHSet.get(key);\n        if (!set) {\n            return null;\n        }\n        return set.get(field);\n    }\n    /**\n     * 设置hash表的字段为对象值（会被序列化为json字符串进行存储）\n     *\n     * @public\n     * @param key\n     * @param field\n     * @param valueObject 对象类型\n     * @returns\n     */\n    public async getHashObject<T extends object>(key: string, field: string): Promise<T | null> {\n        let json: any = await this.getHashString(key, field);\n        if (!json) return null;\n        try {\n            return JSON.parse(json) as T;\n        } catch (ex) {\n            logger.error(`getHashObject(${key}, ${field})json解析失败:`, json);\n            return null;\n        }\n\n    }\n\n\n    /**\n     * 获取哈希表里的所有键值对，字段值为对象类型\n     *\n     * @public\n     * @typeParam ValueType\n     * @param key\n     * @returns\n     */\n    public async getHashObjects<ValueType>(key: string): Promise<{ [key: string]: ValueType }> {\n        let set = MemRedisClient.memCacheHSet.get(key);\n        if (!set) {\n            return {};\n        }\n        let ret: { [key: string]: ValueType } = {};\n        for (let kv of set) {\n            ret[kv[0]] = JSON.parse(kv[1]);;\n        }\n        return ret;\n    }\n    /**\n     * 获取哈希表里的所有键值对，字段值为字符串类型\n     *\n     * @public\n     * @typeParam ValueType\n     * @param key\n     * @returns\n     */\n    public async getHashValues(key: string): Promise<{ [key: string]: string }> {\n        let set = MemRedisClient.memCacheHSet.get(key);\n        if (!set) {\n            return {};\n        }\n        let obj: { [key: string]: string } = {};\n        for (let kv of set) {\n            obj[kv[0]] = kv[1];\n        }\n        return obj;\n    }\n\n    /**\n     * 删除hash表的字段\n     * @public\n     * @param key\n     * @param field\n     * @returns\n     */\n    public async removeHashValue(key: string, field: string): Promise<void> {\n        let set = MemRedisClient.memCacheHSet.get(key);\n        if (!set) {\n            return;\n        }\n        set.delete(field);\n    }\n\n\n\n\n    /**\n     * 将一个元素推入列表的最后\n     *\n     * @public\n     * @typeParam T extends object 必须是对象类型\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    public async rPushObject<T extends object>(redisKey: string, item: T): Promise<void> {\n        let valJson: any = null;\n        if (item) {\n            valJson = JSON.stringify(item);\n        }\n        let list = MemRedisClient.memCacheList.get(redisKey);\n        if (!list) {\n            list = [];\n            MemRedisClient.memCacheList.set(redisKey, list);\n        }\n        list.push(valJson);\n    }\n\n\n    /**\n     * 读取并移除列表第一个元素，并json解析为对象，如果列表为空这个返回null\n     *\n     * @public\n     * @typeParam T extends object 必须是对象类型\n     * @param redisKey\n     * @returns\n     */\n    public async lPopObject<T extends object>(redisKey: string): Promise<T | null> {\n        let list = MemRedisClient.memCacheList.get(redisKey);\n        if (!list) {\n            list = [];\n            MemRedisClient.memCacheList.set(redisKey, list);\n        }\n        let json = list.shift();\n        if (!json) return null;\n        try {\n            return JSON.parse(json) as T;\n        } catch (ex) {\n            logger.error('IRedisClient.lPopObject(\"' + redisKey + '\")json解析失败:', json);\n            return null;\n        }\n    }\n\n\n    /**\n     * 阻塞的方式读取并移除列表第一个元素，并解析为对象，如果列表为空则会一直阻塞\n     *\n     * @public\n     * @typeParam T extends object 必须是对象类型\n     * @param redisKey\n     * @param timeoutSec 阻塞超时秒数，传0表示不超时，没数据则一直阻塞下去\n     * @returns\n     */\n    public async blPopObject<T extends object>(redisKey: string, timeoutSec: number): Promise<T | null> {\n        return await new Promise<T | null>(async resolve => {\n            let time = 0, allTime = timeoutSec * 1000;\n            while (timeoutSec === 0 || time < allTime) {\n                let val = await this.lPopObject<T>(redisKey);\n                if (val) return resolve(val);\n                await delay(300);\n                time += 300;\n            }\n            resolve(null);\n        });\n    }\n\n\n    /**\n     * 递增1并返回递增后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @returns\n     */\n    public async incr(redisKey: string): Promise<number> {\n        let nStr = MemRedisClient.memCacheKV.get(redisKey);\n        if (typeof (nStr) === 'undefined') {\n            nStr = '0';\n        }\n        let n = parseInt(nStr);\n        n++;\n        MemRedisClient.memCacheKV.set(redisKey, n + '');\n        return n;\n    }\n    /**\n     * 递减1并返回递减后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @returns\n     */\n    public async decr(redisKey: string): Promise<number> {\n        let nStr = MemRedisClient.memCacheKV.get(redisKey);\n        if (typeof (nStr) === 'undefined') {\n            nStr = '0';\n        }\n        let n = parseInt(nStr);\n        n--;\n        MemRedisClient.memCacheKV.set(redisKey, n + '');\n        return n;\n    }\n\n    /**\n     * 递增指定数值并返回递增后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @param increment 整数\n     * @returns\n     */\n    public async incrBy(redisKey: string, increment: number): Promise<number> {\n        let nStr = MemRedisClient.memCacheKV.get(redisKey);\n        if (typeof (nStr) === 'undefined') {\n            nStr = '0';\n        }\n        let n = parseInt(nStr);\n        n += increment;\n        MemRedisClient.memCacheKV.set(redisKey, n + '');\n        return n;\n    }\n    /**\n     * 递减指定数值并返回递减后的数值，如果没有则会当作0来执行\n     *\n     * @public\n     * @param redisKey\n     * @param increment 整数\n     * @returns\n     */\n    public async decrBy(redisKey: string, increment: number): Promise<number> {\n        let nStr = MemRedisClient.memCacheKV.get(redisKey);\n        if (typeof (nStr) === 'undefined') {\n            nStr = '0';\n        }\n        let n = parseInt(nStr);\n        n -= increment;\n        MemRedisClient.memCacheKV.set(redisKey, n + '');\n        return n;\n    }\n\n\n    /**\n     * 【发布、订阅】发布一个对象到key中\n     *\n     * @public\n     * @typeParam T extends object 需要是一个对象\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    public async publishObject<T extends object>(redisKey: string, item: T): Promise<void> {\n        let valJson: any = null;\n        if (item) {\n            valJson = JSON.stringify(item);\n        }\n        let ls = MemRedisClient.memCachePubSub.get(redisKey);\n        if (ls) {\n            for (let fn of ls) {\n                fn(valJson);\n            }\n        }\n    }\n\n    /**\n     * 【发布、订阅】订阅一个key中的消息，注意，本操作需要一个独立的连接！（可以使用getRedisClient(false)来创建一个全新的连接）\n     *\n     * @public\n     * @typeParam T extends object 需要是一个对象\n     * @param redisKey\n     * @param listen\n     * @returns\n     */\n    public async subscribeObject<T extends object>(redisKey: string, listen: (item: T) => void): Promise<void> {\n        let ls = MemRedisClient.memCachePubSub.get(redisKey);\n        if (!ls) {\n            ls = [];\n            MemRedisClient.memCachePubSub.set(redisKey, ls);\n        }\n        ls.push(json => {\n            if (!json) return;\n            let item: T;\n            try {\n                item = JSON.parse(json) as T;\n            } catch (ex) {\n                logger.error('IRedisClient.subscribeObject(\"' + redisKey + '\")json解析失败:', ex, \"json:\", json);\n                return;\n            }\n            listen(item);\n        });\n    }\n    /**\n     * 【发布、订阅】取消订阅一个key中的消息，注意，本操作的连接需要和订阅是同一个！\n     *\n     * @public\n     * @typeParam T extends object 需要是一个对象\n     * @param redisKey\n     * @param item\n     * @returns\n     */\n    public async unsubscribe(redisKey: string): Promise<void> {\n        MemRedisClient.memCachePubSub.delete(redisKey);\n    }\n}\n\nconst allRedisClients: Map<string, IRedisClient> = new Map<string, IRedisClient>();\nconst allRedisCfg: Map<string, RedisConfig> = new Map<string, RedisConfig>();\n\n/**\n * 初始化指定配置的redis客户端配置,如果已经存在会断开之前的连接(相当于重置)\n * @param cfg \n * @param configKey 根据这配置标识区分客户端\n */\nexport async function initRedisClient(cfg: RedisConfig, configKey: string = \"default\"): Promise<void> {\n    allRedisCfg.set(configKey, cfg);\n    let existsClient = allRedisClients.get(configKey);\n    if (existsClient) await existsClient.disconnect();\n    if (cfg.useMemRedis) {\n        existsClient = new MemRedisClient();\n    } else {\n        existsClient = await RedisClient.createClient(cfg);\n    }\n    allRedisClients.set(configKey, existsClient);\n}\n/**\n * 获取redis客户端(需要先调用初始化), 全局共享同配置的客户端实例\n * @param reuseClient 是否复用连接,否的只是单纯的创建一个全新的连接并返回\n * @param configKey 如果没传使用默认值\n * @returns \n */\nexport async function getRedisClient(reuseClient: boolean = true, configKey: string = \"default\"): Promise<IRedisClient> {\n    if (reuseClient) {\n        let client = allRedisClients.get(configKey);\n        if (client) return client;\n        let cfg = allRedisCfg.get(configKey);\n        if (!cfg) {\n            throw new Error(`${configKey}标识未初始化配置!`);\n        }\n        if (cfg.useMemRedis) {\n            client = new MemRedisClient();\n        } else {\n            client = await RedisClient.createClient(cfg);\n        }\n        allRedisClients.set(configKey, client);\n        return client;\n    } else {\n        let cfg = allRedisCfg.get(configKey);\n        if (!cfg) {\n            throw new Error(`${configKey}标识未初始化配置!`);\n        }\n        if (cfg.useMemRedis) {\n            return new MemRedisClient();\n        } else {\n            return await RedisClient.createClient(cfg);\n        }\n    }\n}"]}