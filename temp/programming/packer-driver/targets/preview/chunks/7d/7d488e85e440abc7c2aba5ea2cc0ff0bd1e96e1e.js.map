{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgf/Result.ts"],"names":["Result","buildErr","errMsgOrErrRet","code","succ","err","buildSucc","data","transition","source","ifSuccGetData","ErrorCodes"],"mappings":"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","sourcesContent":["\n/**结果是成功的*/\nexport type IResultSucc<T> = {\n    /**结果是成功的*/\n    succ: true,\n    /**结果代码*/\n    code: number,\n    /**如果是失败的，则有错误消息*/\n    err?: string,\n    data: T,\n};\n/**结果是失败的*/\nexport type IResultErr<T> = {\n    succ: false,\n    /**结果代码*/\n    code: number,\n    /**如果是失败的，则有错误消息*/\n    err: string,\n    data?: T,\n};\n\n/**通用结果对象*/\nexport type IResult<T> = IResultSucc<T> | IResultErr<T>;\n\n/**通用结果对象的生成类*/\nexport class Result<T> {\n\n    /**\n     * 构建一个错误的结果对象\n     *\n     * @public\n     * @typeParam T\n     * @param errRet\n     * @returns\n     */\n    public static buildErr<T, T2>(errRet: IResult<T2>): IResult<T>;\n    /**\n     * 构建一个错误的结果对象\n     *\n     * @public\n     * @typeParam T\n     * @param errMsg\n     * @param code=0\n     * @returns\n     */\n    public static buildErr<T>(errMsg: string, code?: number): IResult<T>;\n    /**\n     * 构建一个错误的结果对象\n     *\n     * @public\n     * @typeParam T\n     * @param errMsgOrErrRet\n     * @param code=1\n     * @returns\n     */\n    public static buildErr<T, T2>(errMsgOrErrRet: string | IResult<T2>, code: number = 1): IResult<T> {\n        if (typeof errMsgOrErrRet === 'string') {\n            return {\n                succ: false,\n                err: errMsgOrErrRet,\n                code: code,\n            };\n        } else {\n            return {\n                succ: false,\n                err: errMsgOrErrRet.err ?? '',\n                code: errMsgOrErrRet.code,\n            };\n        }\n    }\n\n    /**\n     * 构建一个成功的结果对象\n     *\n     * @public\n     * @typeParam T\n     * @param data\n     * @returns\n     */\n    public static buildSucc<T>(data: T): IResult<T> {\n        return {\n            succ: true,\n            code: 0,\n            data: data,\n        };\n    }\n\n    /**\n     *将一个类型的成功结果转为另外一个\n     *\n     * @typeParam TSource\n     * @typeParam TTarget\n     * @param source 成功的对象, 注意必须传入ifSuccGetData参数!\n     * @param ifSuccGetData 如果结果是正确的则需要换一个目标类型的data\n     * @returns\n     */\n    public static transition<TSource, TTarget>(source: IResultSucc<TSource>, ifSuccGetData: () => TTarget): IResult<TTarget>;\n    /**\n    *将一个类型的失败结果转为另外一个\n    *\n    * @typeParam TSource\n    * @typeParam TTarget\n    * @param source 失败的对象\n    * @returns\n    */\n    public static transition<TSource, TTarget>(source: IResultErr<TSource>): IResult<TTarget>;\n    /**\n     *将一个类型的结果转为另外一个类型\n     *\n     * @typeParam TSource\n     * @typeParam TTarget\n     * @param source 成功的对象, 注意必须传入ifSuccGetData参数!\n     * @param ifSuccGetData 如果结果是正确的则需要换一个目标类型的data\n     * @returns\n     */\n    public static transition<TSource, TTarget>(source: IResult<TSource>, ifSuccGetData: () => TTarget): IResult<TTarget>;\n    public static transition<TSource, TTarget>(source: IResult<TSource>, ifSuccGetData?: () => TTarget): IResult<TTarget> {\n        if (source.succ) {\n            return {\n                succ: true,\n                code: 0,\n                data: ifSuccGetData!(),\n            };\n        } else {\n            return {\n                succ: false,\n                err: source.err ?? '',\n                code: source.code,\n            };\n        }\n    }\n}\n\n\n/**错误码表*/\nexport enum ErrorCodes {\n\n    /**\n     * 通用\n     * =======================================\n    */\n\n    /**参数错误*/\n    ParamsError = 9001,\n    /**异常*/\n    Exception = 9005,\n\n    /**\n     * 房间相关\n     * =======================================\n    */\n\n    /**不在房间中,无法操作需要在房间中的api*/\n    RoomNotIn = 1000,\n    /**房间不存在*/\n    RoomNotFound = 1001,\n    /**房间服务器已经关闭, 需要重新创建*/\n    RoomServerClosed = 1002,\n    /**服务器爆满, 暂无可用服务器*/\n    RoomNoServerAvailable = 1003,\n    /**房间现在不允许加入*/\n    RoomForbidJoin = 1004,\n    /**请先退出之前的房间(调用退出房间)*/\n    RoomNeedLeavePrevious = 1005,\n    /**房间已经解散*/\n    RoomHasDismiss = 1006,\n    /**房间人满无法加入*/\n    RoomPlayersFull = 1007,\n    /**要加入的队伍不存在!*/\n    RoomTeamNotFound = 1008,\n    /**要加入的队伍已满!*/\n    RoomTeamPlayersFull = 1009,\n    /**房间中的操作被禁止(一般是权限不足)*/\n    RoomPermissionDenied = 1010,\n    /**当前需要在同步中才可以操作*/\n    RoomNotInSync = 1011,\n    /**房间需要密码*/\n    RoomMustPassword = 1012,\n    /**房间密码不正确*/\n    RoomPasswordWrong = 1013,\n    /**房间id已存在*/\n    RoomIdExists = 1014,\n\n    /**\n     * 匹配相关\n     * =======================================\n    */\n    /**未知匹配错误*/\n    MatchUnknown = 2000,\n    /**请求被取消*/\n    MatchRequestCancelled = 2001,\n    /**游戏服务器爆满，请稍后再试！*/\n    MatchServerBusy = 2002,\n    /**匹配查询超时！*/\n    MatchQueryTimeout = 2003,\n    /**匹配超时！*/\n    MatchTimeout = 2004,\n    /**匹配相关的操作被禁止*/\n    MatchPermissionDenied = 2100,\n    /**匹配器标识不存在！*/\n    MatchMatcherNotFound = 2101,\n\n\n    /**\n     * 认证相关\n     * =======================================\n    */\n\n    /**token过期或不存在！(token被平台清理了,可能是太久没用或续期等)*/\n    AuthPlayerTokenNotFound = 4001,\n    /**token已经失效！(相同的openid重新授权,旧的token就失效了)*/\n    AuthPlayerTokenInvalid = 4002,\n    /**token已经过期！(刚过期,但还没被平台清理)*/\n    AuthPlayerTokenExpire = 4003,\n    /**断线重连失败,玩家在断开连接后太久没重连,已经被踢,需要重新登录*/\n    AuthReconnectionFail = 4004,\n    /**授权被(中间件)禁止*/\n    AuthForbid = 4005,\n    /**当前操作未授权! 需要先经过认证操作!*/\n    AuthUnverified = 4006,\n};"]}