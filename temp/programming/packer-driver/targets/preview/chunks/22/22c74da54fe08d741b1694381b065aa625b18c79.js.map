{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/DbHelper.ts"],"names":["MySqlDbHelper","MySqlFactory","Result","mysql","constructor","pool","conn","autoClose","setManualClose","manual","open","Promise","resolve","buildErr","getConnection","err","connection","message","config","queryFormat","query","values","replace","txt","key","hasOwnProperty","escape","buildSucc","close","release","undefined","queryMulti","sql","params","openRet","succ","result","length","querySingle","getMySqlDbHelper","connString","mysqlPool","createPool"],"mappings":"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","sourcesContent":["import { IResult, Result } from \"../tsgf/Result\";\nimport mysql from 'mysql';\n\n/**数据库连接实例*/\nexport interface IDbHelper {\n\n    /**\n     * 设置连接手动关闭，数据库操作后是否需要手动调用关闭，否则会自动调用关闭\n     * @param manual 默认为false，即为：会自动关闭\n     */\n    setManualClose(manual: boolean): void;\n\n\n    /**\n     * 打开连接，一般不用手动调用，执行时会自动打开\n     *\n     * @returns\n     */\n    open(): Promise<IResult<null>>;\n\n\n    /**\n     * 关闭连接，设置手动关闭连接后，需要自行调用关闭\n     *\n     * @returns\n     */\n    close(): Promise<void>;\n\n\n    /**\n     * 查询出多行数据并映射为对象数组\n     *\n     * @param sql\n     * @param params\n     * @returns\n     */\n    queryMulti<Model>(sql: string, params?: any): Promise<IResult<Model[]>>;\n\n    /**\n     * 查询首行数据并映射为对象，如果没数据则ret.data=null\n     *\n     * @typeParam Model 实体类型\n     * @param sql\n     * @param params\n     * @returns\n     */\n    querySingle<Model>(sql: string, params?: any): Promise<IResult<Model | null>>;\n}\n\n\nexport class MySqlDbHelper implements IDbHelper {\n    protected pool?: mysql.Pool;\n    protected conn?: mysql.PoolConnection;\n    protected autoClose: boolean = true;\n\n    constructor(pool: mysql.Pool) {\n        this.pool = pool;\n    }\n\n    setManualClose(manual: boolean): void {\n        this.autoClose = !manual;\n    }\n\n    open(): Promise<IResult<null>> {\n        return new Promise<IResult<null>>((resolve) => {\n            if (!this.pool) return resolve(Result.buildErr(\"从连接池中获取连接失败：连接池为空!\"));\n            this.pool.getConnection((err, connection) => {\n                if (err) {\n                    return resolve(Result.buildErr(\"从连接池中获取连接失败：\" + err.message));\n                }\n                //支持sql的参数名方式的参数化\n                connection.config.queryFormat = function (query, values) {\n                    if (!values) return query;\n                    return query.replace(/\\:(\\w+)/g, (txt, key) => {\n                        if (values.hasOwnProperty(key)) {\n                            return connection.escape(values[key]);\n                        }\n                        return txt;\n                    });\n                };\n                this.conn = connection;\n                return resolve(Result.buildSucc(null));\n            });\n        });\n    }\n\n    close(): Promise<void> {\n        this.conn?.release();\n        this.conn = undefined;\n        return Promise.resolve();\n    }\n    queryMulti<Model>(sql: string, params?: any): Promise<IResult<Model[]>> {\n        return new Promise<IResult<any>>(async (resolve) => {\n            if (!this.conn) {\n                let openRet = await this.open();\n                if (!openRet.succ) {\n                    return resolve(Result.buildErr(openRet.err));\n                }\n            }\n            this.conn!.query(sql, params, async (err, result) => {\n                if (this.autoClose) await this.close();\n                if (err) {\n                    return resolve(Result.buildErr(err.message));\n                }\n                if (result && result.length) {\n                    return resolve(Result.buildSucc(result as Model[]));\n                }\n                return resolve(Result.buildSucc([]));\n            });\n        });\n    }\n    querySingle<Model>(sql: string, params?: any): Promise<IResult<Model | null>> {\n        return new Promise<IResult<any>>(async (resolve) => {\n            if (!this.conn) {\n                let openRet = await this.open();\n                if (!openRet.succ) {\n                    return resolve(Result.buildErr(openRet.err));\n                }\n            }\n            this.conn!.query(sql, params, async (err, result) => {\n                if (this.autoClose) await this.close();\n                if (err) {\n                    return resolve(Result.buildErr(err.message));\n                }\n                if (result && result.length) {\n                    return resolve(Result.buildSucc(result[0] as Model));\n                }\n                return resolve(Result.buildSucc(null));\n            });\n        });\n    }\n\n}\n\n/**mysql的连接工厂*/\nexport class MySqlFactory {\n\n    private static mysqlPool?: mysql.Pool;\n\n    /**\n     * 获取一个mysql的连接工具实例\n     *\n     * @public\n     * @param connString\n     * @returns\n     */\n    public static getMySqlDbHelper(connString: string): IDbHelper {\n        if (!MySqlFactory.mysqlPool) {\n            MySqlFactory.mysqlPool = mysql.createPool(connString);\n        }\n        return new MySqlDbHelper(MySqlFactory.mysqlPool);\n    }\n}"]}