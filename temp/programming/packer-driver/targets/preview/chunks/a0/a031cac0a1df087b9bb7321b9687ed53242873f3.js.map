{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/test/unitTest/api/ApiAuthorize.test.ts"],"names":["assert","ErrorCodes","delay","authPlayerToken","authToGameServer","createAndEnterRoom","hallClient","appDismissRoom","testEachBuild","describe","testData","test","gameClient1Ret","playerToken1","playerId1","maxPlayers","isPrivate","ok","succ","err","gameClient1","data","gameClient","roomId","gameServerUrl","gameClient2","playerToken2","joinRet","joinRoom","onDismissRoom","dismissRoomRet","regRet","getRoomOnlineInfo","code","RoomNotFound","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,MAAAA,M,SAAAA,M;;AACAC,MAAAA,U,iBAAAA,U;;AACAC,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,e,iBAAAA,e;AAAiBC,MAAAA,gB,iBAAAA,gB;AAAkBC,MAAAA,kB,iBAAAA,kB;AAAoBC,MAAAA,U,iBAAAA,U;AAAYC,MAAAA,c,iBAAAA,c;AAAgBC,MAAAA,a,iBAAAA,a;;;;;;;AAE5FC,MAAAA,QAAQ,CAAC,SAAD,EAAY,MAAM;AAEtB,YAAIC,QAAQ,GAAG;AAAA;AAAA,4CAAc,CAAd,CAAf;AAGAC,QAAAA,IAAI,CAAC,SAAD,iCAAY,aAAkB;AAC9B;AACA,gBAAM;AAAA;AAAA,kDAAgB,sBAAhB,EAAwC,MAAxC,CAAN;AACH,SAHG,EAAJ;AAIAA,QAAAA,IAAI,CAAC,SAAD,iCAAY,aAAkB;AAC9B;AACA,cAAIC,cAAc,SAAS;AAAA;AAAA,wDAAmBF,QAAQ,CAACG,YAA5B,EAA0CH,QAAQ,CAACI,SAAnD,EAA8D,MAA9D,EAAsE;AAC7FC,YAAAA,UAAU,EAAE,CADiF;AAE7FC,YAAAA,SAAS,EAAE;AAFkF,WAAtE,CAA3B;AAIA;AAAA;AAAA,gCAAOC,EAAP,CAAUL,cAAc,CAACM,IAAzB,EAA+BN,cAAc,CAACO,GAA9C;AACAT,UAAAA,QAAQ,CAACU,WAAT,GAAuBR,cAAc,CAACS,IAAf,CAAqBC,UAA5C;AACA,cAAIC,MAAM,GAAGX,cAAc,CAACS,IAAf,CAAqBE,MAAlC;AACA,cAAIC,aAAa,GAAGZ,cAAc,CAACS,IAAf,CAAqBG,aAAzC,CAT8B,CAW9B;;AACAd,UAAAA,QAAQ,CAACe,WAAT,SAA6B;AAAA;AAAA,oDAAiB,MAAjB,EAAyBf,QAAQ,CAACgB,YAAlC,EAAgDF,aAAhD,CAA7B;AACA,cAAIG,OAAO,SAASjB,QAAQ,CAACe,WAAT,CAAqBG,QAArB,CAA8B;AAAEL,YAAAA;AAAF,WAA9B,CAApB;AACA;AAAA;AAAA,gCAAON,EAAP,CAAUU,OAAO,CAACT,IAAlB,EAAwBS,OAAO,CAACR,GAAhC;AAEA,cAAIU,aAAa,GAAG,CAApB;;AACAnB,UAAAA,QAAQ,CAACU,WAAT,CAAqBS,aAArB,GAAqC,MAAM;AACvCA,YAAAA,aAAa;AAChB,WAFD;;AAGAnB,UAAAA,QAAQ,CAACe,WAAT,CAAqBI,aAArB,GAAqC,MAAM;AACvCA,YAAAA,aAAa;AAChB,WAFD;;AAIA,cAAIC,cAAc,SAAS;AAAA;AAAA,gDAAeP,MAAf,CAA3B;AACA;AAAA;AAAA,gCAAON,EAAP,CAAUa,cAAc,CAACZ,IAAzB,EAA+BY,cAAc,CAACX,GAA9C;AAEA,gBAAM;AAAA;AAAA,8BAAM,GAAN,CAAN;AAEA,cAAIY,MAAM,SAAS;AAAA;AAAA,wCAAWC,iBAAX,CAA6BtB,QAAQ,CAACG,YAAtC,EAAoDU,MAApD,CAAnB;AACA;AAAA;AAAA,gCAAON,EAAP,CAAU,CAACc,MAAM,CAACb,IAAR,IAAgBa,MAAM,CAACE,IAAP,KAAgB;AAAA;AAAA,wCAAWC,YAArD,EAAmE,cAAcC,IAAI,CAACC,SAAL,CAAeL,MAAf,CAAjF;AACA;AAAA;AAAA,gCAAOd,EAAP,CAAUY,aAAa,KAAK,CAA5B,mGAAmDA,aAAnD;AAEH,SAjCG,EAAJ;AAkCH,OA3CO,CAAR","sourcesContent":["import { assert } from \"chai\";\nimport { ErrorCodes } from \"../../../src/shared/tsgf/Result\";\nimport { delay } from \"../../../src/shared/tsgf/Utils\";\nimport { authPlayerToken, authToGameServer, createAndEnterRoom, hallClient, appDismissRoom, testEachBuild } from \"./ApiUtils\";\n\ndescribe(\"大厅服务端接口\", () => {\n\n    let testData = testEachBuild(5);\n\n\n    test('玩家服务端认证', async function () {\n        //==========这里模拟服务端获取playerToken (openid需要按单元测试名区分一下,防止多个单元测试并行时token互踢)\n        await authPlayerToken(\"zum0001_ApiAuthorize\", \"zum1\");\n    })\n    test('服务端解散房间', async function () {\n        //创建单人房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            maxPlayers: 2,\n            isPrivate: true,\n        });\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n        let gameServerUrl = gameClient1Ret.data!.gameServerUrl\n\n        // 玩家2加入\n        testData.gameClient2 = await authToGameServer('zum2', testData.playerToken2, gameServerUrl);\n        let joinRet = await testData.gameClient2.joinRoom({ roomId });\n        assert.ok(joinRet.succ, joinRet.err);\n\n        let onDismissRoom = 0;\n        testData.gameClient1.onDismissRoom = () => {\n            onDismissRoom++;\n        };\n        testData.gameClient2.onDismissRoom = () => {\n            onDismissRoom++;\n        };\n\n        let dismissRoomRet = await appDismissRoom(roomId);\n        assert.ok(dismissRoomRet.succ, dismissRoomRet.err);\n\n        await delay(500);\n\n        let regRet = await hallClient.getRoomOnlineInfo(testData.playerToken1, roomId);\n        assert.ok(!regRet.succ && regRet.code === ErrorCodes.RoomNotFound, '房间应该被解散了!' + JSON.stringify(regRet));\n        assert.ok(onDismissRoom === 2, `应该收到2条解散房间的消息,但实际${onDismissRoom}条`);\n\n    });\n});"]}