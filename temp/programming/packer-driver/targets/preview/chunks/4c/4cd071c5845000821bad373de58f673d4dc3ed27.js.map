{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/hallClient/HallClient.ts"],"names":["HallClient","hallServiceProto","serviceProto","Result","AHttpClient","logger","constructor","serverUrl","timeout","server","json","client","flows","preCallApiFlow","push","v","recoverPlayerRoom","playerId","playerToken","updateShowName","ret","callApi","isSucc","buildErr","err","message","code","buildSucc","res","roomOnlineInfo","createRoom","createPa","para","getRoomOnlineInfo","roomId","getOrCreateRoom","requestMatch","matchParams","matchReqId","queryMatch","hasResult","errMsg","errCode","matchResult","cancelMatch","filterRooms","filter","skip","limit","ownDismissRoom"],"mappings":"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","sourcesContent":["\nimport { serviceProto as hallServiceProto, ServiceType } from \"./protocols/serviceProto\";\nimport { IResult, Result } from \"../tsgf/Result\";\nimport { AHttpClient } from \"../tsgf/AClient\";\nimport { IMatchParamsFromPlayer, IMatchResult } from \"../tsgf/match/Models\";\nimport { ReqCreateRoom } from \"./protocols/PtlCreateRoom\";\nimport { ICreateRoomPara, IGetOrCreateRoomPara, IGetOrCreateRoomRsp, IRoomOnlineInfo, IRoomsFilterPara, IRoomsFilterRes } from \"../tsgf/room/IRoomInfo\";\nimport { logger } from \"../tsgf/logger\";\n\nexport type hallServiceType = ServiceType;\n\n/**\n * 基础的大厅服务器api的客户端封装\n */\nexport class HallClient extends AHttpClient<hallServiceType>{\n\n    constructor(serverUrl: string, timeout?: number) {\n        super(hallServiceProto, {\n            server: serverUrl,\n            json: true,\n            logger: logger,\n            timeout,\n        });\n\n        this.client.flows.preCallApiFlow.push((v) => {\n            return v;\n        });\n    }\n\n    /**\n     * 认证并返回尝试恢复玩家房间信息，如果玩家还被保留在房间中,则返回之前所在房间id,需要再调用GameClient的重连方法\n     * @param playerId \n     * @param playerToken \n     * @param updateShowName 可更新玩家显示名 \n     * @returns player room \n     */\n    public async recoverPlayerRoom(playerId: string, playerToken: string, updateShowName?: string): Promise<IResult<IRoomOnlineInfo | null>> {\n        const ret = await this.client.callApi(\"RecoverPlayerRoom\", {\n            playerId: playerId,\n            playerToken: playerToken,\n            updateShowName: updateShowName,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.roomOnlineInfo);\n    }\n\n    /**\n     * 创建房间，并获得分配的游戏服务器，得到后用游戏服务器客户端进行连接\n     * @param playerToken \n     * @param createPa \n     * @returns 返回是否有错误消息,null表示成功\n     */\n    public async createRoom(playerToken: string, createPa: ICreateRoomPara): Promise<IResult<IRoomOnlineInfo>> {\n        let para: ReqCreateRoom = createPa as ReqCreateRoom;\n        para.playerToken = playerToken;\n        const ret = await this.client.callApi(\"CreateRoom\", para);\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.roomOnlineInfo);\n    }\n    /**\n     * 获取房间的在线信息，然后需要用游戏服务器客户端连接再加入房间\n     * @param playerToken \n     * @param createPa \n     * @returns 返回是否有错误消息,null表示成功\n     */\n    public async getRoomOnlineInfo(playerToken: string, roomId: string): Promise<IResult<IRoomOnlineInfo>> {\n        const ret = await this.client.callApi(\"GetRoomOnlineInfo\", {\n            playerToken: playerToken,\n            roomId: roomId\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.roomOnlineInfo);\n    }\n    /**\n     * 获取或创建符合条件的房间\n     * @param playerToken \n     * @param createPa \n     * @returns 返回是否有错误消息,null表示成功\n     */\n    public async getOrCreateRoom(playerToken: string, para: IGetOrCreateRoomPara): Promise<IResult<IGetOrCreateRoomRsp>> {\n        const ret = await this.client.callApi(\"GetOrCreateRoom\", {\n            ...para,\n            playerToken,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res);\n    }\n\n    /**\n     * 请求匹配，返回匹配请求ID，用queryMatch查询匹配结果，建议2秒一次查询\n     * @param playerToken \n     * @param matchParams \n     * @returns 返回是否有错误消息,null表示成功\n     */\n    public async requestMatch(playerToken: string, matchParams: IMatchParamsFromPlayer): Promise<IResult<string>> {\n        const ret = await this.client.callApi(\"RequestMatch\", {\n            playerToken: playerToken,\n            matchParams: matchParams,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.matchReqId);\n    }\n    /**\n     * 查询匹配结果, null表示结果还没出. 建议2秒一次查询. 因为请求时超时时间已知，所以客户端要做好请求超时判断\n     * @param matchReqId \n     * @returns 返回结果对象\n     */\n    public async queryMatch(playerToken: string, matchReqId: string): Promise<IResult<IMatchResult> | null> {\n        const ret = await this.client.callApi(\"QueryMatch\", {\n            playerToken: playerToken,\n            matchReqId: matchReqId,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        if (!ret.res.hasResult) return null;\n        if (ret.res.errMsg) {\n            return Result.buildErr(ret.res.errMsg, ret.res.errCode);\n        }\n        if (ret.res.matchResult) {\n            return Result.buildSucc(ret.res.matchResult);\n        }\n        return Result.buildErr(\"未知结果！\");\n    }\n    /**\n     * 取消匹配请求\n     * @param matchReqId \n     * @returns 返回结果对象\n     */\n    public async cancelMatch(playerToken: string, matchReqId: string): Promise<IResult<null>> {\n        const ret = await this.client.callApi(\"CancelMatch\", {\n            playerToken: playerToken,\n            matchReqId: matchReqId,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        return Result.buildSucc(null);\n    }\n\n    /**\n     * 筛选在线房间列表\n     * @param playerToken \n     * @param filter \n     * @param [skip] \n     * @param [limit] \n     */\n    public async filterRooms(playerToken: string, filter: IRoomsFilterPara, skip?: number, limit?: number): Promise<IResult<IRoomsFilterRes>> {\n        const ret = await this.client.callApi(\"FilterRooms\", {\n            playerToken,\n            filter,\n            skip,\n            limit,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res);\n    }\n    \n    /**\n     * 房主直接解散自己的房间\n     * @param playerToken \n     * @param roomId \n     */\n    public async ownDismissRoom(playerToken: string, roomId: string): Promise<IResult<IRoomOnlineInfo>> {\n        const ret = await this.client.callApi(\"OwnDismissRoom\", {\n            playerToken: playerToken,\n            roomId: roomId\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.roomOnlineInfo);\n    }\n}"]}