{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/game/GameServerHelper.ts"],"names":["GameServerHelper","ClusterMgr","init","getRedisClient","getAllServersClusterInfoFromRedis","list","getNodeInfosFromRedis","clusterTypeKey","buildRoomOnlineInfo","roomRegInfo","gameServerInfo","roomId","ownerPlayerId","roomName","roomType","maxPlayers","emptySeats","privateRoomJoinMode","isPrivate","gameServerUrl","serverUrl","currGameServerPlayers","clientCount"],"mappings":";;;0CAWaA,gB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPJC,MAAAA,U,iBAAAA,U;;;;;;;AAMT;kCACaD,gB,GAAN,MAAMA,gBAAN,CAAuB;AAGR,eAAJE,IAAI,CAACC,cAAD,EAAkE;AAChFH,UAAAA,gBAAgB,CAACG,cAAjB,GAAkCA,cAAlC;AACH;;AAID;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACyD,qBAAjCC,iCAAiC,GAAyD;AAC1G,cAAIC,IAAI,GAAG,MAAM;AAAA;AAAA,wCAAWC,qBAAX,CAA0DN,gBAAgB,CAACO,cAA3E,EAA2FP,gBAAgB,CAACG,cAA5G,CAAjB;AACA,iBAAOE,IAAP;AACH;AAGD;AACJ;AACA;AACA;AACA;AACA;;;AACqC,eAAnBG,mBAAmB,CAACC,WAAD,EAA4BC,cAA5B,EAA+E;AAAA;;AAC5G,iBAAO;AACHC,YAAAA,MAAM,EAAEF,WAAW,CAACE,MADjB;AAEHC,YAAAA,aAAa,EAAEH,WAAW,CAACG,aAFxB;AAGHC,YAAAA,QAAQ,EAAEJ,WAAW,CAACI,QAHnB;AAIHC,YAAAA,QAAQ,EAAEL,WAAW,CAACK,QAJnB;AAKHC,YAAAA,UAAU,EAAEN,WAAW,CAACM,UALrB;AAMHC,YAAAA,UAAU,EAAEP,WAAW,CAACO,UANrB;AAOHC,YAAAA,mBAAmB,EAAER,WAAW,CAACQ,mBAP9B;AAQHC,YAAAA,SAAS,EAAET,WAAW,CAACS,SAAZ,KAA0B,CARlC;AASHC,YAAAA,aAAa,EAAE,CAAAT,cAAc,QAAd,YAAAA,cAAc,CAAEU,SAAhB,KAA6B,EATzC;AAUHC,YAAAA,qBAAqB,2BAAEX,cAAF,oBAAEA,cAAc,CAAEY,WAAlB,oCAAiC;AAVnD,WAAP;AAYH;;AA1CyB,O;;AAAjBtB,MAAAA,gB,CAEMG,c;AAFNH,MAAAA,gB,CAOcO,c,GAAiB,Y","sourcesContent":["import { IGameServerInfo } from \"../../hallClient/Models\";\nimport { ICancelable } from \"../../tsgf/ICancelable\";\nimport { ICreateRoomPara, IGetOrCreateRoomPara, IRoomOnlineInfo } from \"../../tsgf/room/IRoomInfo\";\nimport { arrWinner } from \"../../tsgf/Utils\";\nimport { ClusterMgr, IClusterNodeInfo } from \"../cluster/ClusterMgr\";\nimport { IRedisClient } from \"../redisHelper\";\nimport { IRoomRegInfo } from \"../room/Models\";\nimport { RoomHelper } from \"../room/RoomHelper\";\nimport { IGameServerInfoInServer } from \"./Models\";\n\n/**游戏服务器跨服操作类*/\nexport class GameServerHelper {\n\n    private static getRedisClient: (reuseClient: boolean) => Promise<IRedisClient>;\n    public static init(getRedisClient: (reuseClient: boolean) => Promise<IRedisClient>) {\n        GameServerHelper.getRedisClient = getRedisClient;\n    }\n\n    public static readonly clusterTypeKey = 'GameServer';\n\n    /**\n     * 从redis中获取所有游戏服务器的分布式信息。分布式时，大厅服务器和游戏服务器管理节点，可能不在一个服务实例上，所以使用本方法来跨服获取\n     *\n     * @public\n     * @typeParam NodeInfo\n     * @param clusterTypeKey 集群类型标识，用在各种场合进行区分的。需要和构造ClussterMgr时的值一致\n     * @returns\n     */\n    public static async getAllServersClusterInfoFromRedis(): Promise<IClusterNodeInfo<IGameServerInfoInServer>[]> {\n        let list = await ClusterMgr.getNodeInfosFromRedis<IGameServerInfoInServer>(GameServerHelper.clusterTypeKey, GameServerHelper.getRedisClient);\n        return list;\n    }\n\n\n    /**\n     * Builds online room info\n     * @param roomRegInfo \n     * @param gameServerInfo \n     * @returns online room info \n     */\n    public static buildRoomOnlineInfo(roomRegInfo: IRoomRegInfo, gameServerInfo?: IGameServerInfo): IRoomOnlineInfo {\n        return {\n            roomId: roomRegInfo.roomId,\n            ownerPlayerId: roomRegInfo.ownerPlayerId,\n            roomName: roomRegInfo.roomName,\n            roomType: roomRegInfo.roomType,\n            maxPlayers: roomRegInfo.maxPlayers,\n            emptySeats: roomRegInfo.emptySeats,\n            privateRoomJoinMode: roomRegInfo.privateRoomJoinMode,\n            isPrivate: roomRegInfo.isPrivate === 1,\n            gameServerUrl: gameServerInfo?.serverUrl || '',\n            currGameServerPlayers: gameServerInfo?.clientCount ?? 0,\n        };\n    }\n\n\n}"]}