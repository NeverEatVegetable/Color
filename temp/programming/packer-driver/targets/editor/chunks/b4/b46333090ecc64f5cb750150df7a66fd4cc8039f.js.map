{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/hallServer/HallServer.ts"],"names":["HallServer","path","HttpServer","hallServiceProto","serviceProto","MatchRequestTerminal","AppCrypto","PlayerAuthHelper","ENetworkState","ErrorCodes","GameClusterTerminal","logger","constructor","getRedisClient","hallServerCfg","getHallServerCfg","server","gameClusterTerminal","matchRequestTerminal","apiCryptoImpls","port","json","flows","preRecvDataFlow","push","v","conn","httpRes","setHeader","preApiCallFlow","conf","service","skipPlayerAuth","req","playerToken","error","code","ParamsError","vRet","verification","succ","err","authInfo","data","playerInfo","playerId","showName","customPlayerStatus","customPlayerProfile","isRobot","networkState","ONLINE","player","roomRobotPlayers","Map","roomWaitReconnectTime","currPlayer","apiCryptoImpl","cryptoMode","ret","decryptionReq","getHallServer","gameClusterServerUrl","gameClusterTerminalId","gameClusterTerminalKey","start","autoImplementApi","resolve","__dirname","joinErr","joinCluster","stop","log","disconnectCluster"],"mappings":"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","sourcesContent":["\nimport * as path from \"path\";\nimport { ApiCall, HttpConnection, HttpServer, HttpServerOptions } from \"tsrpc\";\nimport { serviceProto as hallServiceProto, ServiceType as HallServiceType } from \"../shared/hallClient/protocols/serviceProto\";\nimport { IRedisClient } from \"../shared/tsgfServer/redisHelper\";\nimport { MatchRequestTerminal } from \"../shared/tsgfServer/match/MatchRequestTerminal\";\nimport { BaseConf } from \"../shared/hallClient/protocols/base\";\nimport { IPlayer } from \"../shared/tsgfServer/auth/Models\";\nimport { IApiCrypto } from \"../shared/tsgfServerEDB/apiCrypto/IApiCrypto\";\nimport { AppCrypto } from \"../shared/tsgfServerEDB/apiCrypto/AppCrypto\";\nimport { PlayerAuthHelper } from \"../shared/tsgfServer/auth/PlayerAuthHelper\";\nimport { ENetworkState, IPlayerInfo } from \"../shared/tsgf/player/IPlayerInfo\";\nimport { ErrorCodes } from \"../shared/tsgf/Result\";\nimport { IGameServerInfoInServer } from \"../shared/tsgfServer/game/Models\";\nimport { GameServerHelper } from \"../shared/tsgfServer/game/GameServerHelper\";\nimport { GameClusterTerminal } from \"../shared/tsgfServer/gameCluster/GameClusterTerminal\";\nimport { IHallServerCfg } from \"../ServerConfig\";\nimport { logger } from \"../shared/tsgf/logger\";\n\n\n/**\n * 大厅服务器API专用的ApiCall类型，可用于获取大厅服务对象\n * @date 2022/4/26 - 16:21:57\n *\n * @typedef {HallApiCall}\n * @typeParam req\n * @typeParam res\n */\nexport type HallApiCall<req, res> = ApiCall<req, res, HallServiceType> & {\n    getHallServer: () => HallServer;\n};\n\n\n/**\n * 大厅服务器，可直接部署多台（本服务中的所有功能都是直接支持多台部署），由nginx这样的组件来实现负载均衡。\n * @date 2022/4/26 - 15:06:38\n *\n * @class HallServer\n * @typedef {HallServer}\n */\nexport class HallServer {\n    public server: HttpServer<HallServiceType>;\n    private getRedisClient: (reuseClient: boolean) => Promise<IRedisClient>;\n\n    public gameClusterTerminal: GameClusterTerminal;\n    public matchRequestTerminal: MatchRequestTerminal;\n\n    /**api加解密实现字典*/\n    private apiCryptoImpls: { [key: string]: IApiCrypto } = {\n        \"AppReqDes\": new AppCrypto(),\n    };\n\n    constructor(\n        getRedisClient: (reuseClient: boolean) => Promise<IRedisClient>,\n        hallServerCfg: IHallServerCfg,\n        getHallServerCfg: () => Promise<IHallServerCfg>\n    ) {\n        this.getRedisClient = getRedisClient;\n        this.server = new HttpServer(hallServiceProto, \n            {\n                port: hallServerCfg.port,\n                json: true,\n                logger: logger,\n            }\n        );\n        this.server.flows.preRecvDataFlow.push(v => {\n            let conn = v.conn as HttpConnection;\n            //解决HTTP请求跨域问题\n            conn.httpRes.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n            return v;\n        })\n        this.server.flows.preApiCallFlow.push(async (v: HallApiCall<any, any>) => {\n            let conf = v.service.conf as BaseConf;\n            if (!conf.skipPlayerAuth) {\n                //接口没定义\"不认证\",则需要进行身份认证\n                if (!v.req.playerToken) {\n                    v.error(\"需要 playerToken !\", { code: ErrorCodes.ParamsError });\n                    return null;\n                }\n                let vRet = await PlayerAuthHelper.verification(v.req.playerToken);\n                if (!vRet.succ) {\n                    v.error(vRet.err, { code: vRet.code });\n                    return null;\n                }\n                let authInfo = vRet.data;\n                let playerInfo: IPlayerInfo = {\n                    playerId: authInfo.playerId,\n                    showName: authInfo.showName,\n                    customPlayerStatus: 0,\n                    customPlayerProfile: '',\n                    isRobot: false,\n                    networkState: ENetworkState.ONLINE,\n                };\n\n                let player: IPlayer = {\n                    authInfo: authInfo,\n                    playerInfo: playerInfo,\n                    roomRobotPlayers: new Map(),\n                    roomWaitReconnectTime: 0,// 大厅中这个时间没意义,随意设置为0即可\n                };\n                v.conn.currPlayer = player;\n            }\n            let apiCryptoImpl = this.apiCryptoImpls[conf.cryptoMode];\n            if (apiCryptoImpl) {\n                let ret = await apiCryptoImpl.decryptionReq(v.req);\n                if (!ret.succ) {\n                    v.error(ret.err, { code: ret.code });\n                    return null;\n                }\n            }\n            v.getHallServer = () => this;\n            return v;\n        });\n\n        this.gameClusterTerminal = new GameClusterTerminal(\n            hallServerCfg.gameClusterServerUrl,\n            hallServerCfg.gameClusterTerminalId,\n            hallServerCfg.gameClusterTerminalKey);\n        this.matchRequestTerminal = new MatchRequestTerminal(getRedisClient, false);\n    }\n\n\n    /**\n     * 启动服务\n     *\n     * @public\n     * @returns\n     */\n    public async start(): Promise<void> {\n        await this.matchRequestTerminal.start();\n\n        await this.server.autoImplementApi(path.resolve(__dirname, 'api'));\n        await this.server.start();\n        let joinErr = await this.gameClusterTerminal.joinCluster();\n        if (joinErr) {\n            logger?.error(\"HallServer: 游戏集群终端连接失败:\" + joinErr + '. 即将停止服务!');\n            await this.stop();\n            return;\n        } else {\n            logger?.log(\"HallServer: 游戏集群终端连接成功!\");\n        }\n    }\n    /**停止服务*/\n    public async stop(): Promise<void> {\n        await this.gameClusterTerminal.disconnectCluster();\n        await this.server.stop();\n        await this.matchRequestTerminal.stop();\n    }\n\n\n}"]}