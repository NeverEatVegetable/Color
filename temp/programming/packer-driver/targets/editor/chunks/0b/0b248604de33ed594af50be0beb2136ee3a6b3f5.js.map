{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/test/unitTest/match/MatcherSingle.test.ts"],"names":["assert","EMatchFromType","MatcherKeys","arrRemoveItems","arrSum","MatcherSingle","initMatchRequest","describe","matcher","buildSinglePlayerMatchReq","playerId","minPlayers","maxPlayers","reqParams","matchFromType","Player","matchFromInfo","playerIds","matcherKey","Single","matcherParams","resultsContinueRoomJoinUsMatch","req","buildRoomJoinUsMatchReq","roomId","matchPlayerIds","RoomJoinUs","teamsPlayerIds","teamId","slice","currPlayerCount","length","test","allPlayersReqs","result","onPollMatcherReqs","ok","hasResult","resultErrMsg","resultCreateRoom","createRoomResult4","find","r","createRoomPara","createRoomResult3","createRoomResult2","matchPlayerCount","matchRequestPlayerResults","matchPlayerResults","roomJoinUsMatch","c","re","matchReqId","resultJoinRoom","forEach","push","map","p","roomJoinUsMatchReq4","roomJoinUsMatchReq3","joinRoomResult4","joinRoomId","roomJoinUsInfo","joinRoomResult3"],"mappings":"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","sourcesContent":["import { assert } from \"chai\";\nimport { EMatchFromType, IMatchParamsFromPlayer, ISingleMatcherParams, MatcherKeys } from \"../../../src/shared/tsgf/match/Models\";\nimport { arrRemoveItems, arrSum } from \"../../../src/shared/tsgf/Utils\";\nimport { MatcherSingle } from \"../../../src/shared/tsgfServer/match/MatcherSingle\";\nimport { IMatchRequest, IMatchFromRoomJoinUsOnServer, IMatchRequestParams, initMatchRequest, IMatchParamsFromRoomJoinUsOnServer } from \"../../../src/shared/tsgfServer/match/Models\";\n\ndescribe('单人匹配计算验证', () => {\n    let matcher = new MatcherSingle();\n\n    function buildSinglePlayerMatchReq(playerId: string, minPlayers: number, maxPlayers: number): IMatchRequest {\n        let reqParams: IMatchParamsFromPlayer = {\n            matchFromType: EMatchFromType.Player,\n            matchFromInfo: {\n                playerIds: [playerId],\n            },\n            matcherKey: MatcherKeys.Single,\n            maxPlayers: maxPlayers,\n            matcherParams: {\n                minPlayers: minPlayers,\n                resultsContinueRoomJoinUsMatch: true,\n            } as ISingleMatcherParams,\n        };\n        let req = initMatchRequest(reqParams);\n        return req;\n    }\n    function buildRoomJoinUsMatchReq(roomId: string, matchPlayerIds: string[], maxPlayers: number): IMatchRequest {\n        let reqParams: IMatchParamsFromRoomJoinUsOnServer = {\n            matchFromType: EMatchFromType.RoomJoinUs,\n            matchFromInfo: {\n                roomId: roomId,\n                teamsPlayerIds: [{ teamId: '', playerIds: matchPlayerIds.slice() }],\n                currPlayerCount: matchPlayerIds.length,\n            },\n            matcherKey: MatcherKeys.Single,\n            maxPlayers: maxPlayers,\n            matcherParams: {\n            } as ISingleMatcherParams,\n        };\n        let req = initMatchRequest(reqParams);\n        return req;\n    }\n\n    test('Single_1人的房间', async function () {\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq('4a', 1, 9),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建1个房间!');\n        assert.ok(result.resultCreateRoom?.length === 1, '应该创建1个房间!');\n    });\n    test('Single_单玩家匹配再房间招人匹配', async function () {\n\n        let allPlayersReqs: IMatchRequest[] = [\n            buildSinglePlayerMatchReq('4a', 2, 4),\n            buildSinglePlayerMatchReq('4b', 2, 4),\n            buildSinglePlayerMatchReq('3a', 2, 3),\n            buildSinglePlayerMatchReq('3a', 2, 3),\n            buildSinglePlayerMatchReq('2a', 2, 2),\n            buildSinglePlayerMatchReq('2b', 2, 2),\n        ];\n        let result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultCreateRoom, '应该创建3个房间!');\n        assert.ok(result.resultCreateRoom?.length === 3, '应该创建3个房间!');\n        let createRoomResult4 = result.resultCreateRoom!.find(r => r.createRoomPara.maxPlayers === 4);\n        let createRoomResult3 = result.resultCreateRoom!.find(r => r.createRoomPara.maxPlayers === 3);\n        let createRoomResult2 = result.resultCreateRoom!.find(r => r.createRoomPara.maxPlayers === 2);\n        assert.ok(createRoomResult4, '应该创建一个房间!');\n        assert.ok(createRoomResult3, '应该创建一个房间!');\n        assert.ok(createRoomResult2, '应该创建一个房间!');\n\n        let matchPlayerCount = arrSum(createRoomResult4!.matchRequestPlayerResults, r => r.matchPlayerResults.length);\n        assert.ok(matchPlayerCount === 2, '应该匹配到2个,实际为' + matchPlayerCount);\n        assert.ok(createRoomResult4?.matchRequestPlayerResults.length === 2, '应该匹配到2个,实际为' + createRoomResult4?.matchRequestPlayerResults.length);\n        assert.ok(createRoomResult4?.roomJoinUsMatch, '因为人未满,所以应该开启招人匹配!');\n\n        matchPlayerCount = arrSum(createRoomResult3!.matchRequestPlayerResults, r => r.matchPlayerResults.length);\n        assert.ok(matchPlayerCount === 2, '应该匹配到2个,实际为' + matchPlayerCount);\n        assert.ok(createRoomResult3?.matchRequestPlayerResults.length === 2, '应该匹配到2个,实际为' + createRoomResult3?.matchRequestPlayerResults.length);\n        assert.ok(createRoomResult3?.roomJoinUsMatch, '因为人未满,所以应该开启招人匹配!');\n\n        matchPlayerCount = arrSum(createRoomResult2!.matchRequestPlayerResults, r => r.matchPlayerResults.length);\n        assert.ok(matchPlayerCount === 2, '应该匹配到2个,实际为' + matchPlayerCount);\n        assert.ok(createRoomResult2?.matchRequestPlayerResults.length === 2, '应该匹配到2个,实际为' + createRoomResult2?.matchRequestPlayerResults.length);\n        assert.ok(!createRoomResult2?.roomJoinUsMatch, '因为满员,所以不应该开启招人匹配!');\n\n        //模拟移除匹配中的请求\n        arrRemoveItems(allPlayersReqs, r =>\n            !!result.resultCreateRoom?.find(c =>\n                c.matchRequestPlayerResults.find(re => re.matchReqId === r.matchReqId))\n            || !!result.resultJoinRoom?.find(c =>\n                c.matchRequestPlayerResults.find(re => re.matchReqId === r.matchReqId))\n        );\n        assert.ok(allPlayersReqs.length === 0, '匹配应该被清空了!实际为' + allPlayersReqs.length);\n\n        //加入2个房间招人匹配\n        let matchPlayerIds: string[] = [];\n        createRoomResult4!.matchRequestPlayerResults\n            .forEach(r => matchPlayerIds.push(...r.matchPlayerResults.map(p => p.playerId)));\n        let roomJoinUsMatchReq4 = buildRoomJoinUsMatchReq('4', matchPlayerIds, 4);\n        matchPlayerIds = [];\n        createRoomResult3!.matchRequestPlayerResults\n            .forEach(r => matchPlayerIds.push(...r.matchPlayerResults.map(p => p.playerId)));\n        let roomJoinUsMatchReq3 = buildRoomJoinUsMatchReq('3', matchPlayerIds, 3);\n        allPlayersReqs.push(roomJoinUsMatchReq4);\n        allPlayersReqs.push(roomJoinUsMatchReq3);\n        result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(!result.hasResult, '两个房间招人,但没玩家匹配,应该没结果!');\n\n        //加入1个4Max的玩家匹配\n        allPlayersReqs.push(buildSinglePlayerMatchReq('4c', 2, 4));\n        result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultJoinRoom, '应该加入1个房间!');\n        assert.ok(result.resultJoinRoom?.length === 1, '应该加入1个房间!');\n        let joinRoomResult4 = result.resultJoinRoom![0];\n        assert.ok(joinRoomResult4, '应该加入1个房间!');\n        assert.ok(joinRoomResult4?.joinRoomId === '4', '加入的房间ID应该是4,实际为' + joinRoomResult4?.joinRoomId);\n        matchPlayerCount = arrSum(joinRoomResult4!.matchRequestPlayerResults, r => r.matchPlayerResults.length);\n        assert.ok(matchPlayerCount === 1, '应该匹配上1个,实际' + matchPlayerCount);\n        assert.ok(joinRoomResult4?.matchRequestPlayerResults.length === 1, '应该匹配上1个,实际' + joinRoomResult4?.matchRequestPlayerResults.length);\n        assert.ok(joinRoomResult4?.roomJoinUsMatch, '因为人未满,所以应该开启招人匹配!');\n        //模拟移除匹配中的请求\n        arrRemoveItems(allPlayersReqs, r =>\n            !!result.resultCreateRoom?.find(c =>\n                c.matchRequestPlayerResults.find(re => re.matchReqId === r.matchReqId))\n            || !!result.resultJoinRoom?.find(c =>\n                c.matchRequestPlayerResults.find(re => re.matchReqId === r.matchReqId))\n        );\n        assert.ok(allPlayersReqs.length === 2, '总匹配应该剩下那2个招人匹配!但实际为' + allPlayersReqs.length);\n\n        //需要模拟将这个匹配玩家加入到对应匹配的玩家列表中\n        let roomJoinUsInfo = (roomJoinUsMatchReq4.matchFromInfo as IMatchFromRoomJoinUsOnServer);\n        matchPlayerIds = [];\n        joinRoomResult4!.matchRequestPlayerResults\n            .forEach(r => matchPlayerIds.push(...r.matchPlayerResults.map(p => p.playerId)));\n        roomJoinUsInfo.teamsPlayerIds[0].playerIds.push(...matchPlayerIds);\n        roomJoinUsInfo.currPlayerCount = roomJoinUsInfo.teamsPlayerIds[0].playerIds.length;\n\n        //再加入1个4Max的玩家匹配\n        allPlayersReqs.push(buildSinglePlayerMatchReq('4d', 2, 4));\n        result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultJoinRoom, '应该加入1个房间!');\n        assert.ok(result.resultJoinRoom?.length === 1, '应该加入1个房间!');\n        joinRoomResult4 = result.resultJoinRoom![0];\n        assert.ok(joinRoomResult4, '应该加入1个房间!');\n        assert.ok(joinRoomResult4?.joinRoomId === '4', '加入的房间ID应该是4,实际为' + joinRoomResult4?.joinRoomId);\n        matchPlayerCount = arrSum(joinRoomResult4!.matchRequestPlayerResults, r => r.matchPlayerResults.length);\n        assert.ok(matchPlayerCount === 1, '应该匹配上1个,实际' + matchPlayerCount);\n        assert.ok(joinRoomResult4?.matchRequestPlayerResults.length === 1, '应该匹配上1个,实际' + joinRoomResult4?.matchRequestPlayerResults.length);\n        assert.ok(!joinRoomResult4?.roomJoinUsMatch, '因为满员,所以不应该开启招人匹配!');\n        //模拟移除匹配中的请求\n        arrRemoveItems(allPlayersReqs, r =>\n            !!result.resultCreateRoom?.find(c =>\n                c.matchRequestPlayerResults.find(re => re.matchReqId === r.matchReqId))\n            || !!result.resultJoinRoom?.find(c =>\n                c.matchRequestPlayerResults.find(re => re.matchReqId === r.matchReqId))\n        );\n        assert.ok(allPlayersReqs.length === 2, '总匹配应该剩下那2个招人匹配!但实际为' + allPlayersReqs.length);\n\n        //需要模拟将这个匹配玩家加入到对应匹配的玩家列表中\n        roomJoinUsInfo = (roomJoinUsMatchReq4.matchFromInfo as IMatchFromRoomJoinUsOnServer);\n        matchPlayerIds = [];\n        joinRoomResult4!.matchRequestPlayerResults\n            .forEach(r => matchPlayerIds.push(...r.matchPlayerResults.map(p => p.playerId)));\n        roomJoinUsInfo.teamsPlayerIds[0].playerIds.push(...matchPlayerIds);\n        roomJoinUsInfo.currPlayerCount = roomJoinUsInfo.teamsPlayerIds[0].playerIds.length;\n\n        //再加入1个3Max的玩家匹配\n        allPlayersReqs.push(buildSinglePlayerMatchReq('3c', 2, 3));\n        result = matcher.onPollMatcherReqs(allPlayersReqs);\n        assert.ok(result.hasResult, '应该要有结果了!');\n        assert.ok(!result.resultErrMsg, '出错了' + result.resultErrMsg);\n        assert.ok(result.resultJoinRoom, '应该加入1个房间!');\n        assert.ok(result.resultJoinRoom?.length === 1, '应该加入1个房间!');\n        let joinRoomResult3 = result.resultJoinRoom![0];\n        assert.ok(joinRoomResult3, '应该加入1个房间!');\n        assert.ok(joinRoomResult3?.joinRoomId === '3', '加入的房间ID应该是3,实际为' + joinRoomResult3?.joinRoomId);\n        matchPlayerCount = arrSum(joinRoomResult3!.matchRequestPlayerResults, r => r.matchPlayerResults.length);\n        assert.ok(matchPlayerCount === 1, '应该匹配上1个,实际' + matchPlayerCount);\n        assert.ok(joinRoomResult3?.matchRequestPlayerResults.length === 1, '应该匹配上1个,实际' + joinRoomResult3?.matchRequestPlayerResults.length);\n        assert.ok(!joinRoomResult3?.roomJoinUsMatch, '因为满员,所以不应该开启招人匹配!');\n        //模拟移除匹配中的请求\n        arrRemoveItems(allPlayersReqs, r =>\n            !!result.resultCreateRoom?.find(c =>\n                c.matchRequestPlayerResults.find(re => re.matchReqId === r.matchReqId))\n            || !!result.resultJoinRoom?.find(c =>\n                c.matchRequestPlayerResults.find(re => re.matchReqId === r.matchReqId))\n        );\n        assert.ok(allPlayersReqs.length === 2, '总匹配应该剩下0个匹配!但实际为' + allPlayersReqs.length);\n\n        //需要模拟将这个匹配玩家加入到对应匹配的玩家列表中\n        roomJoinUsInfo = (roomJoinUsMatchReq3.matchFromInfo as IMatchFromRoomJoinUsOnServer);\n        matchPlayerIds = [];\n        joinRoomResult3!.matchRequestPlayerResults\n            .forEach(r => matchPlayerIds.push(...r.matchPlayerResults.map(p => p.playerId)));\n        roomJoinUsInfo.teamsPlayerIds[0].playerIds.push(...matchPlayerIds);\n        roomJoinUsInfo.currPlayerCount = roomJoinUsInfo.teamsPlayerIds[0].playerIds.length;\n\n    });\n});\n"]}