{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/test/unitTest/api/ApiRoom.test.ts"],"names":["assert","ErrorCodes","EPrivateRoomJoinMode","ERoomMsgRecvType","delay","authToGameServer","authToGameServerByRoomId","createAndEnterRoom","hallClient","appDismissRoom","joinRoom","testEachBuild","describe","testData","test","gameClient1Ret","playerToken1","playerId1","maxPlayers","ok","succ","err","gameClient1","data","gameClient","gameClient2","playerToken2","roomId","ret2","code","RoomPlayersFull","JSON","stringify","disconnect","gameClient4","playerToken4","gameServerUrl","gameClient3","playerToken3","ret3","leaveRoom","regRet","getRoomOnlineInfo","RoomNotFound","ret4","fixedTeamCount","fixedTeamMinPlayers","fixedTeamMaxPlayers","joinRet","teamId","RoomTeamNotFound","RoomTeamPlayersFull","changeTeamRet","changePlayerTeam","msgCount","onChangePlayerTeam","changeInfo","changePlayerId","playerId3","freeTeamMinPlayers","freeTeamMaxPlayers","currRoomInfo","teamList","find","t","id","gameClient1RobotResult","createRoomRobot","showName","robot1","onPlayerJoinRoom","playerInfo","roomInfo","playerId","playerId2","onRecvRoomMsg","msg","fromPlayerInfo","sendRoomMsg","recvType","ROOM_ALL","fail","ROOM_OTHERS","ROOM_SOME","recvPlayerList","ownerPlayerId","onChangeRoom","roomName","changeRoomRet","changeRoom","onChangeCustomPlayerProfile","changeProfileRet","changeCustomPlayerProfile","onChangeCustomPlayerStatus","changeStatusRet","changeCustomPlayerStatus","gameClient1OldStatus","currPlayerInfo","customPlayerStatus","gameClient1OldProfile","customPlayerProfile","onPlayerLeaveRoom","onDismissRoom","dismissRoom","isPrivate","privateRoomJoinMode","password","privateRoomPassword","RoomMustPassword","RoomPasswordWrong","getOrCreateRet","getOrCreateRoom","createRoomPara","roomType","matchRoomType","matchMaxPlayers","createRoomOnlineInfo","ParamsError","matchLimitRoomCount","matchRoomOnlineInfoList","length","playerId4","playerToken5","playerId5","gameClient5","retainEmptyRoomTime","retainOwnSeat","dRet","gameClient2Ret","RoomIdExists","filterRet","filterRooms","rooms","roomNameFullMatch","roomNameLike","invMs","randomRequirePlayerSyncStateInvMs","prevTime","hasMatch","rtUseTime","onRequirePlayerSyncState","Date","now","Math","abs","ret","startFrameSync","console","log","hasReqStateMsg"],"mappings":"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","sourcesContent":["import { assert } from \"chai\";\nimport { GameClient } from \"../../../src/shared/gameClient/GameClient\";\nimport { ErrorCodes } from \"../../../src/shared/tsgf/Result\";\nimport { EPrivateRoomJoinMode } from \"../../../src/shared/tsgf/room/IRoomInfo\";\nimport { ERoomMsgRecvType } from \"../../../src/shared/tsgf/room/IRoomMsg\";\nimport { delay } from \"../../../src/shared/tsgf/Utils\";\nimport { authToGameServer, authToGameServerByRoomId, createAndEnterRoom, hallClient, appDismissRoom, joinRoom, testEachBuild } from \"./ApiUtils\";\n\ndescribe(\"房间单元测试\", () => {\n\n    let testData = testEachBuild(5);\n\n    test('简单创建房间', async function () {\n\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, 'zum1', testData.playerId1, { maxPlayers: 4 });\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n\n    });\n\n\n    test('基本创建房间和加入流程', async function () {\n\n        //创建并进入房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', { maxPlayers: 2 });\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n\n        //玩家2加入玩家1创建好的房间\n        testData.gameClient2 = await joinRoom(testData.playerToken2, gameClient1Ret.data!.roomId, 'zum2');\n\n    });\n\n\n    test('房间加入失败_MaxPlayers1', async function () {\n        //创建单人房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', { maxPlayers: 1 });\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n\n        //玩家2\n        testData.gameClient2 = await authToGameServerByRoomId(testData.playerToken2, gameClient1Ret.data!.roomId, 'zum2');\n        let ret2 = await testData.gameClient2.joinRoom({ roomId: gameClient1Ret.data!.roomId });\n        assert.ok(ret2.succ === false && ret2.code === ErrorCodes.RoomPlayersFull,\n            `加入应该失败的!因为最大人数只有1!${JSON.stringify(ret2)}`);\n\n        await testData.gameClient1.disconnect();\n        await testData.gameClient2.disconnect();\n    }, 99999999);\n\n    test('房间加入失败_MaxPlayers2', async function () {\n\n        //创建单人房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', { maxPlayers: 2 });\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n        //玩家2正常加入\n        testData.gameClient2 = await joinRoom(testData.playerToken2, roomId, 'zum2');\n\n        //玩家4先加入到房间所在游戏服务器(先备用)\n        testData.gameClient4 = await authToGameServer('zum4', testData.playerToken4, gameClient1Ret.data!.gameServerUrl);\n\n        //玩家3加入失败\n        testData.gameClient3 = await authToGameServerByRoomId(testData.playerToken3, roomId, 'zum3');\n        let ret3 = await testData.gameClient3.joinRoom({ roomId });\n        assert.ok(ret3.succ === false && ret3.code === ErrorCodes.RoomPlayersFull, '加入应该失败的!因为最大人数只有2!');\n\n        //玩家2主动退出房间,让玩家3再试,应该要能加入\n        await testData.gameClient2.leaveRoom();\n        ret3 = await testData.gameClient3.joinRoom({ roomId });\n        assert.ok(ret3.succ, ret3.err);\n\n        //这个时候玩家2再去加入,应该要失败\n        let ret2 = await testData.gameClient2.joinRoom({ roomId });\n        assert.ok(ret2.succ === false && ret2.code === ErrorCodes.RoomPlayersFull, '加入应该失败的!因为最大人数只有2!');\n\n        //玩家3直接断开,玩家2应该要能加入成功\n        await testData.gameClient3.disconnect();\n        ret2 = await testData.gameClient2.joinRoom({ roomId });\n        assert.ok(ret2.succ, ret2.err);\n\n        //玩家1和玩家2都断开,这个时候房间应该被解散了\n        await testData.gameClient1.disconnect();\n        await testData.gameClient2.disconnect();\n\n        //重新连应该是失败的,先用大厅获取房间注册信息,应该也是要销毁的\n        let regRet = await hallClient.getRoomOnlineInfo(testData.playerToken1, roomId);\n        assert.ok(regRet.succ === false, '大厅获取房间注册信息应该是要返回不存在!');\n        assert.ok(regRet.code === ErrorCodes.RoomNotFound, '大厅获取房间注册信息应该是要返回不存在!但返回的错误码是' + regRet.code);\n        //然后用玩家4(前面已经连接到同一台游戏服务器的),尝试加入房间,应该也是要失败的\n        let ret4 = await testData.gameClient4.joinRoom({ roomId });\n        assert.ok(ret4.succ === false && ret4.code === ErrorCodes.RoomNotFound, '游戏服务器的加入房间应该是要返回不存在!');\n    });\n\n\n    test('玩家队伍操作_Fixed', async function () {\n\n        //创建房间, 2个队伍,队伍最大人数2\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            maxPlayers: 3,\n            fixedTeamCount: 2,\n            fixedTeamMinPlayers: 1,\n            fixedTeamMaxPlayers: 2,\n        }, '1');\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n\n        testData.gameClient2 = await joinRoom(testData.playerToken2, roomId, 'zum2', '1');\n        testData.gameClient3 = await authToGameServerByRoomId(testData.playerToken3, roomId, 'zum3');\n\n        let joinRet = await testData.gameClient3.joinRoom({ roomId, teamId: '3' });\n        assert.ok(joinRet.code === ErrorCodes.RoomTeamNotFound,\n            `固定房间的队伍不存在,应该不能加入才对!${joinRet.succ},${joinRet.code},${joinRet.err}`);\n\n        joinRet = await testData.gameClient3.joinRoom({ roomId, teamId: '1' });\n        assert.ok(joinRet.code === ErrorCodes.RoomTeamPlayersFull,\n            `队伍满员了,应该不能加入才对!${joinRet.succ},${joinRet.code},${joinRet.err}`);\n\n        joinRet = await testData.gameClient3.joinRoom({ roomId, teamId: '2' });\n        assert.ok(joinRet.succ, joinRet.err);\n\n        let changeTeamRet = await testData.gameClient3.changePlayerTeam('1');\n        assert.ok(changeTeamRet.code === ErrorCodes.RoomTeamPlayersFull,\n            `队伍满员了,应该不能加入才对!${changeTeamRet.succ},${changeTeamRet.code},${changeTeamRet.err}`);\n\n        let msgCount = 0;\n        testData.gameClient1.onChangePlayerTeam = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId1,\n                `【玩家1】应该收到玩家1的通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient2.onChangePlayerTeam = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId1,\n                `【玩家2】应该收到玩家1的通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient3.onChangePlayerTeam = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId1,\n                `【玩家3】应该收到玩家1的通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        changeTeamRet = await testData.gameClient1.changePlayerTeam('2');\n        assert.ok(changeTeamRet.succ, `${changeTeamRet.err}`);\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, `应该要收到3个消息！实际${msgCount}个`);\n\n        changeTeamRet = await testData.gameClient2.changePlayerTeam('2');\n        assert.ok(changeTeamRet.code === ErrorCodes.RoomTeamPlayersFull,\n            `队伍满员了,应该不能加入才对!${changeTeamRet.succ},${changeTeamRet.code},${changeTeamRet.err}`);\n\n        msgCount = 0;\n        testData.gameClient1.onChangePlayerTeam = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId3,\n                `【玩家1】应该收到通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient2.onChangePlayerTeam = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId3,\n                `【玩家2】应该收到通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient3.onChangePlayerTeam = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId3,\n                `【玩家3】应该收到通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        changeTeamRet = await testData.gameClient3.changePlayerTeam('1');\n        assert.ok(changeTeamRet.succ, `${changeTeamRet.err}`);\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, `应该要收到3个消息！实际${msgCount}个`);\n\n    });\n\n\n    test('玩家队伍操作_Free', async function () {\n\n        //创建房间, 2个队伍,队伍最大人数2\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            maxPlayers: 3,\n            freeTeamMinPlayers: 1,\n            freeTeamMaxPlayers: 2,\n        }, '1');\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n\n        testData.gameClient2 = await joinRoom(testData.playerToken2, roomId, 'zum2', '1');\n        testData.gameClient3 = await authToGameServerByRoomId(testData.playerToken3, roomId, 'zum3');\n\n        let joinRet = await testData.gameClient3.joinRoom({ roomId, teamId: '1' });\n        assert.ok(joinRet.code === ErrorCodes.RoomTeamPlayersFull,\n            `队伍满员了,应该不能加入才对!${joinRet.succ},${joinRet.code},${joinRet.err}`);\n\n        joinRet = await testData.gameClient3.joinRoom({ roomId, teamId: '2' });\n        assert.ok(joinRet.succ, joinRet.err);\n\n        let changeTeamRet = await testData.gameClient3.changePlayerTeam('1');\n        assert.ok(changeTeamRet.code === ErrorCodes.RoomTeamPlayersFull,\n            `队伍满员了,应该不能加入才对!${changeTeamRet.succ},${changeTeamRet.code},${changeTeamRet.err}`);\n\n        let msgCount = 0;\n        testData.gameClient1.onChangePlayerTeam = (changeInfo) => {\n            if (changeInfo.changePlayerId === testData.playerId1) {\n                msgCount++;\n            }\n        };\n        testData.gameClient2.onChangePlayerTeam = (changeInfo) => {\n            if (changeInfo.changePlayerId === testData.playerId1) {\n                msgCount++;\n            }\n        };\n        testData.gameClient3.onChangePlayerTeam = (changeInfo) => {\n            if (changeInfo.changePlayerId === testData.playerId1) {\n                msgCount++;\n            }\n        };\n        changeTeamRet = await testData.gameClient1.changePlayerTeam('2');\n        assert.ok(changeTeamRet.succ, `${changeTeamRet.err}`);\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, `应该要收到3个消息！实际${msgCount}个`);\n\n        changeTeamRet = await testData.gameClient2.changePlayerTeam('2');\n        assert.ok(changeTeamRet.code === ErrorCodes.RoomTeamPlayersFull,\n            `队伍满员了,应该不能加入才对!${changeTeamRet.succ},${changeTeamRet.code},${changeTeamRet.err}`);\n\n        //玩家2也改到其他队伍.队伍1应该已经不存在了\n        changeTeamRet = await testData.gameClient2.changePlayerTeam('3');\n        assert.ok(changeTeamRet.succ, `${changeTeamRet.err}`);\n        assert.ok(testData.gameClient2.currRoomInfo && !testData.gameClient2.currRoomInfo.teamList.find(t => t.id === '1'), `队伍1应该已经不存在了!`);\n\n        msgCount = 0;\n        testData.gameClient1.onChangePlayerTeam = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId3,\n                `【玩家1】应该收到通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient2.onChangePlayerTeam = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId3,\n                `【玩家2】应该收到通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient3.onChangePlayerTeam = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId3,\n                `【玩家3】应该收到通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        changeTeamRet = await testData.gameClient3.changePlayerTeam('1');\n        assert.ok(changeTeamRet.succ, `${changeTeamRet.err}`);\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, `应该要收到3个消息！实际${msgCount}个`);\n\n\n        changeTeamRet = await testData.gameClient3.changePlayerTeam('3');\n        assert.ok(changeTeamRet.succ, `${changeTeamRet.err}`);\n    });\n\n\n    test('创建房间和多玩家加入房间以及事件触发逻辑', async function () {\n\n        //玩家1创建房间并进入游戏服务器\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1');\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n\n        let gameClient1RobotResult = await testData.gameClient1.createRoomRobot({ showName: 'robot1' });\n        assert.ok(gameClient1RobotResult.succ, gameClient1RobotResult.err);\n        let robot1 = gameClient1RobotResult.data!;\n\n        //玩家2加入玩家1创建的房间（进入游戏服务器），玩家1收到来人通知\n        let msgCount = 0;\n        testData.gameClient1.onPlayerJoinRoom = (playerInfo, roomInfo) => {\n            assert.ok(playerInfo.playerId === testData.playerId2, '这个时候【玩家1】应该收到【玩家2】的进入房间通知');\n            msgCount++;\n        };\n        testData.gameClient2 = await joinRoom(testData.playerToken2, roomId, 'zum2');\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 1, '应该要收到1个消息！');\n\n        msgCount = 0;\n        testData.gameClient1.onPlayerJoinRoom = (playerInfo, roomInfo) => {\n            assert.ok(playerInfo.playerId === testData.playerId3, '这个时候【玩家1】应该收到【玩家3】的进入房间通知');\n            msgCount++;\n        };\n        testData.gameClient2.onPlayerJoinRoom = (playerInfo, roomInfo) => {\n            assert.ok(playerInfo.playerId === testData.playerId3, '这个时候【玩家2】应该收到【玩家3】的进入房间通知');\n            msgCount++;\n        };\n        //玩家3加入玩家1创建的房间（进入游戏服务器），玩家2、玩家2收到来人通知\n        testData.gameClient3 = await joinRoom(testData.playerToken3, roomId, 'zum3');\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 2, '应该要收到2个消息！');\n\n        //玩家2发送房间消息\n        msgCount = 0;\n        testData.gameClient1.onRecvRoomMsg = (msg) => {\n            assert.ok(msg.fromPlayerInfo.playerId === testData.playerId2, '这个时候【玩家1】应该收到【玩家2】的房间广播消息');\n            msgCount++;\n        };\n        testData.gameClient2.onRecvRoomMsg = (msg) => {\n            assert.ok(msg.fromPlayerInfo.playerId === testData.playerId2, '这个时候【玩家2】应该收到【玩家2】的房间广播消息');\n            msgCount++;\n        };\n        testData.gameClient3.onRecvRoomMsg = (msg) => {\n            assert.ok(msg.fromPlayerInfo.playerId === testData.playerId2, '这个时候【玩家3】应该收到【玩家2】的房间广播消息');\n            msgCount++;\n        };\n        await testData.gameClient2.sendRoomMsg({\n            recvType: ERoomMsgRecvType.ROOM_ALL,\n            msg: '广播所有人一条测试消息'\n        });\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, '应该要收到3个消息！');\n\n\n        msgCount = 0;\n        testData.gameClient1.onRecvRoomMsg = (msg) => {\n            assert.ok(msg.fromPlayerInfo.playerId === testData.playerId2, '这个时候【玩家1】应该收到【玩家2】的房间给他人的消息');\n            msgCount++;\n        };\n        testData.gameClient2.onRecvRoomMsg = (msg) => {\n            assert.fail('这个时候【玩家2】不应该收到【玩家2】的房间消息');\n        };\n        testData.gameClient3.onRecvRoomMsg = (msg) => {\n            assert.ok(msg.fromPlayerInfo.playerId === testData.playerId2, '这个时候【玩家3】应该收到【玩家2】的房间给他人的消息');\n            msgCount++;\n        };\n        await testData.gameClient2.sendRoomMsg({\n            recvType: ERoomMsgRecvType.ROOM_OTHERS,\n            msg: '其他人，我是玩家1'\n        });\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 2, '应该要收到2个消息！');\n\n\n        msgCount = 0;\n        testData.gameClient1.onRecvRoomMsg = (msg) => {\n            assert.ok(msg.fromPlayerInfo.playerId === testData.playerId2, '这个时候【玩家1】应该收到【玩家2】的房间指定消息');\n            msgCount++;\n        };\n        testData.gameClient2.onRecvRoomMsg = (msg) => {\n            assert.fail('这个时候【玩家2】不应该收到【玩家2】的房间消息');\n        };\n        testData.gameClient3.onRecvRoomMsg = (msg) => {\n            assert.fail('这个时候【玩家3】不应该收到【玩家2】的房间消息');\n        };\n        await testData.gameClient2.sendRoomMsg({\n            recvType: ERoomMsgRecvType.ROOM_SOME,\n            recvPlayerList: [testData.gameClient2.currRoomInfo!.ownerPlayerId],\n            msg: '房主好，我是玩家1',\n        });\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 1, '应该要收到1个消息！');\n\n\n        //测试房间信息修改\n        msgCount = 0;\n        testData.gameClient1.onChangeRoom = (roomInfo) => {\n            assert.ok(roomInfo.roomName === '2', `【玩家1】roomName应为'2', 实际为${roomInfo.roomName}`);\n            msgCount++;\n        };\n        testData.gameClient2.onChangeRoom = (roomInfo) => {\n            assert.ok(roomInfo.roomName === '2', `【玩家2】roomName应为'2', 实际为${roomInfo.roomName}`);\n            msgCount++;\n        };\n        testData.gameClient3.onChangeRoom = (roomInfo) => {\n            assert.ok(roomInfo.roomName === '2', `【玩家3】roomName应为'2', 实际为${roomInfo.roomName}`);\n            msgCount++;\n        };\n        let changeRoomRet = await testData.gameClient1.changeRoom({\n            roomName: '2',\n        });\n        assert.ok(changeRoomRet.succ, `修改房间信息应该成功.${changeRoomRet.err}`)\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, `应该要收到3个消息！实际${msgCount}个`);\n\n\n        //测试玩家自定义属性修改\n        msgCount = 0;\n        testData.gameClient1.onChangeCustomPlayerProfile = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId1,\n                `【玩家1】应该收到玩家1的通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient2.onChangeCustomPlayerProfile = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId1,\n                `【玩家2】应该收到玩家1的通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient3.onChangeCustomPlayerProfile = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId1,\n                `【玩家3】应该收到玩家1的通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        let changeProfileRet = await testData.gameClient1.changeCustomPlayerProfile('2');\n        assert.ok(changeProfileRet.succ, `修改玩家自定义属性应该成功.${changeProfileRet.err}`)\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, `应该要收到3个消息！实际${msgCount}个`);\n\n        //测试玩家自定义状态修改\n        msgCount = 0;\n        testData.gameClient1.onChangeCustomPlayerStatus = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId1,\n                `【玩家1】应该收到玩家1的通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient2.onChangeCustomPlayerStatus = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId1,\n                `【玩家2】应该收到玩家1的通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        testData.gameClient3.onChangeCustomPlayerStatus = (changeInfo) => {\n            assert.ok(changeInfo.changePlayerId === testData.playerId1,\n                `【玩家3】应该收到玩家1的通知, 实际为${changeInfo.changePlayerId}`);\n            msgCount++;\n        };\n        let changeStatusRet = await testData.gameClient1.changeCustomPlayerStatus(2);\n        assert.ok(changeStatusRet.succ, `修改玩家自定义状态应该成功.${changeStatusRet.err}`)\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, `应该要收到3个消息！实际${msgCount}个`);\n\n\n        //测试机器人修改自定义状态\n        let gameClient1OldStatus = testData.gameClient1.currPlayerInfo!.customPlayerStatus;\n        msgCount = 0;\n        testData.gameClient1.onChangeCustomPlayerStatus = (changeInfo) => {\n            if (changeInfo.changePlayerId === robot1.playerId) {\n                msgCount++;\n            }\n        };\n        testData.gameClient2.onChangeCustomPlayerStatus = (changeInfo) => {\n            if (changeInfo.changePlayerId === robot1.playerId) {\n                msgCount++;\n            }\n        };\n        testData.gameClient3.onChangeCustomPlayerStatus = (changeInfo) => {\n            if (changeInfo.changePlayerId === robot1.playerId) {\n                msgCount++;\n            }\n        };\n        changeStatusRet = await testData.gameClient1.changeCustomPlayerStatus(2, robot1.playerId);\n        assert.ok(changeStatusRet.succ, `修改玩家1机器人自定义状态应该成功.${changeStatusRet.err}`)\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, `应该要收到3个消息！实际${msgCount}个`);\n        assert.ok(gameClient1OldStatus === testData.gameClient1.currPlayerInfo!.customPlayerStatus, `新旧状态应该一致`);\n\n        //测试机器人修改自定义信息\n        let gameClient1OldProfile = testData.gameClient1.currPlayerInfo!.customPlayerProfile;\n        msgCount = 0;\n        testData.gameClient1.onChangeCustomPlayerProfile = (changeInfo) => {\n            if (changeInfo.changePlayerId === robot1.playerId) {\n                msgCount++;\n            }\n        };\n        testData.gameClient2.onChangeCustomPlayerProfile = (changeInfo) => {\n            if (changeInfo.changePlayerId === robot1.playerId) {\n                msgCount++;\n            }\n        };\n        testData.gameClient3.onChangeCustomPlayerProfile = (changeInfo) => {\n            if (changeInfo.changePlayerId === robot1.playerId) {\n                msgCount++;\n            }\n        };\n        changeStatusRet = await testData.gameClient1.changeCustomPlayerProfile('123', robot1.playerId);\n        assert.ok(changeStatusRet.succ, `修改玩家1机器人自定义字符串应该成功.${changeStatusRet.err}`)\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 3, `应该要收到3个消息！实际${msgCount}个`);\n        assert.ok(gameClient1OldProfile === testData.gameClient1.currPlayerInfo!.customPlayerProfile, `新旧数据应该一致`);\n\n\n        //玩家2离开房间, 玩家1、玩家2收到通知\n        msgCount = 0;\n        testData.gameClient1.onPlayerLeaveRoom = (playerInfo, roomInfo) => {\n            assert.ok(playerInfo.playerId === testData.playerId2, '这个时候【玩家1】应该收到【玩家2】的退出房间通知');\n            msgCount++;\n        };\n        testData.gameClient2.onPlayerLeaveRoom = (playerInfo, roomInfo) => {\n            assert.fail('这个时候【玩家2】不应该收到【玩家2】的退出房间通知');\n        };\n        testData.gameClient3.onPlayerLeaveRoom = (playerInfo, roomInfo) => {\n            assert.ok(playerInfo.playerId === testData.playerId2, '这个时候【玩家3】应该收到【玩家2】的退出房间通知');\n            msgCount++;\n        };\n        await testData.gameClient2.leaveRoom();\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 2, `应该要收到2个消息！实际${msgCount}个`);\n\n        //玩家2离开房间,测试一下不在房间中是否不应该收到通知\n        msgCount = 0;\n        testData.gameClient1.onChangeCustomPlayerStatus = (changeInfo) => {\n            msgCount++;\n            assert.fail(`【玩家1】不应该收到通知, 实际changePlayerId为${changeInfo.changePlayerId}`);\n        };\n        testData.gameClient2.onChangeCustomPlayerStatus = (changeInfo) => {\n            msgCount++;\n            assert.fail(`【玩家2】不应该收到通知, 实际changePlayerId为${changeInfo.changePlayerId}`);\n        };\n        testData.gameClient3.onChangeCustomPlayerStatus = (changeInfo) => {\n            msgCount++;\n            assert.fail(`【玩家3】不应该收到通知, 实际changePlayerId为${changeInfo.changePlayerId}`);\n        };\n        changeStatusRet = await testData.gameClient2.changeCustomPlayerStatus(2);\n        assert.ok(changeStatusRet.succ, `修改玩家自定义状态应该成功.${changeStatusRet.err}`)\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 0, `应该要收到0个消息！实际${msgCount}个`);\n\n        //玩家1解散房间，玩家3收到解散通知\n        msgCount = 0;\n        testData.gameClient1.onDismissRoom = (roomInfo) => {\n            assert.fail('这个时候【玩家1】不应该收到解散房间通知');\n        };\n        testData.gameClient2.onDismissRoom = (roomInfo) => {\n            assert.fail('这个时候【玩家2】不应该收到解散房间通知');\n        };\n        testData.gameClient3.onDismissRoom = (roomInfo) => {\n            msgCount++;\n        };\n        await testData.gameClient1.dismissRoom();\n        await delay(200);//延时一下，因为通知消息是异步的，不会等待本rpc回来再通知\n        assert.ok(msgCount === 1, '应该要收到1个消息！');\n\n    }, 60 * 1000);\n\n    test('私密房间加入模式', async function () {\n        //创建单人房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            maxPlayers: 2,\n            isPrivate: true,\n            privateRoomJoinMode: EPrivateRoomJoinMode.password,\n            privateRoomPassword: '123',\n        });\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n\n        //玩家2\n        testData.gameClient2 = await authToGameServerByRoomId(testData.playerToken2, roomId, 'zum2');\n        let ret2 = await testData.gameClient2.joinRoom({ roomId });\n        assert.ok(ret2.succ === false && ret2.code === ErrorCodes.RoomMustPassword, '应该是提示需要密码!');\n        ret2 = await testData.gameClient2.joinRoom({ roomId, password: '11' });\n        assert.ok(ret2.succ === false && ret2.code === ErrorCodes.RoomPasswordWrong, '应该是提示密码错误!');\n        ret2 = await testData.gameClient2.joinRoom({ roomId, password: '123' });\n        assert.ok(ret2.succ, ret2.err);\n\n        await testData.gameClient1.disconnect();\n        await testData.gameClient2.disconnect();\n    });\n\n    test('获取或创建新房间', async function () {\n        //玩家1\n        let getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken2, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId1,\n                roomType: '111',\n                maxPlayers: 2,\n                roomName: '匹配或创建的房间',\n                isPrivate: true,\n            },\n            matchRoomType: true,\n            matchMaxPlayers: true,\n        });\n        assert.ok(getOrCreateRet.succ, getOrCreateRet.err);\n        assert.ok(getOrCreateRet.data?.createRoomOnlineInfo, '应该没匹配到并且创建了一个房间');\n        // 玩家1进入自己创建的房间\n        testData.gameClient1 = await joinRoom(testData.playerToken1, getOrCreateRet.data!.createRoomOnlineInfo!.roomId, 'zum1');\n\n        //玩家2\n        getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken2, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId2,\n                roomType: '222',\n                maxPlayers: 2,\n                roomName: '匹配或创建的房间',\n                isPrivate: true,\n            },\n        });\n        assert.ok(getOrCreateRet.succ === false && getOrCreateRet.code === ErrorCodes.ParamsError\n            , '应该是提示参数至少要有一个!');\n        getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken2, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId2,\n                roomType: '222',\n                maxPlayers: 2,\n                roomName: '匹配或创建的房间',\n                isPrivate: true,\n            },\n            matchRoomType: true,\n            matchMaxPlayers: true,\n        });\n        assert.ok(getOrCreateRet.succ, getOrCreateRet.err);\n        assert.ok(getOrCreateRet.data?.createRoomOnlineInfo, '应该没匹配到并且创建了一个房间');\n        // 玩家2进入自己创建的房间\n        testData.gameClient2 = await joinRoom(testData.playerToken2, getOrCreateRet.data!.createRoomOnlineInfo!.roomId, 'zum2');\n\n\n        //玩家3\n        getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken3, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId3,\n                roomType: '111',\n                maxPlayers: 2,\n                roomName: '匹配或创建的房间',\n                isPrivate: true,\n            },\n            matchRoomType: true,\n            matchLimitRoomCount: 2,\n        });\n        assert.ok(getOrCreateRet.succ, getOrCreateRet.err);\n        assert.ok(getOrCreateRet.data?.matchRoomOnlineInfoList?.length === 1,\n            '应该匹配到了1个房间,但实际数据是:' + JSON.stringify(getOrCreateRet.data?.matchRoomOnlineInfoList));\n        // 玩家3加入玩家1创建的房间\n        testData.gameClient3 = await joinRoom(testData.playerToken3, getOrCreateRet.data!.matchRoomOnlineInfoList![0].roomId, 'zum3');\n\n        //玩家4\n        getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken4, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId4,\n                roomType: '111',\n                maxPlayers: 2,\n                roomName: '匹配或创建的房间',\n                isPrivate: true,\n            },\n            matchMaxPlayers: true,\n            matchLimitRoomCount: 2,\n        });\n        assert.ok(getOrCreateRet.succ, getOrCreateRet.err);\n        assert.ok(getOrCreateRet.data?.matchRoomOnlineInfoList?.length === 1,\n            '应该匹配到了1个房间,但实际数据是:' + JSON.stringify(getOrCreateRet.data?.matchRoomOnlineInfoList));\n        assert.ok(getOrCreateRet.data!.matchRoomOnlineInfoList![0].roomId === testData.gameClient2.currRoomInfo?.roomId,\n            '应该匹配到玩家2创建的房间, 因为玩家1创建的房间已经满了(玩家1+玩家3)');\n        // 玩家4加入玩家2创建的房间\n        testData.gameClient4 = await joinRoom(testData.playerToken4, getOrCreateRet.data!.matchRoomOnlineInfoList![0].roomId, 'zum4');\n\n        //玩家5\n        getOrCreateRet = await hallClient.getOrCreateRoom(testData.playerToken5, {\n            createRoomPara: {\n                ownerPlayerId: testData.playerId5,\n                roomType: '111',\n                maxPlayers: 2,\n                roomName: '匹配或创建的房间',\n                isPrivate: true,\n            },\n            matchMaxPlayers: true,\n            matchLimitRoomCount: 2,\n        });\n        assert.ok(getOrCreateRet.succ, getOrCreateRet.err);\n        assert.ok(getOrCreateRet.data?.createRoomOnlineInfo,\n            '应该要创建房间,因为仅有的两个应该是要都满了:' + JSON.stringify(getOrCreateRet.data));\n        // 玩家5进入房间\n        testData.gameClient5 = await joinRoom(testData.playerToken5, getOrCreateRet.data!.createRoomOnlineInfo!.roomId, 'zum5');\n    });\n\n    test('空房间的保留时间', async function () {\n        //创建单人房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            maxPlayers: 2,\n            isPrivate: true,\n            retainEmptyRoomTime: 1000,// 保留1秒\n        });\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n\n        await testData.gameClient1.leaveRoom();\n        await delay(50);// 空房间保留时间内\n\n        testData.gameClient1 = await authToGameServer('zum1', testData.playerToken1, gameClient1Ret.data!.gameServerUrl);\n        let joinRet = await testData.gameClient1.joinRoom({ roomId });\n        assert.ok(joinRet.succ, joinRet.err);\n\n        await testData.gameClient1.leaveRoom();\n        await delay(1200);// 超过空房间保留时间\n\n        testData.gameClient1 = await authToGameServer('zum1', testData.playerToken1, gameClient1Ret.data!.gameServerUrl);\n        joinRet = await testData.gameClient1.joinRoom({ roomId });\n        assert.ok(!joinRet.succ && joinRet.code === ErrorCodes.RoomNotFound, '应该加入失败,并且找不到房间' + JSON.stringify(joinRet));\n\n    });\n\n    test('房主的保留位置', async function () {\n        //创建单人房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            maxPlayers: 2,\n            isPrivate: true,\n            retainOwnSeat: true,//保留房主的位置\n        });\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n        let gameServerUrl = gameClient1Ret.data!.gameServerUrl\n\n        // 玩家2加入\n        testData.gameClient2 = await authToGameServer('zum2', testData.playerToken2, gameServerUrl);\n        let joinRet = await testData.gameClient2.joinRoom({ roomId });\n        assert.ok(joinRet.succ, joinRet.err);\n\n        // 玩家1用下线的方式离开房间\n        await testData.gameClient1.disconnect()\n\n        // 玩家3加入, 应该是失败的\n        testData.gameClient3 = await authToGameServer('zum3', testData.playerToken3, gameServerUrl);\n        joinRet = await testData.gameClient3.joinRoom({ roomId });\n        assert.ok(!joinRet.succ && joinRet.code === ErrorCodes.RoomPlayersFull,\n            \"应该是房间人满,但:\" + JSON.stringify(joinRet));\n\n        // 玩家1加入\n        testData.gameClient1 = await authToGameServer('zum1', testData.playerToken1, gameServerUrl);\n        joinRet = await testData.gameClient1.joinRoom({ roomId });\n        assert.ok(joinRet.succ, joinRet.err);\n\n    });\n\n\n    test('房主退出房间后调用大厅接口解散房间', async function () {\n        //创建单人房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            maxPlayers: 2,\n            isPrivate: true,\n        });\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n        let gameServerUrl = gameClient1Ret.data!.gameServerUrl\n\n        // 玩家2加入\n        testData.gameClient2 = await authToGameServer('zum2', testData.playerToken2, gameServerUrl);\n        let joinRet = await testData.gameClient2.joinRoom({ roomId });\n        assert.ok(joinRet.succ, joinRet.err);\n\n        let onDismissRoom = 0;\n        testData.gameClient1.onDismissRoom = () => {\n            onDismissRoom++;\n        };\n        testData.gameClient2.onDismissRoom = () => {\n            onDismissRoom++;\n        };\n\n        let dRet = await appDismissRoom(roomId);\n        assert.ok(dRet.succ, dRet.err);\n\n        await delay(500);\n\n        let regRet = await hallClient.getRoomOnlineInfo(testData.playerToken1, roomId);\n        assert.ok(!regRet.succ && regRet.code === ErrorCodes.RoomNotFound, '房间应该被解散了!' + JSON.stringify(regRet));\n        assert.ok(onDismissRoom === 2, `应该收到2条解散房间的消息,但实际${onDismissRoom}条`);\n\n    });\n\n    test('使用指定房间id创建房间', async function () {\n        //创建单人房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            roomId: '1',\n            maxPlayers: 2,\n            isPrivate: true,\n        });\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId = gameClient1Ret.data!.roomId;\n        let gameServerUrl = gameClient1Ret.data!.gameServerUrl\n\n        // 玩家2加入\n        testData.gameClient2 = await authToGameServer('zum2', testData.playerToken2, gameServerUrl);\n        let joinRet = await testData.gameClient2.joinRoom({ roomId });\n        assert.ok(joinRet.succ, joinRet.err);\n\n        let onDismissRoom = 0;\n        testData.gameClient1.onDismissRoom = () => {\n            onDismissRoom++;\n        };\n        testData.gameClient2.onDismissRoom = () => {\n            onDismissRoom++;\n        };\n\n        let dRet = await appDismissRoom(roomId);\n        assert.ok(dRet.succ, dRet.err);\n\n        await delay(500);\n\n        let regRet = await hallClient.getRoomOnlineInfo(testData.playerToken1, roomId);\n        assert.ok(!regRet.succ && regRet.code === ErrorCodes.RoomNotFound, '房间应该被解散了!' + JSON.stringify(regRet));\n        assert.ok(onDismissRoom === 2, `应该收到2条解散房间的消息,但实际${onDismissRoom}条`);\n\n        await testData.gameClient1.disconnect();\n        await testData.gameClient2.disconnect();\n\n        // 同id房间 重复创建的验证\n        gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            roomId: '1',\n            maxPlayers: 2,\n            isPrivate: true,\n        });\n        assert.ok(gameClient1Ret.succ, `解散过的房间id应该是可以重复使用的:${gameClient1Ret.err}`);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n\n        // 重新再创建一个同id房间\n        let gameClient2Ret = await createAndEnterRoom(testData.playerToken2, testData.playerId2, 'zum2', {\n            roomId: '1',\n            maxPlayers: 2,\n            isPrivate: true,\n        });\n        assert.ok(!gameClient2Ret.succ && gameClient2Ret.code === ErrorCodes.RoomIdExists,\n            `重复的房间id应该报错:${JSON.stringify(gameClient2Ret)}`);\n\n        // 再测试游戏服务器中的解散\n        await testData.gameClient1.dismissRoom();\n\n        //马上验证\n        gameClient2Ret = await createAndEnterRoom(testData.playerToken2, testData.playerId2, 'zum2', {\n            roomId: '1',\n            maxPlayers: 2,\n            isPrivate: true,\n        });\n        assert.ok(gameClient2Ret.succ, `解散过的房间id应该是可以重复使用的:${gameClient2Ret.err}`);\n        testData.gameClient2 = gameClient2Ret.data!.gameClient;\n\n\n    });\n\n    test('筛选房间', async function () {\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            maxPlayers: 2,\n            isPrivate: true,\n            roomType: 'test',\n            roomName: 'name',\n        });\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n\n        let filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            maxPlayers: 2,\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomNameFullMatch: 'name',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomNameLike: 'name',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomNameLike: 'n',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameFullMatch: 'name',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameFullMatch: 'name',\n            roomNameLike: 'n'\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomNameLike: 'nonono'\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 0, `应该匹配到0个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameFullMatch: 'name',\n            roomNameLike: 'nonono'\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 0, `应该匹配到0个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameFullMatch: 'name',\n            roomNameLike: 'n'\n        }, 1, 1);\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 0, `应该匹配到0个,实际为${JSON.stringify(filterRet)}`);\n\n        let gameClient2Ret = await createAndEnterRoom(testData.playerToken2, testData.playerId2, 'zum2', {\n            maxPlayers: 2,\n            isPrivate: true,\n            roomType: 'test',\n            roomName: 'name2',\n        });\n        assert.ok(gameClient2Ret.succ, gameClient2Ret.err);\n        testData.gameClient2 = gameClient2Ret.data!.gameClient;\n\n        // 继续匹配验证\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 2, `应该匹配到2个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            maxPlayers: 2,\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 2, `应该匹配到2个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomNameFullMatch: 'name',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomNameLike: 'name2',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomNameLike: 'n',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 2, `应该匹配到2个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameFullMatch: 'name',\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameFullMatch: 'name',\n            roomNameLike: 'n'\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomNameLike: 'nonono'\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 0, `应该匹配到0个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameFullMatch: 'name',\n            roomNameLike: 'nonono'\n        });\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 0, `应该匹配到0个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameLike: 'name'\n        }, 1, 1);\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameLike: 'name'\n        }, 0, 1);\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n\n        filterRet = await hallClient.filterRooms(testData.playerToken1, {\n            roomType: 'test',\n            roomNameLike: 'name'\n        }, 1, 2);\n        assert.ok(filterRet.succ, filterRet.err);\n        assert.ok(filterRet.data!.rooms.length === 1, `应该匹配到1个,实际为${JSON.stringify(filterRet)}`);\n    });\n\n\n    test('随机要求玩家同步状态', async function () {\n        const invMs = 1000;\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', {\n            maxPlayers: 2,\n            isPrivate: true,\n            roomType: 'test',\n            roomName: 'name',\n            randomRequirePlayerSyncStateInvMs: invMs,\n        });\n        assert.ok(gameClient1Ret.succ, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n\n        let prevTime: number = 0;\n        let hasMatch = false;\n        let rtUseTime = 0;\n        testData.gameClient1.onRequirePlayerSyncState = () => {\n            rtUseTime = Date.now() - prevTime;\n            if (Math.abs(invMs - rtUseTime) < 200) {\n                // 误差200ms内算符合预期\n                hasMatch = true;\n            } else {\n                hasMatch = false;\n            }\n            prevTime = Date.now();\n        };\n        let ret = await testData.gameClient1.startFrameSync();\n        assert.ok(ret.succ, ret.err);\n        prevTime = Date.now();\n\n        await delay(invMs + 1000);\n\n        console.log('【要求玩家同步全量数据】实际花了：',rtUseTime);\n        assert.ok(hasMatch, '没收到预期的【要求玩家同步全量数据】的请求')\n\n        let gameClient2Ret = await createAndEnterRoom(testData.playerToken2, testData.playerId2, 'zum2', {\n            maxPlayers: 2,\n            isPrivate: true,\n            roomType: 'test',\n            roomName: 'name',\n        });\n        assert.ok(gameClient2Ret.succ, gameClient2Ret.err);\n        testData.gameClient2 = gameClient2Ret.data!.gameClient;\n        let hasReqStateMsg = false;\n        testData.gameClient2.onRequirePlayerSyncState = () => {\n            //不应该收到消息，有收到就算匹配了\n            hasReqStateMsg = true;\n        };\n        ret = await testData.gameClient2.startFrameSync();\n        assert.ok(ret.succ, ret.err);\n        await delay(1000);\n        assert.ok(!hasReqStateMsg, '收到预期外的【要求玩家同步全量数据】的请求')\n    });\n});\n"]}