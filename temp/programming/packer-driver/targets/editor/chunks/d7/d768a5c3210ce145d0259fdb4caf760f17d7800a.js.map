{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/CryptoHelper.ts"],"names":["CryptoHelper","CryptoJS","md5","str","wordArray","MD5","enc","Hex","stringify","desEncryptECB_PKCS7_Base64","input","strKey","keyBytes","lib","WordArray","create","Utf8","parse","words","slice","inputBytes","enResult","DES","encrypt","mode","ECB","padding","pad","Pkcs7","retStr","ciphertext","toString","Base64","desDecryptECB_PKCS7_Base64","inputBase64","cipherParams","CipherParams","decrypt"],"mappings":";;;wCAIaA,Y;;;;;;;;;;;;;;AAFNC,MAAAA,Q;;;;;;;8BAEMD,Y,GAAN,MAAMA,YAAN,CAAmB;AAEtB;AACJ;AACA;AACA;AACA;AACqB,eAAHE,GAAG,CAACC,GAAD,EAAsB;AACnC,cAAIC,SAAS,GAAG;AAAA;AAAA,oCAASC,GAAT,CAAaF,GAAb,CAAhB;AACA,iBAAO;AAAA;AAAA,oCAASG,GAAT,CAAaC,GAAb,CAAiBC,SAAjB,CAA2BJ,SAA3B,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC4C,eAA1BK,0BAA0B,CAACC,KAAD,EAAgBC,MAAhB,EAAwC;AAC5E;AACA,cAAIC,QAAQ,GAAG;AAAA;AAAA,oCAASC,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8B;AAAA;AAAA,oCAAST,GAAT,CAAaU,IAAb,CAAkBC,KAAlB,CAAwBN,MAAxB,EAAgCO,KAAhC,CAAsCC,KAAtC,CAA4C,CAA5C,EAA+C,CAA/C,CAA9B,EAAiF,CAAjF,CAAf;AACA,cAAIC,UAAU,GAAG;AAAA;AAAA,oCAASd,GAAT,CAAaU,IAAb,CAAkBC,KAAlB,CAAwBP,KAAxB,CAAjB;AACA,cAAIW,QAAQ,GAAG;AAAA;AAAA,oCAASC,GAAT,CAAaC,OAAb,CAAqBH,UAArB,EAAiCR,QAAjC,EAA2C;AACtDY,YAAAA,IAAI,EAAE;AAAA;AAAA,sCAASA,IAAT,CAAcC,GADkC;AAEtDC,YAAAA,OAAO,EAAE;AAAA;AAAA,sCAASC,GAAT,CAAaC;AAFgC,WAA3C,CAAf;AAIA,cAAIC,MAAM,GAAGR,QAAQ,CAACS,UAAT,CAAoBC,QAApB,CAA6B;AAAA;AAAA,oCAASzB,GAAT,CAAa0B,MAA1C,CAAb;AAEA,iBAAOH,MAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC4C,eAA1BI,0BAA0B,CAACC,WAAD,EAAsBvB,MAAtB,EAA8C;AAClF;AACA,cAAIC,QAAQ,GAAG;AAAA;AAAA,oCAASC,GAAT,CAAaC,SAAb,CAAuBC,MAAvB,CAA8B;AAAA;AAAA,oCAAST,GAAT,CAAaU,IAAb,CAAkBC,KAAlB,CAAwBN,MAAxB,EAAgCO,KAAhC,CAAsCC,KAAtC,CAA4C,CAA5C,EAA+C,CAA/C,CAA9B,EAAiF,CAAjF,CAAf;AACA,cAAIC,UAAU,GAAG;AAAA;AAAA,oCAASd,GAAT,CAAa0B,MAAb,CAAoBf,KAApB,CAA0BiB,WAA1B,CAAjB;AACA,cAAIC,YAAY,GAAG;AAAA;AAAA,oCAAStB,GAAT,CAAauB,YAAb,CAA0BrB,MAA1B,CAAiC;AAChDe,YAAAA,UAAU,EAAEV;AADoC,WAAjC,CAAnB;AAGA,cAAIC,QAAQ,GAAG;AAAA;AAAA,oCAASC,GAAT,CAAae,OAAb,CAAqBF,YAArB,EAAmCvB,QAAnC,EAA6C;AACxDY,YAAAA,IAAI,EAAE;AAAA;AAAA,sCAASA,IAAT,CAAcC,GADoC;AAExDC,YAAAA,OAAO,EAAE;AAAA;AAAA,sCAASC,GAAT,CAAaC;AAFkC,WAA7C,CAAf;AAIA,cAAIC,MAAM,GAAGR,QAAQ,CAACU,QAAT,CAAkB;AAAA;AAAA,oCAASzB,GAAT,CAAaU,IAA/B,CAAb;AAEA,iBAAOa,MAAP;AACH;;AAtDqB,O","sourcesContent":["\n\nimport CryptoJS from 'crypto-js';\n\nexport class CryptoHelper {\n\n    /**\n     * 字符串MD5加密\n     * @param str \n     * @returns md5 \n     */\n    public static md5(str: string): string {\n        let wordArray = CryptoJS.MD5(str);\n        return CryptoJS.enc.Hex.stringify(wordArray);\n    }\n\n    /**\n     * des加密，ECB模式，PKCS7填充，密钥用UTF8提取前8个字节，输入字符串使用UTF8编码解析，输出加密后的base64编码字符串\n     *\n     * @public\n     * @param input 要加密的字符串（明文）\n     * @param strKey 长度超过8个字节即可，只会取前8个字节\n     * @returns\n     */\n    public static desEncryptECB_PKCS7_Base64(input: string, strKey: string): string {\n        //转为utf8字节,并只取前8个字节\n        let keyBytes = CryptoJS.lib.WordArray.create(CryptoJS.enc.Utf8.parse(strKey).words.slice(0, 8), 8);\n        let inputBytes = CryptoJS.enc.Utf8.parse(input);\n        let enResult = CryptoJS.DES.encrypt(inputBytes, keyBytes, {\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7\n        });\n        let retStr = enResult.ciphertext.toString(CryptoJS.enc.Base64);\n\n        return retStr;\n    }\n    /**\n     * des解密，ECB模式，PKCS7填充，密钥用UTF8提取前8个字节，输入字符串使用UTF8编码解析，输出加密后的base64编码字符串\n     *\n     * @public\n     * @param inputBase64 密文（base64格式）\n     * @param strKey\n     * @returns\n     */\n    public static desDecryptECB_PKCS7_Base64(inputBase64: string, strKey: string): string {\n        //转为utf8字节,并只取前8个字节\n        let keyBytes = CryptoJS.lib.WordArray.create(CryptoJS.enc.Utf8.parse(strKey).words.slice(0, 8), 8);\n        let inputBytes = CryptoJS.enc.Base64.parse(inputBase64);\n        let cipherParams = CryptoJS.lib.CipherParams.create({\n            ciphertext: inputBytes,\n        });\n        let enResult = CryptoJS.DES.decrypt(cipherParams, keyBytes, {\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7,\n        });\n        let retStr = enResult.toString(CryptoJS.enc.Utf8);\n\n        return retStr;\n    }\n\n}"]}