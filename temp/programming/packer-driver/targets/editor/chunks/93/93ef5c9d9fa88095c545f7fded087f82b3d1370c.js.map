{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/gameCluster/GameClusterTerminal.ts"],"names":["GameClusterTerminal","ErrorCodes","Result","ClusterNodeClient","EClusterClientType","gameClusterServiceProto","serviceProto","terminalClient","clusterClient","constructor","clusterServerUrl","terminalId","terminalKey","Terminal","createRoom","appId","createRoomPara","createType","buildErr","AuthUnverified","ret","callApi","isSucc","err","message","code","buildSucc","res","roomOnlineInfo","dismissRoom","roomId","getRoomOnlineInfo","getOrCreateRoom","getOrCreateRoomPara","filterRooms","filter","skip","limit"],"mappings":"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","sourcesContent":["import { WsClient } from \"tsrpc\";\nimport { ErrorCodes, IResult, Result } from \"../../tsgf/Result\";\nimport { ERoomCreateType, ICreateRoomPara, IGetOrCreateRoomPara, IGetOrCreateRoomRsp, IRoomOnlineInfo, IRoomsFilterPara, IRoomsFilterRes } from \"../../tsgf/room/IRoomInfo\";\nimport { ClusterNodeClient } from \"../cluster/ClusterNodeClient\";\nimport { EClusterClientType } from \"../cluster/Models\";\nimport { IGameServerInfoInServer } from \"../game/Models\";\nimport { IRoomRegInfo } from \"../room/Models\";\nimport { ServiceType as GameClusterServiceType, serviceProto as gameClusterServiceProto } from \"./protocols/serviceProto\";\n\nexport class GameClusterTerminal extends ClusterNodeClient<GameClusterServiceType, IGameServerInfoInServer>{\n\n    protected get terminalClient(): WsClient<GameClusterServiceType> | undefined {\n        return this.clusterClient as WsClient<GameClusterServiceType> | undefined;\n    }\n\n    constructor(\n        clusterServerUrl: string, terminalId: string, terminalKey: string\n    ) {\n        super(gameClusterServiceProto, clusterServerUrl, EClusterClientType.Terminal, terminalId, terminalKey);\n    }\n\n\n\n    public async createRoom(appId: string, createRoomPara: ICreateRoomPara, createType: ERoomCreateType): Promise<IResult<IRoomOnlineInfo>> {\n        if (!this.terminalClient) return Result.buildErr('当前服务器断开！请稍后再试！', ErrorCodes.AuthUnverified);\n\n        let ret = await this.terminalClient.callApi('TerminalCreateRoom', {\n            ...createRoomPara,\n            appId,\n            createType,\n        });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.roomOnlineInfo);\n    }\n    /**\n     * 要求集群解散房间\n     * @param roomId \n     * @returns room \n     */\n    public async dismissRoom(roomId: string): Promise<IResult<IRoomOnlineInfo>> {\n        if (!this.terminalClient) return Result.buildErr('当前服务器断开！请稍后再试！', ErrorCodes.AuthUnverified);\n\n        let ret = await this.terminalClient.callApi('TerminalDismissRoom', { roomId });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.roomOnlineInfo);\n    }\n    /**\n     * 获取房间在线信息\n     * @param roomId \n     * @returns room \n     */\n    public async getRoomOnlineInfo(roomId: string): Promise<IResult<IRoomOnlineInfo>> {\n        if (!this.terminalClient) return Result.buildErr('当前服务器断开！请稍后再试！', ErrorCodes.AuthUnverified);\n\n        let ret = await this.terminalClient.callApi('TerminalGetRoomOnlineInfo', { roomId });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res.roomOnlineInfo);\n    }\n\n    /**\n     * Gets or create room\n     * @param appId \n     * @param getOrCreateRoomPara \n     * @returns or create room \n     */\n    public async getOrCreateRoom(appId: string, getOrCreateRoomPara: IGetOrCreateRoomPara): Promise<IResult<IGetOrCreateRoomRsp>> {\n        if (!this.terminalClient) return Result.buildErr('当前服务器断开！请稍后再试！', ErrorCodes.AuthUnverified);\n\n        let ret = await this.terminalClient.callApi('TerminalGetOrCreateRoom', { \n            ...getOrCreateRoomPara,\n            appId,\n         });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res);\n    }\n    \n    /**\n     * Filters rooms\n     * @param filter \n     * @param [skip] \n     * @param [limit] \n     * @returns rooms \n     */\n    public async filterRooms(\n        filter: IRoomsFilterPara,\n        skip?: number,\n        limit?: number\n    ): Promise<IResult<IRoomsFilterRes>> {\n        if (!this.terminalClient) return Result.buildErr('当前服务器断开！请稍后再试！', ErrorCodes.AuthUnverified);\n\n        let ret = await this.terminalClient.callApi('TerminalFilterRoom', { filter,skip,limit });\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err?.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res);\n    }\n}"]}