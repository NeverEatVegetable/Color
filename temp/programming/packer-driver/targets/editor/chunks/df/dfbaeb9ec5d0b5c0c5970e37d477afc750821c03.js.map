{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/gameServer/GameRoom.ts"],"names":["GameRoom","logger","EMatchFromType","ENetworkState","ErrorCodes","Result","EPlayerInputFrameType","EFrameSyncState","EPrivateRoomJoinMode","arrCount","arrGroup","arrRemoveItems","PlayerAuthHelper","ERoomRegChangedType","RoomHelper","buildPlayerRobotId","ConnectionCollection","FrameSyncGame","constructor","roomRegInfo","roomInfo","gameWsServer","gameConnMgr","matchReqTerminal","gameClusterClient","onlinePlayerConns","game","isDismiss","joinUsMatchReqId","onRoomAllPlayersMatchResult","onRoomAllPlayersMatchResultOther","c","playerId","connections","frameRate","randomRequirePlayerSyncStateInvMs","dispose","internalDismissRoom","triggerDismissRoomNotify","playerList","clearAllConnections","triggerPlayerJoinRoomNotify","joinPlayerInfo","broadcastMsg","joinPlayerId","filter","triggerPlayerLeaveRoomNotify","leavePlayerInfo","playerInfos","connList","playerInfo","playerConn","getPlayerConn","push","triggerStartFrameSyncNotify","startPlayerInfo","startPlayerId","triggerStopFrameSyncNotify","stopPlayerInfo","stopPlayerId","triggerChangePlayerNetworkState","changePlayerId","networkState","triggerChangeRoomNotify","triggerChangeCustomPlayerStatus","oldVal","customPlayerStatus","oldCustomPlayerStatus","triggerChangeCustomPlayerProfile","customPlayerProfile","oldCustomPlayerProfile","triggerChangePlayerTeam","teamId","oldTeamId","autoSetRoomJoinUsMatch","mustNew","isPrivate","matcherKey","maxPlayers","length","frameSyncState","START","disabledRoomJoinUsMatch","ret","requestMatch","appId","matchTimeoutSec","matchFromType","RoomJoinUs","matchFromInfo","roomId","currPlayerCount","teamsPlayerIds","slice","matcherParams","_","succ","error","err","data","cancelMatch","undefined","buildTeamsPlayerIds","arr","group","p","groupList","playerIds","map","dismissRoom","stopGame","tmpArr","roomPlayer","getPlayer","internalLeaveRoom","player","canUpdateRegInfo","authInfo","currRoomId","updatePlayerCurrRoomId","playerToken","leavePlayers","roomRobotPlayers","size","forEach","robitPlayer","internalLeaveRoomData","clear","emptySeats","getRoomEmptySeats","Promise","all","updateRoom","PlayerLeaveRoom","removeConnection","internalPlayerLeaveTeam","oldTeamIndex","teamList","findIndex","t","id","freeTeamMinPlayers","freeTeamMaxPlayers","splice","roomRobotIds","playerInpFrame","LeaveRoom","inpFrame","internalJoinRoom","joinPara","robotOwnPlayerInfo","existsPlayerInfo","find","buildSucc","buildErr","Exception","ownerPlayerId","retainOwnSeat","RoomPlayersFull","RoomForbidJoin","privateRoomJoinMode","forbidJoin","password","RoomMustPassword","privateRoomPassword","RoomPasswordWrong","changeTeamResult","internalChangePlayerTeam","code","Array","from","Set","addConnection","JoinRoom","PlayerJoinRoom","newTeamId","team","fixedTeamCount","RoomTeamNotFound","name","minPlayers","RoomTeamPlayersFull","PlayerChangeTeam","intenalChangeCustomPlayerStatus","newCustomPlayerStatus","intenalChangeCustomPlayerProfile","newCustomPlayerProfile","joinRoom","leaveRoom","leavePlayerInfos","retainEmptyRoomTime","RoomPermissionDenied","notifyPlayerInfos","changeRoom","changePara","changed","regChange","roomName","customProperties","ChangeInfo","changeCustomPlayerStatus","robotPlayerId","has","changeCustomPlayerProfile","changePlayerTeam","get","startGameFrameSync","startGameTime","Date","now","startGame","stopGameFrameSync","STOP","inpFrameType","setOthersProp","matchParams","allPlayerMatchReqId","MatchRequestCancelled","matchReq","matchResult","notifyTasks","playerResult","matchPlayerResults","conn","playerMatchResult","gameServerUrl","sendMsg","errMsg","errCode","call","reqRet","matchReqId","reqPlayerId","transition","queryMatch","queryTask","resolve","timeout","setTimeout","MatchQueryTimeout","clearTimeout","resultRet","queryRet","createRoomRobot","createPa","robotInfo","showName","isRobot","ONLINE","set","roomRobotLeave","tmpIds","delete"],"mappings":"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","sourcesContent":["\nimport { MsgPlayerInpFrame } from \"../shared/gameClient/protocols/MsgPlayerInpFrame\";\nimport { MatchRequestTerminal } from \"../shared/tsgfServer/match/MatchRequestTerminal\";\nimport { logger } from \"../shared/tsgf/logger\";\nimport { EMatchFromType, IMatchParamsFromPlayer, IMatchParamsFromRoomAllPlayer, IMatchResult, IMatchPlayerResultWithServer } from \"../shared/tsgf/match/Models\";\nimport { ENetworkState, IPlayerInfo, IPlayerInfoPara } from \"../shared/tsgf/player/IPlayerInfo\";\nimport { ErrorCodes, IResult, Result } from \"../shared/tsgf/Result\";\nimport { EPlayerInputFrameType, IFramePlayerInput } from \"../shared/tsgf/room/IGameFrame\";\nimport { EFrameSyncState, EPrivateRoomJoinMode, IChangeRoomPara, IJoinRoomPara, IRoomInfo, ITeamInfo, ITeamPlayerIds } from \"../shared/tsgf/room/IRoomInfo\";\nimport { arrCount, arrGroup, arrRemoveItems } from \"../shared/tsgf/Utils\";\nimport { IPlayer } from \"../shared/tsgfServer/auth/Models\";\nimport { PlayerAuthHelper } from \"../shared/tsgfServer/auth/PlayerAuthHelper\";\nimport { IMatchFromRoomAllPlayersOnServer, IMatchRequest } from \"../shared/tsgfServer/match/Models\";\nimport { IRoomRegInfo } from \"../shared/tsgfServer/room/Models\";\nimport { ERoomRegChangedType, RoomHelper } from \"../shared/tsgfServer/room/RoomHelper\";\nimport { buildGuid, buildPlayerId, buildPlayerRobotId } from \"../shared/tsgfServer/ServerUtils\";\nimport { ConnectionCollection } from \"./ConnectionCollection\";\nimport { FrameSyncGame } from \"./FrameSyncGame\";\nimport { GameConnMgr } from \"./GameConnMgr\";\nimport { ClientConnection, GameServer, GameWsServer } from \"./GameServer\";\nimport { GameClusterNodeClient } from \"../shared/tsgfServer/gameCluster/GameClusterNodeClient\";\n\n\n/**游戏房间操作对象*/\nexport class GameRoom {\n    private gameWsServer: GameWsServer;\n    private gameConnMgr: GameConnMgr;\n    private matchReqTerminal: MatchRequestTerminal;\n    private gameClusterClient: GameClusterNodeClient;\n    /**在线的玩家连接,连接标识使用的是玩家ID*/\n    public onlinePlayerConns: ConnectionCollection;\n    public roomRegInfo: IRoomRegInfo;\n    public roomInfo: IRoomInfo;\n    public game: FrameSyncGame;\n    public isDismiss: boolean = false;\n\n    /**招人匹配请求id,如果开启了则有值*/\n    private joinUsMatchReqId?: string;\n    /**内部设置当房间所有玩家发起匹配的结果回调*/\n    private onRoomAllPlayersMatchResult?: (matchResult: IResult<IMatchResult>) => any;\n    private onRoomAllPlayersMatchResultOther?: (matchResult: IResult<IMatchResult>) => any;\n\n    constructor(roomRegInfo: IRoomRegInfo, roomInfo: IRoomInfo,\n        gameWsServer: GameWsServer, gameConnMgr: GameConnMgr,\n        matchReqTerminal: MatchRequestTerminal,\n        gameClusterClient: GameClusterNodeClient\n    ) {\n        this.roomRegInfo = roomRegInfo;\n        this.roomInfo = roomInfo;\n        this.gameConnMgr = gameConnMgr;\n        this.gameWsServer = gameWsServer;\n        this.matchReqTerminal = matchReqTerminal;\n        this.gameClusterClient = gameClusterClient;\n        this.onlinePlayerConns = new ConnectionCollection(c => c.playerId);\n        this.game = new FrameSyncGame(this.roomInfo, gameWsServer, this.gameConnMgr,\n            () => this.onlinePlayerConns.connections, roomInfo.frameRate, roomInfo.randomRequirePlayerSyncStateInvMs);\n    }\n    public dispose() {\n\n        //如果还没解散就释放,则先执行解散\n        if (!this.isDismiss) {\n            //执行实际的解散逻辑（数据操作）\n            this.internalDismissRoom();\n            //触发事件\n            this.triggerDismissRoomNotify(this.roomInfo.playerList);\n        }\n\n        this.game.dispose();\n\n        this.onlinePlayerConns.clearAllConnections();\n    }\n\n    /**触发玩家进入房间事件的通知, 不会通知当前玩家*/\n    protected async triggerPlayerJoinRoomNotify(joinPlayerInfo: IPlayerInfo) {\n        await this.gameWsServer.broadcastMsg('NotifyJoinRoom', {\n            joinPlayerId: joinPlayerInfo.playerId,\n            roomInfo: this.roomInfo,\n        }, this.onlinePlayerConns.connections.filter(c => c.playerId !== joinPlayerInfo.playerId));\n    }\n    /**触发玩家离开房间事件的通知, 不会通知当前玩家*/\n    protected async triggerPlayerLeaveRoomNotify(leavePlayerInfo: IPlayerInfo) {\n        await this.gameWsServer.broadcastMsg('NotifyLeaveRoom', {\n            leavePlayerInfo: leavePlayerInfo,\n            roomInfo: this.roomInfo,\n        }, this.onlinePlayerConns.connections.filter(c => c.playerId !== leavePlayerInfo.playerId));\n    }\n    protected async triggerDismissRoomNotify(playerInfos: IPlayerInfo[]) {\n        let connList: ClientConnection[] = [];\n        for (let playerInfo of playerInfos) {\n            let playerConn = this.gameConnMgr.getPlayerConn(playerInfo.playerId);\n            if (!playerConn) continue;\n            connList.push(playerConn);\n        }\n        await this.gameWsServer.broadcastMsg('NotifyDismissRoom', {\n            roomInfo: this.roomInfo,\n        }, connList);\n    }\n    protected async triggerStartFrameSyncNotify(startPlayerInfo: IPlayerInfo) {\n        await this.gameWsServer.broadcastMsg('NotifyStartFrameSync', {\n            startPlayerId: startPlayerInfo.playerId,\n            roomInfo: this.roomInfo,\n        }, this.onlinePlayerConns.connections);\n    }\n    protected async triggerStopFrameSyncNotify(stopPlayerInfo: IPlayerInfo) {\n        await this.gameWsServer.broadcastMsg('NotifyStopFrameSync', {\n            stopPlayerId: stopPlayerInfo.playerId,\n            roomInfo: this.roomInfo,\n        }, this.onlinePlayerConns.connections);\n    }\n    public async triggerChangePlayerNetworkState(playerInfo: IPlayerInfo) {\n        await this.gameWsServer.broadcastMsg('NotifyChangePlayerNetworkState', {\n            roomInfo: this.roomInfo,\n            changePlayerId: playerInfo.playerId,\n            networkState: playerInfo.networkState,\n        }, this.onlinePlayerConns.connections);\n    }\n    protected async triggerChangeRoomNotify() {\n        await this.gameWsServer.broadcastMsg('NotifyChangeRoom', {\n            roomInfo: this.roomInfo,\n        }, this.onlinePlayerConns.connections);\n    }\n    public async triggerChangeCustomPlayerStatus(playerInfo: IPlayerInfo, oldVal: number) {\n        await this.gameWsServer.broadcastMsg('NotifyChangeCustomPlayerStatus', {\n            roomInfo: this.roomInfo,\n            changePlayerId: playerInfo.playerId,\n            customPlayerStatus: playerInfo.customPlayerStatus,\n            oldCustomPlayerStatus: oldVal,\n        }, this.onlinePlayerConns.connections);\n    }\n    public async triggerChangeCustomPlayerProfile(playerInfo: IPlayerInfo, oldVal: string) {\n        await this.gameWsServer.broadcastMsg('NotifyChangeCustomPlayerProfile', {\n            roomInfo: this.roomInfo,\n            changePlayerId: playerInfo.playerId,\n            customPlayerProfile: playerInfo.customPlayerProfile,\n            oldCustomPlayerProfile: oldVal,\n        }, this.onlinePlayerConns.connections);\n    }\n    public async triggerChangePlayerTeam(playerInfo: IPlayerInfo, oldVal?: string) {\n        await this.gameWsServer.broadcastMsg('NotifyChangePlayerTeam', {\n            roomInfo: this.roomInfo,\n            changePlayerId: playerInfo.playerId,\n            teamId: playerInfo.customPlayerProfile,\n            oldTeamId: oldVal,\n        }, this.onlinePlayerConns.connections);\n    }\n\n    /**自动设置(开启或停止)房间招人匹配*/\n    protected async autoSetRoomJoinUsMatch(mustNew = false): Promise<void> {\n\n        if (!this.roomInfo\n            || this.isDismiss\n            || this.roomInfo.isPrivate\n            || !this.roomInfo.matcherKey\n            || this.roomInfo.maxPlayers <= this.roomInfo.playerList.length\n            || this.roomInfo.frameSyncState === EFrameSyncState.START) {\n            //这里应该关闭匹配\n            this.disabledRoomJoinUsMatch();\n        } else {\n            //这里应该启用招人匹配\n            if (!mustNew && this.joinUsMatchReqId) {\n                //已经开启则忽略\n                return;\n            }\n            //请求匹配,并记录请求id\n            let ret = await this.matchReqTerminal.requestMatch(this.roomRegInfo.appId, {\n                matchTimeoutSec: 120, //最长2分钟轮询一次, 防止\n                matchFromType: EMatchFromType.RoomJoinUs,\n                matchFromInfo: {\n                    roomId: this.roomInfo.roomId,\n                    currPlayerCount: this.roomInfo.playerList.length,\n                    teamsPlayerIds: this.roomRegInfo.teamsPlayerIds.slice(),\n                },\n                matcherKey: this.roomInfo.matcherKey,\n                maxPlayers: this.roomInfo.maxPlayers,\n                matcherParams: {},\n            }, _ => {\n                //到这里应该是超时, 需要轮询状态, 防止中间有错误, 服务器内存就无限挂着一个无法连接的匹配房间!\n                this.autoSetRoomJoinUsMatch(true);\n            }, false);\n            if (!ret.succ) {\n                logger.error(`GameRoom.enabledRoomJoinUsMatch.requestMatch失败:${ret.err}  roomInfo:`, this.roomInfo);\n                return;\n            }\n            this.joinUsMatchReqId = ret.data;\n        }\n    }\n    /**停止房间招人匹配*/\n    protected async disabledRoomJoinUsMatch(): Promise<void> {\n        if (this.joinUsMatchReqId) {\n            await this.matchReqTerminal.cancelMatch(this.roomRegInfo.appId, this.joinUsMatchReqId);\n            this.joinUsMatchReqId = undefined;\n        }\n    }\n    /**生成队伍玩家id结构*/\n    protected buildTeamsPlayerIds(playerInfos: IPlayerInfo[]): ITeamPlayerIds[] {\n        let arr: ITeamPlayerIds[] = [];\n        let group = arrGroup(playerInfos, p => p.teamId);\n        for (let groupList of group) {\n            arr.push({\n                teamId: groupList[0] ?? '',\n                playerIds: groupList[1].map(p => p.playerId),\n            });\n        }\n        return arr;\n    }\n    /**\n     * [实际的数据操作] 解散房间\n     *\n     * @protected\n     * @returns\n     */\n    protected async internalDismissRoom(): Promise<void> {\n        if (this.isDismiss) return;\n\n        //删除房间注册信息, 截断后续新加入的人(存在失败的可能，集群可能先清理掉了，可以忽略)\n        await this.gameClusterClient.dismissRoom(this.roomInfo.roomId);\n\n        //停止游戏\n        this.game.stopGame();\n\n        //如果有开启招人匹配则停止\n        await this.disabledRoomJoinUsMatch();\n\n        //拷贝一份遍历,因为循环时会操作玩家数组\n        const tmpArr = [...this.roomInfo.playerList];\n        for (let playerInfo of tmpArr) {\n            let roomPlayer = this.gameConnMgr.getPlayer(playerInfo.playerId);\n            //机器人玩家没有连接, 忽略\n            if (!roomPlayer) continue;\n            await this.internalLeaveRoom(roomPlayer, false);\n        }\n        this.roomInfo.playerList.length = 0;\n        this.isDismiss = true;\n    }\n\n    /**\n     * [实际的数据操作] 玩家离开房间\n     *\n     * @public\n     * @param player\n     * @returns 返回实际离开的玩家数组(如果有会包含机器人玩家)\n     */\n    protected async internalLeaveRoom(player: IPlayer, canUpdateRegInfo: boolean = true): Promise<IPlayerInfo[]> {\n        let teamId = player.playerInfo.teamId;\n        //当前房间id设置为未定义\n        player.authInfo.currRoomId = undefined;\n        PlayerAuthHelper.updatePlayerCurrRoomId(player.authInfo.playerToken, player.authInfo.currRoomId);\n\n        const leavePlayers: IPlayerInfo[] = [];\n        if (player.roomRobotPlayers?.size) {\n            //玩家如果有连接机器人, 则先处理退出\n            player.roomRobotPlayers.forEach(robitPlayer => {\n                //自己的房间机器人操作离开房间数据\n                this.internalLeaveRoomData(robitPlayer);\n                leavePlayers.push(robitPlayer);\n            });\n            //清理房间机器人\n            player.roomRobotPlayers.clear();\n        }\n        //自己操作离开房间数据\n        this.internalLeaveRoomData(player.playerInfo);\n        leavePlayers.push(player.playerInfo);\n\n        //同步信息给房间注册信息\n        this.roomRegInfo.teamsPlayerIds = this.buildTeamsPlayerIds(this.roomInfo.playerList);\n        this.roomRegInfo.emptySeats = RoomHelper.getRoomEmptySeats(this.roomInfo);\n        if (canUpdateRegInfo) {\n            await Promise.all([\n                this.gameClusterClient.updateRoom(\n                    this.roomRegInfo,\n                    ERoomRegChangedType.PlayerLeaveRoom,\n                    player.playerInfo.playerId,\n                    teamId,\n                ),\n                //根据当前房间情况去自动开启或关闭招人匹配\n                this.autoSetRoomJoinUsMatch(),\n            ]);\n        }\n\n        //移除房间在线玩家连接\n        this.onlinePlayerConns.removeConnection(player.playerInfo.playerId);\n\n        return leavePlayers;\n    }\n\n    /**\n     * [内部实现] 玩家退出队伍的数据操作\n     * @param playerInfo \n     */\n    protected internalPlayerLeaveTeam(playerInfo: IPlayerInfo) {\n        let oldTeamId = playerInfo.teamId;\n        playerInfo.teamId = undefined;\n        if (oldTeamId) {\n            let oldTeamIndex = this.roomInfo.teamList.findIndex(t => t.id === oldTeamId);\n            if (oldTeamIndex > -1) {\n                //如果之前有在队伍中,需要处理\n                if (this.roomInfo.freeTeamMinPlayers && this.roomInfo.freeTeamMaxPlayers) {\n                    //是自由队伍的房间\n                    if (arrCount(this.roomInfo.playerList, p => p.teamId === oldTeamId) <= 0) {\n                        //之前队伍已经没人了,则销毁该队伍\n                        arrRemoveItems(this.roomInfo.teamList, t => t.id === oldTeamId);\n                        this.roomInfo.teamList.splice(oldTeamIndex, 1);\n                    }\n                }\n            }\n        }\n    }\n    /**玩家退出房间的数据操作*/\n    protected internalLeaveRoomData(playerInfo: IPlayerInfo) {\n        //玩家退出队伍数据操作\n        this.internalPlayerLeaveTeam(playerInfo);\n        //移除房间的玩家列表中该玩家对象\n        arrRemoveItems(this.roomInfo.playerList, p => p.playerId === playerInfo.playerId);\n        //离开房间了就清空当前房间控制的机器人列表(不管有没有)\n        playerInfo.roomRobotIds = undefined;\n        //玩家退出房间帧\n        this.game.playerInpFrame(playerInfo, EPlayerInputFrameType.LeaveRoom,\n            inpFrame => inpFrame.playerInfo = playerInfo);\n    }\n\n    /**玩家加入房间的内部操作, 同时会操作连接和通知, 成功的data===true则要求直接返回(如已经在房间中)*/\n    protected async internalJoinRoom(playerInfo: IPlayerInfo, joinPara: IJoinRoomPara, robotOwnPlayerInfo?: IPlayerInfo): Promise<IResult<boolean>> {\n        let existsPlayerInfo = this.roomInfo.playerList.find(p => p.playerId === playerInfo.playerId);\n        if (existsPlayerInfo) {\n            //这个玩家已经在房间中了，直接成功！\n            return Result.buildSucc(true);\n        }\n        let playerConn: ClientConnection | undefined;\n        if (!robotOwnPlayerInfo) {\n            //不是机器人,则需要处理连接\n            playerConn = this.gameConnMgr.getPlayerConn(playerInfo.playerId);\n            if (!playerConn) {\n                return Result.buildErr('玩家不在线！', ErrorCodes.Exception);\n            }\n        }\n        // 空位判断\n        if (this.roomRegInfo.emptySeats <= 0) {\n            // 但排除一种情况, 房主要进来由设置了保留空位, 则可以进!\n            if (playerInfo.playerId !== this.roomInfo.ownerPlayerId || !this.roomInfo.retainOwnSeat) {\n                //不是房主或者没设置给房主保留,则真满房~\n                return Result.buildErr('房间人数已满！', ErrorCodes.RoomPlayersFull);\n            }\n        }\n        if (this.roomInfo.isPrivate && this.roomInfo.ownerPlayerId !== playerInfo.playerId) {\n            // 私有房间,且加入的不是房主, 则需要验证一波\n            if (robotOwnPlayerInfo) {\n                //私有房的加机器人操作必须是房主\n                if (this.roomInfo.ownerPlayerId !== robotOwnPlayerInfo.playerId) {\n                    return Result.buildErr('房间不可加入！', ErrorCodes.RoomForbidJoin);\n                }\n            } else {\n                //正常玩家加入私有房的限制判断\n                switch (this.roomInfo.privateRoomJoinMode) {\n                    case EPrivateRoomJoinMode.forbidJoin:\n                        //房间不可加入时\n                        return Result.buildErr('房间不可加入！', ErrorCodes.RoomForbidJoin);\n                    case EPrivateRoomJoinMode.password:\n                        // 密码加入则需要提供密码\n                        if (!joinPara.password) {\n                            return Result.buildErr('房间需要密码！', ErrorCodes.RoomMustPassword);\n                        }\n                        if (joinPara.password !== this.roomRegInfo.privateRoomPassword) {\n                            return Result.buildErr('房间密码不正确！', ErrorCodes.RoomPasswordWrong);\n                        }\n                        break;\n                }\n            }\n        }\n        let changeTeamResult = await this.internalChangePlayerTeam(playerInfo, joinPara.teamId);\n        if (!changeTeamResult.succ) {\n            return Result.buildErr(changeTeamResult.err, changeTeamResult.code);\n        }\n        this.roomInfo.playerList.push(playerInfo);\n\n        if (robotOwnPlayerInfo) {\n            //是机器人, 则需要加到玩家拥有机器人数组上\n            robotOwnPlayerInfo.roomRobotIds = Array.from(new Set([\n                ...robotOwnPlayerInfo.roomRobotIds ?? [],\n                playerInfo.playerId\n            ]));\n        }\n\n        //加入房间先触发事件\n        await this.triggerPlayerJoinRoomNotify(playerInfo);\n\n        if (!robotOwnPlayerInfo) {\n            //不是机器人,则这个时候再把连接加入\n            this.onlinePlayerConns.addConnection(playerConn!);\n        }\n\n        //再给所有人发玩家加入房间的输入帧\n        this.game.playerInpFrame(playerInfo, EPlayerInputFrameType.JoinRoom,\n            inpFrame => inpFrame.playerInfo = playerInfo);\n\n        //更新房间注册信息\n        this.roomRegInfo.teamsPlayerIds = this.buildTeamsPlayerIds(this.roomInfo.playerList);\n        this.roomRegInfo.emptySeats = RoomHelper.getRoomEmptySeats(this.roomInfo);\n        await Promise.all([\n            this.gameClusterClient.updateRoom(\n                this.roomRegInfo,\n                ERoomRegChangedType.PlayerJoinRoom,\n                playerInfo.playerId,\n                joinPara.teamId,\n            ),\n            //根据当前房间情况去自动开启或关闭招人匹配\n            this.autoSetRoomJoinUsMatch(),\n        ]);\n\n        return Result.buildSucc(false);\n    }\n\n    /**内置变更玩家所在队伍, 只有实际变更了才会更新和推送, 有指定队伍会根据房间配置来初始化*/\n    protected async internalChangePlayerTeam(playerInfo: IPlayerInfo, newTeamId?: string): Promise<IResult<null>> {\n        if (newTeamId) {\n            //有指定队伍\n            let team = this.roomInfo.teamList.find(t => t.id === newTeamId);\n            if (!team) {\n                //不存在队伍需要判断情况\n                if (this.roomInfo.fixedTeamCount) {\n                    //又是固定队伍,所以直接返回失败!\n                    return Result.buildErr(`要加入的队伍id不存在[${newTeamId}]`, ErrorCodes.RoomTeamNotFound);\n                }\n                if (!this.roomInfo.freeTeamMinPlayers || !this.roomInfo.freeTeamMaxPlayers) {\n                    //但又没定义自由队伍的参数,所以直接返回失败!\n                    return Result.buildErr(`房间未定义自动创建队伍参数!`, ErrorCodes.RoomTeamNotFound);\n                }\n                team = {\n                    id: newTeamId,\n                    name: newTeamId,\n                    minPlayers: this.roomInfo.freeTeamMinPlayers,\n                    maxPlayers: this.roomInfo.freeTeamMaxPlayers,\n                };\n            }\n            if (arrCount(this.roomInfo.playerList, p => p.teamId === newTeamId) >= team.maxPlayers) {\n                return Result.buildErr(`要加入的队伍已满!`, ErrorCodes.RoomTeamPlayersFull);\n            }\n        }\n\n        let oldTeamId = playerInfo.teamId;\n        if (playerInfo.teamId !== newTeamId) {\n            //和之前队伍不一样才需要更新和推送\n            this.internalPlayerLeaveTeam(playerInfo);\n            playerInfo.teamId = newTeamId;\n            if (oldTeamId) {\n                let oldTeamIndex = this.roomInfo.teamList.findIndex(t => t.id === oldTeamId);\n                if (oldTeamIndex > -1) {\n                    //如果之前有在队伍中,需要处理\n                    if (this.roomInfo.freeTeamMinPlayers && this.roomInfo.freeTeamMaxPlayers) {\n                        //是自由队伍的房间\n                        if (arrCount(this.roomInfo.playerList, p => p.teamId === oldTeamId) <= 0) {\n                            //之前队伍已经没人了,则销毁该队伍\n                            arrRemoveItems(this.roomInfo.teamList, t => t.id === oldTeamId);\n                            this.roomInfo.teamList.splice(oldTeamIndex, 1);\n                        }\n                    }\n                }\n            }\n            this.roomRegInfo.emptySeats = RoomHelper.getRoomEmptySeats(this.roomInfo);\n            await Promise.all([\n                this.gameClusterClient.updateRoom(\n                    this.roomRegInfo,\n                    ERoomRegChangedType.PlayerChangeTeam,\n                    playerInfo.playerId,\n                    newTeamId,\n                    oldTeamId\n                ),\n                this.triggerChangePlayerTeam(playerInfo, oldTeamId),\n            ]);\n        }\n\n\n        return Result.buildSucc(null);\n    }\n\n    protected async intenalChangeCustomPlayerStatus(playerId: string, newCustomPlayerStatus: number)\n        : Promise<IResult<IPlayerInfo>> {\n        let playerInfo = this.roomInfo.playerList.find(p => p.playerId === playerId);\n        if (!playerInfo) return Result.buildErr('玩家不在房间中!', ErrorCodes.Exception);\n\n        if (playerInfo.customPlayerStatus !== newCustomPlayerStatus) {\n            let oldVal = playerInfo.customPlayerStatus;\n            playerInfo.customPlayerStatus = newCustomPlayerStatus;\n            //无需等待通知结果,直接返回操作成功\n            this.triggerChangeCustomPlayerStatus(playerInfo, oldVal);\n        }\n        return Result.buildSucc(playerInfo);\n    }\n\n    protected async intenalChangeCustomPlayerProfile(playerId: string, newCustomPlayerProfile: string)\n        : Promise<IResult<IPlayerInfo>> {\n        let playerInfo = this.roomInfo.playerList.find(p => p.playerId === playerId);\n        if (!playerInfo) return Result.buildErr('玩家不在房间中!');\n\n        if (playerInfo.customPlayerProfile !== newCustomPlayerProfile) {\n            let oldVal = playerInfo.customPlayerProfile;\n            playerInfo.customPlayerProfile = newCustomPlayerProfile;\n            this.triggerChangeCustomPlayerProfile(playerInfo, oldVal);\n        }\n\n        return Result.buildSucc(playerInfo);\n    }\n\n    /**\n     * 玩家加入房间，会根据房间等的规则判断是否可以加入\n     *\n     * @public\n     * @param player\n     * @returns\n     */\n    public async joinRoom(player: IPlayer, joinPara: IJoinRoomPara): Promise<IResult<IRoomInfo>> {\n        const ret = await this.internalJoinRoom(player.playerInfo, joinPara);\n        //加入失败,直接返回\n        if (!ret.succ) return Result.buildErr(ret);\n        //加入成功并且要求直接返回成功\n        if (ret.data) return Result.buildSucc(this.roomInfo);\n\n        //当前玩家的数据操作\n        player.authInfo.currRoomId = this.roomInfo.roomId;\n        PlayerAuthHelper.updatePlayerCurrRoomId(player.authInfo.playerToken, player.authInfo.currRoomId);\n\n        return Result.buildSucc(this.roomInfo);\n    }\n\n\n\n    /**\n     * 离开玩家当前所在的房间,如果离开后没人了,房间将被解散，返回房间是否被解散\n     *\n     * @public\n     * @param player\n     * @returns\n     */\n    public async leaveRoom(player: IPlayer): Promise<IResult<null>> {\n        const leavePlayerInfos = await this.internalLeaveRoom(player);\n\n        if (this.roomInfo.playerList.length <= 0) {\n            //房间没人了\n            if (!this.roomInfo.retainEmptyRoomTime) {\n                //没设置保留空房间,则直接解散\n                await this.internalDismissRoom();\n            }\n        } else {\n            //还有人，才需要触发事件\n            leavePlayerInfos.forEach(async playerInfo => {\n                await this.triggerPlayerLeaveRoomNotify(playerInfo);\n            });\n        }\n\n        return Result.buildSucc(null);\n    }\n\n    /**\n     * 解散房间\n     *\n     * @public\n     * @param player 当前玩家,如果是定时解散等没有当前玩家时,可以不传\n     * @returns\n     */\n    public async dismissRoom(player?: IPlayer): Promise<IResult<IRoomInfo>> {\n        if (player && this.roomInfo.ownerPlayerId !== player.playerInfo.playerId) {\n            return Result.buildErr('只有房主才可以解散房间！', ErrorCodes.RoomPermissionDenied);\n        }\n\n        //拷贝一份原有的玩家信息列表(排除自己)，用于做事件通知\n        let notifyPlayerInfos = player ?\n            this.roomInfo.playerList.filter(p => p.playerId !== player.playerInfo.playerId)\n            : [...this.roomInfo.playerList];\n\n        //执行实际的解散逻辑（数据操作）\n        await this.internalDismissRoom();\n\n        //触发事件(不等待)\n        this.triggerDismissRoomNotify(notifyPlayerInfos);\n\n        return Result.buildSucc(this.roomInfo);\n    }\n\n\n    /**\n     * 房主修改房间属性\n     *\n     * @public\n     * @param player 当前玩家\n     * @returns\n     */\n    public async changeRoom(player: IPlayer, changePara: IChangeRoomPara): Promise<IResult<IRoomInfo>> {\n        if (this.roomInfo.ownerPlayerId !== player.playerInfo.playerId) {\n            return Result.buildErr('只有房主才可以修改房间信息！');\n        }\n\n        let changed = false;\n        let regChange = false;\n        if (changePara.roomName) {\n            this.roomInfo.roomName = changePara.roomName;\n            this.roomRegInfo.roomName = changePara.roomName;\n            changed = true;\n        }\n        if (typeof (changePara.isPrivate) !== 'undefined') {\n            this.roomInfo.isPrivate = changePara.isPrivate;\n            this.roomRegInfo.isPrivate = this.roomInfo.isPrivate ? 1 : 0;\n            changed = true;\n            regChange = true;\n        }\n        if (typeof (changePara.privateRoomJoinMode) !== 'undefined') {\n            this.roomInfo.privateRoomJoinMode = changePara.privateRoomJoinMode;\n            this.roomRegInfo.privateRoomJoinMode = changePara.privateRoomJoinMode;\n            changed = true;\n            regChange = true;\n        }\n        if (typeof (changePara.privateRoomPassword) !== 'undefined') {\n            this.roomRegInfo.privateRoomPassword = changePara.privateRoomPassword;\n            changed = true;\n            regChange = true;\n        }\n        if (typeof (changePara.customProperties) !== 'undefined') {\n            this.roomInfo.customProperties = changePara.customProperties;\n            changed = true;\n        }\n        if (changed) {\n            if (regChange) {\n                await Promise.all([\n                    this.gameClusterClient.updateRoom(\n                        this.roomRegInfo,\n                        ERoomRegChangedType.ChangeInfo\n                    ),\n                ]);\n            }\n            //触发事件\n            this.triggerChangeRoomNotify();\n        }\n\n        return Result.buildSucc(this.roomInfo);\n    }\n    /**\n     *玩家修改自己的自定义状态\n     *\n     * @param player\n     * @param newCustomPlayerStatus\n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns\n     */\n    public async changeCustomPlayerStatus(player: IPlayer, newCustomPlayerStatus: number, robotPlayerId?: string): Promise<IResult<IPlayerInfo>> {\n        let playerId: string;\n        if (robotPlayerId) {\n            if (!player.roomRobotPlayers.has(robotPlayerId)) {\n                return Result.buildErr('非可操作玩家!', ErrorCodes.Exception);\n            }\n            playerId = robotPlayerId;\n        } else {\n            playerId = player.playerInfo.playerId;\n        }\n        return await this.intenalChangeCustomPlayerStatus(playerId, newCustomPlayerStatus);\n    }\n    /**\n     *玩家修改自己的自定义属性\n     *\n     * @param player\n     * @param newCustomPlayerProfile\n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns\n     */\n    public async changeCustomPlayerProfile(player: IPlayer, newCustomPlayerProfile: string, robotPlayerId?: string): Promise<IResult<IPlayerInfo>> {\n        let playerId: string;\n        if (robotPlayerId) {\n            if (!player.roomRobotPlayers.has(robotPlayerId)) {\n                return Result.buildErr('非可操作玩家!', ErrorCodes.Exception);\n            }\n            playerId = robotPlayerId;\n        } else {\n            playerId = player.playerInfo.playerId;\n        }\n        return await this.intenalChangeCustomPlayerProfile(playerId, newCustomPlayerProfile);\n    }\n    /**\n     *玩家修改自己所在队伍\n     *\n     * @param player\n     * @param newTeamId\n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns\n     */\n    public async changePlayerTeam(player: IPlayer, newTeamId?: string, robotPlayerId?: string): Promise<IResult<IRoomInfo>> {\n        let playerInfo: IPlayerInfo | undefined;\n        if (robotPlayerId) {\n            playerInfo = player.roomRobotPlayers.get(robotPlayerId);\n            if (!playerInfo) {\n                return Result.buildErr('非可操作玩家!', ErrorCodes.Exception);\n            }\n        } else {\n            playerInfo = player.playerInfo;\n        }\n\n        let ret = await this.internalChangePlayerTeam(playerInfo, newTeamId);\n        if (!ret.succ) return Result.buildErr(ret.err, ret.code);\n        return Result.buildSucc(this.roomInfo);\n    }\n\n\n    /**\n     * 开始游戏帧同步\n     *\n     * @public\n     */\n    public async startGameFrameSync(player: IPlayer): Promise<void> {\n        this.roomInfo.startGameTime = Date.now();\n        this.roomInfo.frameSyncState = EFrameSyncState.START;\n        //await等通知消息都发了,再启动游戏的帧同步\n        await this.triggerStartFrameSyncNotify(player.playerInfo);\n        this.game.startGame();\n\n        //根据当前房间情况去自动开启或关闭招人匹配\n        await this.autoSetRoomJoinUsMatch();\n    }\n\n    /**\n     * 停止游戏帧同步\n     *\n     * @public\n     */\n    public async stopGameFrameSync(player: IPlayer): Promise<void> {\n        this.game.stopGame();\n        this.roomInfo.frameSyncState = EFrameSyncState.STOP;\n        await this.triggerStopFrameSyncNotify(player.playerInfo);\n\n        //根据当前房间情况去自动开启或关闭招人匹配\n        await this.autoSetRoomJoinUsMatch();\n    }\n\n    /**\n     * 玩家输入帧\n     * @param player \n     * @param inpFrameType \n     * @param [setOthersProp] \n     * @param [robotPlayerId] 可以指定自己的房间机器人\n     * @returns  \n     */\n    public playerInpFrame(player: IPlayer, inpFrameType: EPlayerInputFrameType,\n        setOthersProp?: (inpFrame: IFramePlayerInput) => void, robotPlayerId?: string) {\n        let playerInfo: IPlayerInfo | undefined;\n        if (robotPlayerId) {\n            playerInfo = player.roomRobotPlayers.get(robotPlayerId);\n            if (!playerInfo) {\n                return Result.buildErr('非可操作玩家!', ErrorCodes.Exception);\n            }\n        } else {\n            playerInfo = player.playerInfo;\n        }\n        return this.game.playerInpFrame(playerInfo, inpFrameType, setOthersProp);\n    }\n\n\n    /**\n     * 发起房间所有玩家匹配请求\n     * 请求成功即返回,同时房间中的所有玩家会收到通知\n     * 匹配有结果了还会收到消息通知, 并且可由一个玩家调用QueryMatch等待完整匹配结果\n     *\n     * @public\n     * @param player\n     * @param matchParams\n     * @returns\n     */\n    public async requestMatch(player: IPlayer, matchParams: IMatchParamsFromRoomAllPlayer)\n        : Promise<IResult<string>> {\n        if (this.roomInfo.allPlayerMatchReqId) {\n            return Result.buildErr('当前在匹配中!要重新请求必须先取消!', ErrorCodes.MatchRequestCancelled);\n        }\n        //TODO: 发起后又加入玩家怎么算? 还是改成房间发起请求后是否停止加人? 如果停止加人是否设置一个停止原因?用于有人加入时返回消息\n\n        if (!matchParams.matchFromInfo) matchParams.matchFromInfo = {};\n        let matchReq = matchParams as IMatchRequest;\n        let matchFromInfo = matchReq.matchFromInfo as IMatchFromRoomAllPlayersOnServer;\n        //这里需要把当前房间中所有玩家id更新进去,对于服务器来说是多玩家匹配\n        matchFromInfo.playerIds = this.roomInfo.playerList.map(p => p.playerId);\n\n        this.onRoomAllPlayersMatchResult = async (matchResult) => {\n            this.onRoomAllPlayersMatchResult = undefined;\n            this.roomInfo.allPlayerMatchReqId = undefined;\n            if (matchResult.succ) {\n                //匹配结果是成功的,需要通知单独通知每个玩家自己的结果\n                let notifyTasks: Promise<any>[] = [];\n                for (let playerResult of matchResult.data.matchPlayerResults) {\n                    let conn = this.gameConnMgr.getPlayerConn(playerResult.playerId);\n                    if (!conn) continue;\n                    let playerMatchResult: IMatchPlayerResultWithServer = {\n                        gameServerUrl: matchResult.data.gameServerUrl,\n                        roomId: matchResult.data.roomId,\n                        teamId: playerResult.teamId,\n                    };\n                    notifyTasks.push(conn.sendMsg('NotifyRoomAllPlayersMatchResult', {\n                        roomInfo: this.roomInfo,\n                        matchResult: playerMatchResult,\n                    }));\n                }\n                await Promise.all(notifyTasks);\n            } else {\n                //匹配失败的,则结果一样,直接广播\n                await this.gameWsServer.broadcastMsg('NotifyRoomAllPlayersMatchResult', {\n                    roomInfo: this.roomInfo,\n                    errMsg: matchResult.err,\n                    errCode: matchResult.code,\n                }, this.onlinePlayerConns.connections);\n            }\n            this.onRoomAllPlayersMatchResultOther?.call(this, matchResult);\n        };\n        let reqRet = await this.matchReqTerminal.requestMatch(player.authInfo.appId, matchReq,\n            async (matchResult) => {\n                //匹配结果返回了(成功或失败)\n                this.onRoomAllPlayersMatchResult?.call(this, matchResult);\n            }\n        );\n        if (!reqRet.succ) {\n            //请求匹配失败了,直接返回失败\n            return reqRet;\n        }\n\n        this.roomInfo.allPlayerMatchReqId = reqRet.data;\n\n        //匹配请求正常发起了,通知相关玩家\n        await this.gameWsServer.broadcastMsg('NotifyRoomAllPlayersMatchStart', {\n            roomInfo: this.roomInfo,\n            matchReqId: reqRet.data,\n            matchParams: matchParams,\n            reqPlayerId: player.playerInfo.playerId,\n        }, this.onlinePlayerConns.connections);\n\n        return reqRet;\n    }\n\n    /**\n     * 取消匹配请求\n     * 如果提交成功, 将会由匹配服务器根据请求顺序来决定是否成功取消\n     * 如果成功取消,则会触发匹配结果(通知+queryMatch),结果为\"请求被取消\"[code=ErrorCodes.MatchRequestCancelled]\n     * 如果没取消成功,说明在取消之前,匹配服务器已经匹配完成,通知过来并发了,所以紧接着会收到成功的匹配结果(通知+queryMatch)\n     *\n     * @param player\n     * @returns\n     */\n    public async cancelMatch(player: IPlayer): Promise<IResult<null>> {\n        if (!this.roomInfo.allPlayerMatchReqId) {\n            return Result.buildErr('当前房间未发起匹配!', ErrorCodes.MatchRequestCancelled);\n        }\n\n        let reqRet = await this.matchReqTerminal\n            .cancelMatch(player.authInfo.appId, this.roomInfo.allPlayerMatchReqId, player.playerInfo.playerId);\n\n        return Result.transition(reqRet, () => null);\n    }\n\n    /**\n     * 查询匹配结果, 会等到有结果了才返回!\n     * 注意: 同时只能只有一个玩家进行查询等待,一般使用通知来获取结果即可\n     *\n     * @param player\n     * @returns \n     */\n    public async queryMatch(player: IPlayer): Promise<IResult<IMatchResult>> {\n        if (!this.roomInfo.allPlayerMatchReqId) {\n            return Result.buildErr('当前房间没发起匹配!', ErrorCodes.MatchRequestCancelled);\n        }\n        if (this.onRoomAllPlayersMatchResultOther) {\n            return Result.buildErr('同时只能一个玩家等待完整匹配结果!', ErrorCodes.MatchRequestCancelled);\n        }\n        let queryTask = new Promise<IResult<IMatchResult>>(async (resolve) => {\n            let timeout = setTimeout(() => {\n                //防止之后各种意外导致都没触发,这里保底\n                this.onRoomAllPlayersMatchResult?.call(this, Result.buildErr('查询超时!', ErrorCodes.MatchQueryTimeout));\n            }, 70000);\n            this.onRoomAllPlayersMatchResultOther = (matchResult) => {\n                //防止重复触发,置空\n                this.onRoomAllPlayersMatchResultOther = undefined;\n                clearTimeout(timeout);\n                resolve(matchResult);\n            };\n            let resultRet = await this.matchReqTerminal\n                .queryMatch(player.authInfo.appId, this.roomInfo.allPlayerMatchReqId!);\n            if (resultRet) {\n                //既然直接查询出结果,那么直接触发吧\n                this.onRoomAllPlayersMatchResult?.call(this, resultRet);\n            }\n        });\n        let queryRet = await queryTask;\n        return queryRet;\n    }\n\n\n    /**\n     * 玩家创建房间机器人(退出房间会同步退出)\n     * @param player \n     * @param createPa \n     * @param [teamId] \n     * @returns room robot \n     */\n    public async createRoomRobot(player: IPlayer, createPa: IPlayerInfoPara, teamId?: string): Promise<IResult<IPlayerInfo>> {\n\n        let robotInfo: IPlayerInfo = {\n            playerId: buildPlayerRobotId(player.playerInfo.playerId),\n            showName: createPa.showName ?? `${player.authInfo.showName}R${player.roomRobotPlayers.size}`,\n            customPlayerStatus: createPa.customPlayerStatus ?? 0,\n            customPlayerProfile: createPa.customPlayerProfile ?? '',\n            isRobot: true,\n            networkState: ENetworkState.ONLINE,\n        };\n\n        const ret = await this.internalJoinRoom(robotInfo, { roomId: this.roomInfo.roomId, teamId }, player.playerInfo);\n        //加入失败,直接返回\n        if (!ret.succ) return Result.buildErr(ret);\n\n        //机器人加入到玩家连接的房间机器人里\n        player.roomRobotPlayers.set(robotInfo.playerId, robotInfo);\n\n        return Result.buildSucc(robotInfo);\n    }\n\n    /**\n     * 玩家的指定房间机器人退出房间(即销毁)\n     * @param player \n     * @param robotPlayerId \n     * @returns  \n     */\n    public async roomRobotLeave(player: IPlayer, robotPlayerId: string): Promise<IResult<IPlayerInfo>> {\n        const robotInfo = player.roomRobotPlayers.get(robotPlayerId);\n        if (!robotInfo) return Result.buildErr('非可操作机器人!', ErrorCodes.Exception);\n        const teamId = robotInfo.teamId;\n        this.internalLeaveRoomData(robotInfo);\n\n        //移掉这个机器人\n        let tmpIds = new Set([...player.playerInfo.roomRobotIds ?? []]);\n        tmpIds.delete(robotPlayerId);\n        player.playerInfo.roomRobotIds = Array.from(tmpIds);\n\n        //通知玩家退出\n        await this.triggerPlayerLeaveRoomNotify(robotInfo);\n\n        //更新房间注册信息\n        this.roomRegInfo.teamsPlayerIds = this.buildTeamsPlayerIds(this.roomInfo.playerList);\n        this.roomRegInfo.emptySeats = RoomHelper.getRoomEmptySeats(this.roomInfo);\n        await Promise.all([\n            this.gameClusterClient.updateRoom(\n                this.roomRegInfo,\n                ERoomRegChangedType.PlayerJoinRoom,\n                robotPlayerId,\n                teamId,\n            ),\n            //根据当前房间情况去自动开启或关闭招人匹配\n            this.autoSetRoomJoinUsMatch(),\n        ]);\n\n        return Result.buildSucc(robotInfo);\n    }\n}"]}