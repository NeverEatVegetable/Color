{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/match/MatcherSingle.ts"],"names":["MatcherSingle","EMatchFromType","arrGroup","arrRemoveItems","arrSum","matcherKey","matchAllReqs","allReqs","joinRoomResults","createRoomResults","roomJoinUsReqs","playerReqs","forEach","r","matchFromType","RoomJoinUs","push","Player","RoomAllPlayers","sortByReqTime","checkReq","fromInfo","matchFromInfo","matchReqs","filter","matchReqGroupKey","length","ret","matchPlayerReqs","currPlayerCount","matchRequestPlayerResults","roomJoinUsMatch","matchPlayerCount","matchPlayerResults","maxPlayers","joinRoomId","roomId","maxPlayersReqs","group","reqs","groupMatchReqs","slice","i","find","matchReqId","attr","matcherParams","canPlayersMatchReqs","minPlayers","playerCount","playerIds","resultsContinueRoomJoinUsMatch","createRoomPara","roomName","ownerPlayerId","isPrivate","e","hasResult","resultCreateRoom","resultJoinRoom","checkReqPlayerCount","checkReqSelfApply","playerIdCount","matchReq","fromPlayerInfo","map","pid","playerId","selfReqResult","splice","sort","a","b","startMatchTime","onNewMatchReq","currMatchReq","onPollMatcherReqs"],"mappings":"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","sourcesContent":["import { EMatchFromType, ISingleMatcherParams, IMatchFromPlayer, IMatchParams } from \"../../tsgf/match/Models\";\nimport { arrGroup, arrRemoveItems, arrSum, arrWinner } from \"../../tsgf/Utils\";\nimport { IMatcher } from \"./IMatcher\";\nimport { IMatchRequest, IMatcherExecResult, IMatcherExecResultJoinRoom, IMatcherExecResultCreateRoom, IMatchFromRoomJoinUsOnServer, IMatchRequestPlayerResults } from \"./Models\";\n\n/**单人(无组队)匹配器\n * ISingleMatcherParams\n*/\nexport class MatcherSingle implements IMatcher {\n    public matcherKey: string = 'Single';\n\n    protected matchAllReqs(allReqs: IMatchRequest[]): IMatcherExecResult {\n\n        let joinRoomResults: IMatcherExecResultJoinRoom[] = [];\n        let createRoomResults: IMatcherExecResultCreateRoom[] = [];\n\n        let roomJoinUsReqs: IMatchRequest[] = [];\n        let playerReqs: IMatchRequest[] = [];\n\n        allReqs.forEach(r => {\n            switch (r.matchFromType) {\n                case EMatchFromType.RoomJoinUs:\n                    roomJoinUsReqs.push(r);\n                    break;\n                case EMatchFromType.Player:\n                case EMatchFromType.RoomAllPlayers:\n                    playerReqs.push(r);\n                    break;\n            }\n        });\n\n        //=====房间招人匹配, 即招人的房间先挑人,挑满后剩下的再看能否匹配成功\n        //排序, 先请求的先满足\n        this.sortByReqTime(roomJoinUsReqs);\n        for (let checkReq of roomJoinUsReqs) {\n            let fromInfo = checkReq.matchFromInfo as IMatchFromRoomJoinUsOnServer;\n            //相同匹配分组的\n            let matchReqs: IMatchRequest[] = playerReqs.filter(r => r.matchReqGroupKey === checkReq.matchReqGroupKey);\n            if (matchReqs.length > 0) {\n                let ret = this.matchPlayerReqs(playerReqs, checkReq, fromInfo.currPlayerCount, false, matchReqs);\n                if (ret.matchRequestPlayerResults.length > 0) {\n                    let roomJoinUsMatch = true;\n                    let matchPlayerCount = arrSum(ret.matchRequestPlayerResults, r => r.matchPlayerResults.length);\n                    if (fromInfo.currPlayerCount + matchPlayerCount >= checkReq.maxPlayers) {\n                        //如果匹配完玩家满员,则关闭招人匹配\n                        roomJoinUsMatch = false;\n                    }\n                    //匹配成功!\n                    joinRoomResults.push({\n                        joinRoomId: fromInfo.roomId,\n                        matchRequestPlayerResults: ret.matchRequestPlayerResults,\n                        roomJoinUsMatch: roomJoinUsMatch,\n                    });\n                }\n            }\n        }\n\n        //=====玩家匹配\n\n        //根据匹配分组遍历, 组内匹配时间排序, 依次找有没满足minPlayers的匹配\n        let maxPlayersReqs = arrGroup(playerReqs, r => r.matchReqGroupKey);\n        for (let group of maxPlayersReqs) {\n            //组内匹配时间排序\n            let reqs = group[1];\n            let groupMatchReqs = reqs.slice();//拷贝一份\n            this.sortByReqTime(groupMatchReqs);\n            for (let i = 0; i < reqs.length; i++) {\n                let checkReq = reqs[i];//用原始group的,保证每个都能有一次尝试机会\n                if (!groupMatchReqs.find(r => r.matchReqId === checkReq.matchReqId)) {\n                    //如果这个匹配请求已经被其他的匹配走了,则跳过\n                    continue;\n                }\n                let attr = checkReq.matcherParams as ISingleMatcherParams;\n                let fromInfo = checkReq.matchFromInfo as IMatchFromPlayer;\n                //找到不高于这个最小玩家要求的匹配\n                let canPlayersMatchReqs = groupMatchReqs.filter(r =>\n                    r.matchReqId !== checkReq.matchReqId\n                    && (!r.matcherParams.minPlayers\n                        || r.matcherParams.minPlayers <= attr.minPlayers\n                    ));\n                let playerCount = arrSum(canPlayersMatchReqs,\n                    r => (r.matchFromInfo as IMatchFromPlayer).playerIds.length)\n                    + fromInfo.playerIds.length;\n                if (playerCount >= attr.minPlayers) {\n                    //有包含最低要求, 调用匹配逻辑,会尽量配满!\n                    let ret = this.matchPlayerReqs(groupMatchReqs, checkReq, fromInfo.playerIds.length, true, canPlayersMatchReqs);\n                    if (ret.matchRequestPlayerResults.length > 0) {\n                        //匹配成功!\n                        let roomJoinUsMatch = false;\n                        let matchPlayerCount = arrSum(ret.matchRequestPlayerResults, r => r.matchPlayerResults.length);\n                        if (matchPlayerCount < checkReq.maxPlayers) {\n                            //如果匹配玩家没满员,则根据配置来决定是否开启招人匹配\n                            roomJoinUsMatch = attr.resultsContinueRoomJoinUsMatch === true;\n                        }\n                        createRoomResults.push({\n                            createRoomPara: {\n                                roomName: '系统匹配的房间',\n                                ownerPlayerId: '',\n                                maxPlayers: checkReq.maxPlayers,\n                                isPrivate: !roomJoinUsMatch,\n                                matcherKey: this.matcherKey,\n                            },\n                            matchRequestPlayerResults: ret.matchRequestPlayerResults,\n                            roomJoinUsMatch: roomJoinUsMatch,\n                        });\n                        //组里的也移除\n                        arrRemoveItems(groupMatchReqs, r => !!ret.matchRequestPlayerResults.find(e => e.matchReqId === r.matchReqId));\n                    }\n                }\n            }\n        }\n\n\n        if (joinRoomResults.length <= 0 && createRoomResults.length <= 0) {\n            return { hasResult: false };\n        }\n        return {\n            hasResult: true,\n            resultCreateRoom: createRoomResults,\n            resultJoinRoom: joinRoomResults,\n        };\n\n    }\n\n\n    /**\n     * 匹配筛选出来的玩家列表,成功则移除allReqs里的匹配请求\n     *\n     * @protected\n     * @param allReqs\n     * @param checkReq\n     * @param checkReqPlayerCount\n     * @param checkReqSelfApply 匹配结果是否需要包含checkReq(同时移除)\n     * @param matchPlayerReqs\n     * @returns\n     */\n    protected matchPlayerReqs(allReqs: IMatchRequest[],\n        checkReq: IMatchRequest, checkReqPlayerCount: number, checkReqSelfApply: boolean,\n        matchPlayerReqs: IMatchRequest[])\n        : {\n            matchRequestPlayerResults: IMatchRequestPlayerResults[],\n        } {\n\n        this.sortByReqTime(matchPlayerReqs);\n        let matchRequestPlayerResults: IMatchRequestPlayerResults[] = [];\n\n        let playerIdCount = checkReqPlayerCount;\n        for (let matchReq of matchPlayerReqs) {\n            if (playerIdCount >= matchReq.maxPlayers) {\n                //满员\n                break;\n            }\n            let fromPlayerInfo = matchReq.matchFromInfo as IMatchFromPlayer;\n            if (playerIdCount + fromPlayerInfo.playerIds.length > matchReq.maxPlayers) {\n                //遍历的请求加上去超过了最大玩家数,跳过\n                continue;\n            }\n            matchRequestPlayerResults.push({\n                matchReqId: matchReq.matchReqId,\n                //没有队伍,直接用玩家id生成结果\n                matchPlayerResults: fromPlayerInfo.playerIds.map(pid => { return { playerId: pid } }),\n            });\n            playerIdCount += fromPlayerInfo.playerIds.length;\n            //匹配移除\n            arrRemoveItems(allReqs, r => r.matchReqId === matchReq.matchReqId);\n        }\n        if (checkReqSelfApply) {\n            arrRemoveItems(allReqs, r => r.matchReqId === checkReq.matchReqId);\n            //当前匹配数据是否也加入到匹配结果里(房间招人匹配就不需要加入)\n            let selfReqResult: IMatchRequestPlayerResults = {\n                matchReqId: checkReq.matchReqId,\n                matchPlayerResults: [],\n            };\n            if (checkReq.matchFromType === EMatchFromType.Player\n                || checkReq.matchFromType === EMatchFromType.RoomAllPlayers) {\n                //检测请求是来源玩家,则把玩家id也加入到结果中\n                //没有队伍,直接用玩家id生成结果\n                selfReqResult.matchPlayerResults\n                    .push(...checkReq.matchFromInfo.playerIds.map(pid => { return { playerId: pid } }));\n            }\n            matchRequestPlayerResults.splice(0, 0, selfReqResult);\n        }\n        return {\n            matchRequestPlayerResults,\n        };\n    }\n\n    /**请求按开始匹配时间排序,早的在前面*/\n    protected sortByReqTime(reqs: IMatchRequest[]) {\n        reqs.sort((a, b) => {\n            //返回小于0则a在前\n            return a.startMatchTime - b.startMatchTime;\n        });\n    }\n\n    onNewMatchReq(currMatchReq: IMatchRequest, allReqs: IMatchRequest[]): IMatcherExecResult {\n        return this.matchAllReqs(allReqs);\n    }\n    onPollMatcherReqs(allReqs: IMatchRequest[]): IMatcherExecResult {\n        return this.matchAllReqs(allReqs);\n    }\n\n}"]}