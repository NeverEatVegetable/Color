{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/tsgf-dev-demo-client/src/DemoClient.ts"],"names":["DemoClient","AHttpClient","Result","demoServiceProto","serviceProto","constructor","serverUrl","server","json","logger","console","playerAuth","playerOpenId","playerShowName","para","showName","openId","ret","client","callApi","isSucc","buildErr","err","message","code","buildSucc","res"],"mappings":";;;qEAKaA,U;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AALJC,MAAAA,W,YAAAA,W;AAAsBC,MAAAA,M,YAAAA,M;;AACNC,MAAAA,gB,iBAAhBC,Y;;;;;;;AAGT;4BACaJ,U,GAAN,MAAMA,UAAN;AAAA;AAAA,sCAAqD;AAExDK,QAAAA,WAAW,CAACC,SAAD,EAAoB;AAC3B;AAAA;AAAA,oDAAwB;AACpBC,YAAAA,MAAM,EAAED,SADY;AAEpBE,YAAAA,IAAI,EAAE,IAFc;AAGpBC,YAAAA,MAAM,EAAEC;AAHY,WAAxB;AAKH;AAED;AACJ;AACA;AACA;AACA;;;AAC2B,cAAVC,UAAU,CAACC,YAAD,EAAuBC,cAAvB,EAA4G;AAC/H,cAAIC,IAAmB,GAAG;AACtBC,YAAAA,QAAQ,EAAEF,cADY;AAEtBG,YAAAA,MAAM,EAAEJ;AAFc,WAA1B;AAIA,gBAAMK,GAAG,GAAG,MAAM,KAAKC,MAAL,CAAYC,OAAZ,CAAoB,YAApB,EAAkCL,IAAlC,CAAlB;;AACA,cAAI,CAACG,GAAG,CAACG,MAAT,EAAiB;AAAA;;AACb,mBAAO;AAAA;AAAA,kCAAOC,QAAP,CAAgBJ,GAAG,CAACK,GAAJ,CAAQC,OAAxB,mBAAkCN,GAAG,CAACK,GAAJ,CAAQE,IAA1C,4BAAkD,CAAlD,CAAP;AACH;;AACD,iBAAO;AAAA;AAAA,gCAAOC,SAAP,CAAiBR,GAAG,CAACS,GAArB,CAAP;AACH;;AAzBuD,O","sourcesContent":["import { AHttpClient, IResult, Result } from \"tsgf-sdk\";\nimport { serviceProto as demoServiceProto, ServiceType as DemoServiceType } from \"./protocols/serviceProto\";\nimport { ReqPlayerAuth } from \"./protocols/PtlPlayerAuth\";\n\n/**demo服务器的客户端封装*/\nexport class DemoClient extends AHttpClient<DemoServiceType>{\n\n    constructor(serverUrl: string) {\n        super(demoServiceProto, {\n            server: serverUrl,\n            json: true,\n            logger: console,\n        });\n    }\n\n    /**\n     * 玩家使用自定义的用户ID和昵称去TSGF认证, 本质是模拟接入应用自己的用户系统对接TSGF的玩家体系\n     * @param playerOpenId 玩家唯一ID,自定义\n     * @param playerShowName 玩家显示名,自定义\n     */\n    public async playerAuth(playerOpenId: string, playerShowName: string): Promise<IResult<{ playerId: string, playerToken: string }>> {\n        let para: ReqPlayerAuth = {\n            showName: playerShowName,\n            openId: playerOpenId,\n        };\n        const ret = await this.client.callApi(\"PlayerAuth\", para);\n        if (!ret.isSucc) {\n            return Result.buildErr(ret.err.message, (ret.err.code ?? 1) as number);\n        }\n        return Result.buildSucc(ret.res);\n    }\n}\n"]}