{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/test/loadTest/onlineTest.ts"],"names":["createWorkerState","isEnd","isReady","fsList","fsAverage","inputFsList","inputFsAverage","calculateInputFS","createPlayerJoin","openId","roomId","gameServerUrl","auth","buildErr","ret","playerToken","createRoomRet","count","isOk","createRet","playerId","maxPlayers","succ","err","data","workerRun","id","inputFS","postMessage","step","process","exit","gameClient","mockInputFS","frameBatchCount","framePrevTime","onStartFrameSync","Date","now","startInputFrame","test","rtInputFS","onRecvFrame","useTime","fs","onStopFrameSync","cancel","disconnect","endFn","Promise","res","d","runWorker","cb","workerData","worker","__filename","on","message","exitCode","frameData","outRTInputFS","expectInterval","Math","floor","prev","timerHandler","rtBatchCount","rtPrevTime","next","client","isConnected","playerInpFrame","rtFS","prevSendInvTime","nextInv","setTimeout","clearTimeout","runOnline","allPlayerCount","syncFrameSec","workerCount","allFsAverage","allInputFsAverage","allCalculateInputFSAverage","logger","log","waitAllReady","workerRet","Map","workers","get","set","console","push","size","args","tmpWorkers","values","allState","startFrameSync","stopFrameSync","allFsCount","allInputFsCount","allCalculateInputFSCount","length","sum","Worker","isMainThread","parentPort","assert","Result","delay","authPlayerToken","createAndEnterRoom","joinRoomUseGameServerResult","setLogEnabled","playerCount","frameSyncSec","then"],"mappings":"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","sourcesContent":["import { Worker, isMainThread, parentPort, workerData } from 'worker_threads';\nimport { assert } from \"chai\";\nimport { GameClient } from \"../../src/shared/gameClient/GameClient\";\nimport { IResult, Result } from \"../../src/shared/tsgf/Result\";\nimport { delay } from \"../../src/shared/tsgf/Utils\";\nimport { authPlayerToken, createAndEnterRoom, ICreateAndEnterResult, joinRoomUseGameServerResult, setLogEnabled } from \"../unitTest/api/ApiUtils\";\n\ninterface IWorkerData {\n    id: number;\n    roomId: string;\n    gameServerUrl: string;\n    inputFS: number;\n}\ninterface IWorkerState {\n    isEnd: boolean;\n    isReady: boolean;\n    fsList: number[];\n    fsAverage: number;\n    inputFsList: number[];\n    inputFsAverage: number;\n    calculateInputFS: number;\n}\nfunction createWorkerState(): IWorkerState {\n    return {\n        isEnd: false,\n        isReady: false,\n        fsList: [],\n        fsAverage: 0,\n        inputFsList: [],\n        inputFsAverage: 0,\n        calculateInputFS: 0,\n    };\n}\ninterface IMockInputFSHandler {\n    calculateInputFS: number;\n    cancel: () => void;\n}\ninterface ITestReportData {\n    allState: Map<number, IWorkerState>;\n    allFsAverage: number;\n    allInputFsAverage: number;\n    allCalculateInputFSAverage: number;\n}\n\nasync function createPlayerJoin(openId: string, roomId: string, gameServerUrl: string): Promise<IResult<GameClient>> {\n    let auth = await authPlayerToken(openId, openId);\n    if (!auth) return Result.buildErr(`auth失败：${openId}`);\n    let ret = await joinRoomUseGameServerResult(gameServerUrl, auth.playerToken, roomId, openId);\n\n    return ret;\n}\nasync function createRoomRet(openId: string, count: number): Promise<ICreateAndEnterResult> {\n    let auth = await authPlayerToken(openId, openId);\n    assert.isOk(auth, `auth失败：zum1`);\n    let createRet = await createAndEnterRoom(auth.playerToken, auth.playerId, 'zum1', {\n        maxPlayers: count,\n    });\n    assert.isOk(createRet.succ, createRet.err);\n    return createRet.data!;\n}\n\nasync function workerRun({ id, roomId, gameServerUrl, inputFS }: IWorkerData) {\n    let ret = await createPlayerJoin(`open${id}`, roomId, gameServerUrl);\n    if (!ret.succ) {\n        parentPort?.postMessage({ step: 'error', ret });\n        process.exit(0);\n    }\n    let gameClient = ret.data;\n    let mockInputFS: IMockInputFSHandler | null = null;\n    let frameBatchCount = 0;\n    let framePrevTime = 0;\n    gameClient.onStartFrameSync = () => {\n        framePrevTime = Date.now();\n        mockInputFS = startInputFrame(id, gameClient, inputFS, { test: '测试我是个输入帧' }, (rtInputFS) => {\n            parentPort?.postMessage({ step: 'rtInputFS', ret: { data: { rtInputFS } } });\n        });\n        parentPort?.postMessage({\n            step: 'startInputFrame', ret: {\n                data: {\n                    calculateInputFS: mockInputFS.calculateInputFS,\n                }\n            }\n        });\n    };\n    gameClient.onRecvFrame = () => {\n        frameBatchCount++;\n        if (frameBatchCount >= 10) {\n            let useTime = Date.now() - framePrevTime;\n            let fs = frameBatchCount / useTime * 1000;\n            parentPort?.postMessage({ step: 'frameState', ret: { data: { fs } } });\n            frameBatchCount = 0;\n            framePrevTime = Date.now();\n        }\n    };\n    gameClient.onStopFrameSync = async () => {\n        mockInputFS?.cancel();\n        await gameClient.disconnect();\n        endFn?.();\n        endFn = null;\n    };\n\n    let endFn: ((...args: any[]) => void) | null = null;\n    parentPort?.postMessage({ step: 'ready' });\n    await new Promise(res => {\n        endFn = (d) => res(d);\n    })\n}\n\nfunction runWorker(id: number, cb: (data: { id: number, step: string, ret?: any }) => void, workerData: IWorkerData) {\n    const worker = new Worker(__filename, { workerData });\n    worker.on('message', (d) => cb({ ...d, id, }));\n    worker.on('error', (err) => cb({ id, step: 'initError', ret: { err: err.message } }));\n    worker.on('exit', (exitCode) => {\n        if (exitCode === 0) {\n            return null;\n        }\n        cb({ id, step: 'exitError', ret: { id, err: `Worker has stopped with code ${exitCode}` } });\n    });\n    return worker;\n}\n\n/**\n * 开始模拟输入帧率额\n * @param gameClient \n * @param inputFS 计划的输入帧，因为是会换算成每多少毫秒发送一次，如果不能整除，将会替换为最接近的帧率来模拟\n * @param frameData 发送的帧数据\n * @param outRTInputFS 间隔通知外部实际输入帧率\n * @returns mock input frame \n */\nfunction startInputFrame(id: number, gameClient: GameClient, inputFS: number, frameData: any, outRTInputFS: (rtInputFS: number) => void): IMockInputFSHandler {\n    // 计算出期望间隔时间\n    let expectInterval = Math.floor(1000 / inputFS);\n    if (expectInterval < 4) expectInterval = 4;//定时任务实际最小间隔为4ms\n    // 再反算出这个间隔时间对应的输入帧率,叫做计算输入帧率\n    let calculateInputFS = Math.floor(1000 / expectInterval);\n    let prev = Date.now();\n    let timerHandler: any = null;\n    let rtBatchCount = 0;\n    let rtPrevTime = Date.now();\n    let next = async () => {\n        if (!timerHandler) return;\n        if (!gameClient.client || !gameClient.client.isConnected) return;\n        await gameClient.playerInpFrame([frameData]);\n        if (!timerHandler) return;//await回来，可能外部取消了，直接返回\n        rtBatchCount++;\n        if (rtBatchCount >= 10) {\n            //每10次发送，计算一次实际输入帧率   \n            let useTime = Date.now() - rtPrevTime;\n            let rtFS = rtBatchCount / useTime * 1000;\n            outRTInputFS(rtFS);//通知外部收集\n            rtPrevTime = Date.now();\n            rtBatchCount = 0;\n        }\n        //距离上次定时过去的时间,正常情况下应该超过interval，毕竟是间隔+发送数据的开销\n        let prevSendInvTime = Date.now() - prev;\n        //动态计算下次间隔\n        let nextInv = 2 * expectInterval - prevSendInvTime;\n        //实际耗时都超过想要的间隔了, 按最少4ms来计算\n        if (nextInv < 4) nextInv = 4;\n        prev = Date.now();\n        timerHandler = setTimeout(next, nextInv);\n        return timerHandler;\n    };\n    timerHandler = setTimeout(next, expectInterval);\n    return {\n        calculateInputFS,\n        cancel() {\n            clearTimeout(timerHandler);\n            timerHandler = null;\n        },\n    };\n}\n\n\nasync function runOnline(allPlayerCount: number, inputFS: number, syncFrameSec: number): Promise<ITestReportData> {\n    let workerCount = allPlayerCount - 1;\n    let roomId = '';\n    let gameServerUrl = '';\n\n    let allFsAverage = 0;\n    let allInputFsAverage = 0;\n    let allCalculateInputFSAverage = 0;\n\n    let ret = await createRoomRet('zum1', allPlayerCount);\n    roomId = ret.roomId;\n    gameServerUrl = ret.gameServerUrl;\n    let gameClient = ret.gameClient;\n    gameClient.client.logger!.log = () => { };//将普通日志都停掉，防止消息太多\n    let waitAllReady: ((...args: string[]) => void) | null = null;\n    let workerRet: Map<number, IWorkerState> = new Map();\n    let workers: Worker[] = [];\n    for (let id = 1; id <= workerCount; id++) {\n        let worker = runWorker(id, ({ id, step, ret }) => {\n            let d = workerRet.get(id);\n            if (!d) {\n                d = createWorkerState();\n                workerRet.set(id, d);\n            }\n            switch (step) {\n                case 'ready': {\n                    console.log(`id:${id} [${step}]`);\n                    d.isReady = true;\n                    break;\n                }\n                case 'startInputFrame': {\n                    d.calculateInputFS = ret.data.calculateInputFS;\n                    break;\n                }\n                case 'frameState': {\n                    d.fsList.push(ret.data.fs);\n                    break;\n                }\n                case 'rtInputFS': {\n                    d.inputFsList.push(ret.data.rtInputFS);\n                    break;\n                }\n                default: {\n                    console.log(`id:${id} [${step}]`, ret);\n                    d.isEnd = true;\n                    break;\n                }\n            }\n\n            if (workerRet.size === workerCount) {\n                waitAllReady?.();\n                waitAllReady = null;\n            }\n        }, { id, roomId, gameServerUrl, inputFS });\n        workers.push(worker);\n    }\n\n\n    await new Promise(res => {\n        waitAllReady = (args) => res(args)\n    });\n    let tmpWorkers = [...workerRet.values()];\n    if (tmpWorkers.count(d => d.isReady) !== workerCount) {\n        // 说明有问题，停止\n        console.log('线程等待时间完成');// 后续改成主线程通知完成才退出\n        await gameClient.disconnect();\n        return {\n            allState: workerRet,\n            allFsAverage,\n            allInputFsAverage,\n            allCalculateInputFSAverage,\n        };\n    }\n    // 如果都是准备的状态，则正常开始\n    console.log(`开始帧同步（运行${syncFrameSec}秒）`);\n    await gameClient.startFrameSync();\n\n    //在都准备好后，帧同步运行10秒\n    await delay(syncFrameSec * 1000);\n\n    await gameClient.stopFrameSync();\n    console.log('停止帧同步');\n\n    let allFsCount = 0;\n    let allInputFsCount = 0;\n    let allCalculateInputFSCount = 0;\n    for (let [id, d] of workerRet) {\n        if (d.fsList.length) {\n            d.fsAverage = d.fsList.sum() / d.fsList.length;\n            d.fsList.length = 0;\n            allFsAverage += d.fsAverage;\n            allFsCount++;\n        }\n        if (d.inputFsList.length) {\n            d.inputFsAverage = d.inputFsList.sum() / d.inputFsList.length;\n            d.inputFsList.length = 0;\n            allInputFsAverage += d.inputFsAverage;\n            allInputFsCount++;\n        }\n        if (d.calculateInputFS) {\n            allCalculateInputFSAverage += d.calculateInputFS;\n            allCalculateInputFSCount++;\n        }\n    }\n    if (allFsCount && allFsAverage) {\n        allFsAverage = allFsAverage / allFsCount;\n    }\n    if (allInputFsAverage && allInputFsCount) {\n        allInputFsAverage = allInputFsAverage / allInputFsCount;\n    }\n    if (allCalculateInputFSAverage && allCalculateInputFSCount) {\n        allCalculateInputFSAverage = allCalculateInputFSAverage / allCalculateInputFSCount;\n    }\n    return {\n        allState: workerRet,\n        allFsAverage,\n        allInputFsAverage,\n        allCalculateInputFSAverage,\n    };\n}\n\n\n//要把通讯的日志关掉，不然太多会出问题\nsetLogEnabled(false);\n\nlet playerCount = 50;//再大话，目前的机制，worker内部的通讯效率会变成瓶颈，除非数据在worker内部算好，结束后一次性推送\nlet inputFS = 10;\nlet frameSyncSec = 20;\n\nif (!isMainThread) {\n    workerRun(workerData);\n} else {\n    console.log(`开始运行${playerCount}人在线,${inputFS}输入帧率`);\n    runOnline(playerCount, inputFS, frameSyncSec).then(function (res) {\n        console.log(`结束运行`, res);\n        process.exit(0);\n    })\n}\n"]}