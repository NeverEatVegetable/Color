{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/server.ts"],"names":["startHallServer","hallServerCfg","hallServer","log","port","start","stopHallServer","stop","startGameServerClusterMgr","gameServerCluster","gameServerClusterMgr","nodeList","terminalList","json","logger","reuseClient","stopGameServerClusterMgr","startMatchServerClusterMgr","matchServerCluster","matchServerClusterMgr","stopMatchServerClusterMgr","startGameServer","serverCfg","gameServer","stopGameServer","startMatchServer","matchServer","clusterNodeId","serverName","stopMatchServer","startDemoServer","demoServer","flows","preRecvDataFlow","push","v","conn","httpRes","setHeader","autoImplementApi","path","resolve","__dirname","stopDemoServer","startServers","rs","runServer","includes","GameServerCluster","MatchServerCluster","GameServer","MatchServer","HallServer","DemoServer","stopServers","getServerConfig","getServerRedisClient","GameServerClusterMgr","MatchServerClusterMgr","HttpServer","demoServiceProto","serviceProto","RunServerKey"],"mappings":"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","sourcesContent":["\nimport * as path from \"path\";\n/*\n当前加载了哪些服务，由本文件决定\n*/\nimport { getServerConfig, getServerRedisClient } from \"./serverConfigMgr\";\nimport { logger } from \"./shared/tsgf/logger\";\nimport { IPlayer } from \"./shared/tsgfServer/auth/Models\";\n\nimport { HallServer } from \"./hallServer/HallServer\";\nimport { GameServerClusterMgr } from \"./gameServerCluster/GameServerClusterMgr\";\nimport { MatchServerClusterMgr } from \"./matchServerCluster/MatchServerClusterMgr\";\nimport { GameServer } from \"./gameServer/GameServer\";\nimport { MatchServer } from \"./matchServer/MatchServer\";\nimport { HttpConnection, HttpServer } from \"tsrpc\";\n\nimport { serviceProto as demoServiceProto, ServiceType as DemoServiceType } from \"./shared/demoClient/protocols/serviceProto\";\nimport { RunServerKey } from \"./ServerConfig\";\n\nlet hallServer: HallServer | null = null;\nlet gameServerClusterMgr: GameServerClusterMgr | null = null;\nlet matchServerClusterMgr: MatchServerClusterMgr | null = null;\nlet gameServer: GameServer | null = null;\nlet matchServer: MatchServer | null = null;\nlet demoServer: HttpServer | null = null;\n\n/**拓展字段*/\ndeclare module 'tsrpc' {\n    export interface BaseConnection {\n        /**连接ID,连接在服务端唯一标识*/\n        connectionId: string;\n        /**玩家ID, 只要通过认证都不会为空, 并且即使销毁, 这个字段值还在*/\n        playerId: string;\n        /**当前连接所属的玩家服务器对象, 只要通过认证都不会为空, 但断开连接后对象会销毁!*/\n        currPlayer: IPlayer;\n    }\n}\n\n\nasync function startHallServer() {\n    // 大厅服务器\n    let hallServerCfg = (await getServerConfig()).hallServer;\n    logger?.log(\"大厅服务器.port:\", hallServerCfg.port);\n    hallServer = new HallServer(\n        getServerRedisClient,\n        hallServerCfg,\n        async () => (await getServerConfig()).hallServer\n    );\n    await hallServer.start();\n    logger.log(\"大厅服务启动成功!\");\n}\nasync function stopHallServer(): Promise<void> {\n    await hallServer?.stop();\n}\n\nasync function startGameServerClusterMgr() {\n\n    // 游戏服务器集群管理服务（可选，即可另外独立部署、启动）\n    logger?.log(\"gameClusterServer.port:\", (await getServerConfig()).gameServerCluster.port);\n    gameServerClusterMgr = new GameServerClusterMgr(\n        async () => {\n            //每次都从配置中读取\n            return (await getServerConfig()).gameServerCluster.nodeList;\n        },\n        async () => {\n            //每次都从配置中读取\n            return (await getServerConfig()).gameServerCluster.terminalList;\n        },\n        {\n            port: (await getServerConfig()).gameServerCluster.port,\n            json: false,\n            logger: logger,\n        },\n        async (reuseClient: boolean = true) => await getServerRedisClient(reuseClient)\n    );\n    await gameServerClusterMgr.start();\n    logger.log(\"游戏集群管理服务启动成功!\");\n}\nasync function stopGameServerClusterMgr(): Promise<void> {\n    await gameServerClusterMgr?.stop();\n}\n\nasync function startMatchServerClusterMgr() {\n    // 匹配服务器集群管理服务（可选，即可另外独立部署、启动）\n    logger?.log(\"matchClusterServer.port:\", (await getServerConfig()).matchServerCluster.port);\n    matchServerClusterMgr = new MatchServerClusterMgr(\n        async () => {\n            //每次都从配置中读取\n            return (await getServerConfig()).matchServerCluster.nodeList;\n        },\n        async () => {\n            //每次都从配置中读取\n            return (await getServerConfig()).matchServerCluster.terminalList;\n        },\n        {\n            port: (await getServerConfig()).matchServerCluster.port,\n            json: false,\n            logger: logger,\n        },\n        async (reuseClient: boolean = true) => await getServerRedisClient(reuseClient)\n    );\n    await matchServerClusterMgr.start();\n    logger.log(\"匹配集群管理服务启动成功!\");\n}\nasync function stopMatchServerClusterMgr(): Promise<void> {\n    await matchServerClusterMgr?.stop();\n}\n\nasync function startGameServer() {\n    let serverCfg = await getServerConfig();\n    logger?.log(\"gameServer: port:\", serverCfg.gameServer.port);\n    gameServer = new GameServer(getServerRedisClient, serverCfg.gameServer, async () => (await getServerConfig()).gameServer);\n    await gameServer.start();\n    logger.log(\"游戏服务启动成功!\");\n}\nasync function stopGameServer(): Promise<void> {\n    await gameServer?.stop();\n}\n\nasync function startMatchServer() {\n    let serverCfg = await getServerConfig();\n    logger?.log(\"matchServer:\", serverCfg.matchServer.clusterNodeId, serverCfg.matchServer.serverName);\n    matchServer = new MatchServer(\n        getServerRedisClient,\n        serverCfg.matchServer,\n    );\n    await matchServer.start();\n    logger.log(\"匹配处理服务启动成功!\");\n}\nasync function stopMatchServer(): Promise<void> {\n    await matchServer?.stop();\n}\n\nasync function startDemoServer() {\n    demoServer = new HttpServer<DemoServiceType>(demoServiceProto, {\n        port: (await getServerConfig()).demoServer.port,\n        json: true,\n        logger: logger,\n    });\n    demoServer.flows.preRecvDataFlow.push(v => {\n        let conn = v.conn as HttpConnection;\n        //解决HTTP请求跨域问题\n        conn.httpRes.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n        return v;\n    })\n    await demoServer.autoImplementApi(path.resolve(__dirname, 'demoServer/api'));\n    await demoServer.start();\n    logger.log(\"示例应用的用户系统模拟服务启动成功!\");\n}\nasync function stopDemoServer(): Promise<void> {\n    await demoServer?.stop();\n}\n\n\n/**启动当前选用的所有服务*/\nexport async function startServers() {\n    let rs = (await getServerConfig()).runServer;\n    if (rs.includes(RunServerKey.GameServerCluster)) {\n        await startGameServerClusterMgr();\n    }\n    if (rs.includes(RunServerKey.MatchServerCluster)) {\n        await startMatchServerClusterMgr();\n    }\n    if (rs.includes(RunServerKey.GameServer)) {\n        await startGameServer();\n    }\n    if (rs.includes(RunServerKey.MatchServer)) {\n        await startMatchServer();\n    }\n    if (rs.includes(RunServerKey.HallServer)) {\n        await startHallServer();\n    }\n    if (rs.includes(RunServerKey.DemoServer)) {\n        await startDemoServer();\n    }\n};\nexport async function stopServers() {\n    let rs = (await getServerConfig()).runServer;\n    if (rs.includes(RunServerKey.DemoServer)) {\n        await stopDemoServer();\n    }\n    if (rs.includes(RunServerKey.GameServer)) {\n        await stopGameServer();\n    }\n    if (rs.includes(RunServerKey.MatchServer)) {\n        await stopMatchServer();\n    }\n    if (rs.includes(RunServerKey.HallServer)) {\n        await stopHallServer();\n    }\n    if (rs.includes(RunServerKey.GameServerCluster)) {\n        await stopGameServerClusterMgr();\n    }\n    if (rs.includes(RunServerKey.MatchServerCluster)) {\n        await stopMatchServerClusterMgr();\n    }\n};"]}