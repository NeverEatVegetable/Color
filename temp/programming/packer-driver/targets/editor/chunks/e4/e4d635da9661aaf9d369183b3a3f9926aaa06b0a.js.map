{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/gameServer/GameConnMgr.ts"],"names":["GameConnMgr","hasProperty","PlayerAuthHelper","ErrorCodes","Result","ENetworkState","constructor","gameServer","getGameServerCfg","defaultWaitReconnectTime","connAuthingHandlers","connAuthedHandlers","connDisconnectHandlers","connReconnectHandlers","authedPlayerDisconnectHandlers","allConnectionPlayer","Map","currConnections","currConnectionplayer","waitConnectionPlayer","waitConnectionTimeHD","waitAuthConnections","waitAuthConnectionsTimeHD","flows","postDisconnectFlow","push","v","clearWaitAuth","conn","connectionId","player","currPlayer","undefined","delete","authInfo","playerId","triggerConnDisconnect","startWaitReconnect","disconnectClearData","preApiCallFlow","call","service","name","error","code","AuthUnverified","preMsgCallFlow","logger","log","listenMsg","close","connId","triggerEvent","clearWaitReconnect","triggerAuthedPlayerDisconnect","startWaitAuth","hd","get","clearTimeout","set","setTimeout","checkConnAuthorizing","triggerConnAuthing","setConnAuthorized","playerInfo","triggerConnAuthed","roomWaitReconnectTime","tryReconnect","waitPlayer","connReconnect","playerToken","authInfoRet","verification","succ","buildErr","err","data","AuthReconnectionFail","showName","AuthForbid","triggerConnReconnect","buildSucc","connAuthorize","authPlayerPara","customPlayerStatus","customPlayerProfile","isRobot","networkState","ONLINE","roomRobotPlayers","hasUser","getPlayer","getPlayerConn","getPlayersConn","playerIds","connList","getPlayersConnFromPlayerInfos","playerInfos","p","i","length","e","wait","onConnAuthing","handler","offConnAuthing","remove","h","onConnAuthed","offConnAuthed","onConnDiconnect","offConnDiconnect","onConnReconnect","offConnReconnect","onAuthedPlayerDisconnect","offAuthedPlayerDisconnect"],"mappings":";;;gGAuBaA,W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnBJC,MAAAA,W,iBAAAA,W;;AAEAC,MAAAA,gB,iBAAAA,gB;;AACAC,MAAAA,U,iBAAAA,U;AAAqBC,MAAAA,M,iBAAAA,M;;AACrBC,MAAAA,a,iBAAAA,a;;;;;;;AAGT;;AAEA;;AAEA;;AAEA;;AAEA;;AAGA;6BACaL,W,GAAN,MAAMA,WAAN,CAAkB;AAiCrBM,QAAAA,WAAW,CAACC,UAAD,EAAwCC,gBAAxC,EAAyF;AA/BpG;AA+BoG,eA9B7FC,wBA8B6F,GA9BlE,KA8BkE;AAAA,eA5B5FC,mBA4B4F,GA5BhD,EA4BgD;AAAA,eA3B5FC,kBA2B4F,GA3BlD,EA2BkD;AAAA,eA1B5FC,sBA0B4F,GA1B1C,EA0B0C;AAAA,eAzB5FC,qBAyB4F,GAzB5C,EAyB4C;AAAA,eAxB5FC,8BAwB4F,GAxB1B,EAwB0B;;AAtBpG;AAsBoG,eArB5FC,mBAqB4F,GArBhD,IAAIC,GAAJ,EAqBgD;;AAnBpG;AAmBoG,eAlB5FC,eAkB4F,GAlB3C,IAAID,GAAJ,EAkB2C;;AAjBpG;AAiBoG,eAhB5FE,oBAgB4F,GAhB/C,IAAIF,GAAJ,EAgB+C;;AAdpG;AAcoG,eAb5FG,oBAa4F,GAb/C,IAAIH,GAAJ,EAa+C;;AAZpG;AAYoG,eAX5FI,oBAW4F,GAXnD,IAAIJ,GAAJ,EAWmD;;AATpG;AASoG,eAR5FK,mBAQ4F,GARvC,IAAIL,GAAJ,EAQuC;;AAPpG;AAOoG,eAN5FM,yBAM4F,GAN9C,IAAIN,GAAJ,EAM8C;AAAA,eAH5FT,UAG4F;AAAA,eAF5FC,gBAE4F;AAChG,eAAKD,UAAL,GAAkBA,UAAlB;AACA,eAAKC,gBAAL,GAAwBA,gBAAxB,CAFgG,CAIhG;;AACA,eAAKD,UAAL,CAAgBgB,KAAhB,CAAsBC,kBAAtB,CAAyCC,IAAzC,CAA8CC,CAAC,IAAI;AAC/C;AACA,iBAAKC,aAAL,CAAmBD,CAAC,CAACE,IAAF,CAAOC,YAA1B,EAF+C,CAI/C;;AACA,gBAAIC,MAAM,GAAGJ,CAAC,CAACE,IAAF,CAAOG,UAApB;;AACA,gBAAID,MAAJ,EAAY;AACR;AACAJ,cAAAA,CAAC,CAACE,IAAF,CAAOG,UAAP,GAAoBC,SAApB,CAFQ,CAGR;;AACA,mBAAKf,eAAL,CAAqBgB,MAArB,CAA4BH,MAAM,CAACI,QAAP,CAAgBC,QAA5C;AACA,mBAAKjB,oBAAL,CAA0Be,MAA1B,CAAiCH,MAAM,CAACI,QAAP,CAAgBC,QAAjD,EALQ,CAOR;;AACA,kBAAI,KAAKC,qBAAL,CAA2BV,CAAC,CAACE,IAAF,CAAOC,YAAlC,EAAgDC,MAAhD,CAAJ,EAA6D;AACzD;AACA,qBAAKO,kBAAL,CAAwBX,CAAC,CAACE,IAAF,CAAOC,YAA/B,EAA6CC,MAA7C;AACA,uBAAOJ,CAAP;AACH;AACJ;;AACD,iBAAKY,mBAAL,CAAyBZ,CAAC,CAACE,IAAF,CAAOC,YAAhC,EAA8CC,MAA9C,EAAsD,IAAtD;AACA,mBAAOJ,CAAP;AACH,WAtBD,EALgG,CA6BhG;;AACA,eAAKnB,UAAL,CAAgBgB,KAAhB,CAAsBgB,cAAtB,CAAqCd,IAArC,CAA0Ce,IAAI,IAAI;AAC9C,gBAAIA,IAAI,CAACC,OAAL,CAAaC,IAAb,IAAqB,WAArB,IAAoCF,IAAI,CAACC,OAAL,CAAaC,IAAb,IAAqB,WAA7D,EAA0E;AACtE,qBAAOF,IAAP;AACH;;AACD,gBAAI,CAACA,IAAI,CAACZ,IAAL,CAAUG,UAAf,EAA2B;AACvB;AACAS,cAAAA,IAAI,CAACG,KAAL,CAAW,mCAAX,EAAgD;AAAEC,gBAAAA,IAAI,EAAE;AAAA;AAAA,8CAAWC;AAAnB,eAAhD;AACA,qBAAOb,SAAP;AACH;;AACD,mBAAOQ,IAAP;AACH,WAVD;AAWA,eAAKjC,UAAL,CAAgBgB,KAAhB,CAAsBuB,cAAtB,CAAqCrB,IAArC,CAA0Ce,IAAI,IAAI;AAC9C,gBAAIA,IAAI,CAACC,OAAL,CAAaC,IAAb,IAAqB,WAArB,IAAoCF,IAAI,CAACC,OAAL,CAAaC,IAAb,IAAqB,WAAzD,IAAwEF,IAAI,CAACC,OAAL,CAAaC,IAAb,IAAqB,YAAjG,EAA+G;AAC3G,qBAAOF,IAAP;AACH;;AACD,gBAAI,CAACA,IAAI,CAACZ,IAAL,CAAUG,UAAf,EAA2B;AACvB;AACAS,cAAAA,IAAI,CAACO,MAAL,CAAYC,GAAZ,CAAgB,mCAAhB,EAAqD;AAAEJ,gBAAAA,IAAI,EAAE;AAAA;AAAA,8CAAWC;AAAnB,eAArD;AACA,qBAAOb,SAAP;AACH;;AACD,mBAAOQ,IAAP;AACH,WAVD;AAWA,eAAKjC,UAAL,CAAgB0C,SAAhB,CAA0B,YAA1B,EAAyCT,IAAD,IAAsC;AAC1E;AACA,gBAAIA,IAAI,CAACZ,IAAL,CAAUG,UAAd,EAA0B,KAAKO,mBAAL,CAAyBE,IAAI,CAACZ,IAAL,CAAUC,YAAnC,EAAiDW,IAAI,CAACZ,IAAL,CAAUG,UAA3D,EAAuE,IAAvE;AAC1BS,YAAAA,IAAI,CAACZ,IAAL,CAAUsB,KAAV;AACH,WAJD;AAKH;AAGD;;;AACUZ,QAAAA,mBAAmB,CAACa,MAAD,EAAiBrB,MAAjB,EAA0CsB,YAAqB,GAAG,IAAlE,EAA8E;AACvG,cAAItB,MAAJ,EAAY;AACR;AAEA;AACA,iBAAKuB,kBAAL,CAAwBvB,MAAM,CAACI,QAAP,CAAgBC,QAAxC,EAJQ,CAMR;;AACA,iBAAKlB,eAAL,CAAqBgB,MAArB,CAA4BH,MAAM,CAACI,QAAP,CAAgBC,QAA5C;AACA,iBAAKjB,oBAAL,CAA0Be,MAA1B,CAAiCH,MAAM,CAACI,QAAP,CAAgBC,QAAjD,EARQ,CAUR;;AACA,iBAAKpB,mBAAL,CAAyBkB,MAAzB,CAAgCH,MAAM,CAACI,QAAP,CAAgBC,QAAhD,EAXQ,CAaR;;AACA,gBAAIiB,YAAJ,EAAkB,KAAKE,6BAAL,CAAmCH,MAAnC,EAA2CrB,MAA3C;AACrB;;AACD,eAAKH,aAAL,CAAmBwB,MAAnB;AAEH;AACD;;;AACUI,QAAAA,aAAa,CAAC3B,IAAD,EAA+B;AAClD,cAAI4B,EAAE,GAAG,KAAKlC,yBAAL,CAA+BmC,GAA/B,CAAmC7B,IAAI,CAACC,YAAxC,CAAT;AACA,cAAI2B,EAAJ,EAAQE,YAAY,CAACF,EAAD,CAAZ;AACR,eAAKnC,mBAAL,CAAyBsC,GAAzB,CAA6B/B,IAAI,CAACC,YAAlC,EAAgDD,IAAhD;AACA,eAAKN,yBAAL,CAA+BqC,GAA/B,CAAmC/B,IAAI,CAACC,YAAxC,EACI+B,UAAU,CAAEhC,IAAD,IAA6B;AACpC,gBAAIA,IAAJ,EAAU;AACN,mBAAKU,mBAAL,CAAyBV,IAAI,CAACC,YAA9B,EAA4C,IAA5C,EAAkD,KAAlD;AACAD,cAAAA,IAAI,CAACsB,KAAL;AACAtB,cAAAA,IAAI,GAAGI,SAAP;AACH;AACJ,WANS,EAMP,IANO,EAMDJ,IANC,CADd;AASH;AACD;;;AACUD,QAAAA,aAAa,CAACwB,MAAD,EAAiB;AACpC,cAAIK,EAAE,GAAG,KAAKlC,yBAAL,CAA+BmC,GAA/B,CAAmCN,MAAnC,CAAT;AACA,cAAIK,EAAJ,EAAQE,YAAY,CAACF,EAAD,CAAZ;AACR,eAAKnC,mBAAL,CAAyBY,MAAzB,CAAgCkB,MAAhC;AACA,eAAK7B,yBAAL,CAA+BW,MAA/B,CAAsCkB,MAAtC;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACWU,QAAAA,oBAAoB,CAACjC,IAAD,EAAyBE,MAAzB,EAAyD;AAChF,iBAAO,KAAKgC,kBAAL,CAAwBlC,IAAxB,EAA8BE,MAA9B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACWiC,QAAAA,iBAAiB,CAACnC,IAAD,EAAyBE,MAAzB,EAAgD;AAEpEF,UAAAA,IAAI,CAACG,UAAL,GAAkBD,MAAlB;AACAF,UAAAA,IAAI,CAACO,QAAL,GAAgBL,MAAM,CAACkC,UAAP,CAAkB7B,QAAlC;AAEA,eAAKR,aAAL,CAAmBC,IAAI,CAACC,YAAxB;AACA,eAAKwB,kBAAL,CAAwBvB,MAAM,CAACI,QAAP,CAAgBC,QAAxC;AAEA,eAAKlB,eAAL,CAAqB0C,GAArB,CAAyB7B,MAAM,CAACI,QAAP,CAAgBC,QAAzC,EAAmDP,IAAnD;AACA,eAAKV,oBAAL,CAA0ByC,GAA1B,CAA8B7B,MAAM,CAACI,QAAP,CAAgBC,QAA9C,EAAwDL,MAAxD;AACA,eAAKf,mBAAL,CAAyB4C,GAAzB,CAA6B7B,MAAM,CAACI,QAAP,CAAgBC,QAA7C,EAAuDL,MAAvD;AAEA,eAAKmC,iBAAL,CAAuBrC,IAAvB;AACH;AAGD;;;AACUS,QAAAA,kBAAkB,CAACc,MAAD,EAAiBrB,MAAjB,EAAwC;AAChE,cAAI0B,EAAE,GAAG,KAAKpC,oBAAL,CAA0BqC,GAA1B,CAA8B3B,MAAM,CAACI,QAAP,CAAgBC,QAA9C,CAAT;AACA,cAAIqB,EAAJ,EAAQE,YAAY,CAACF,EAAD,CAAZ;AACR,eAAKrC,oBAAL,CAA0BwC,GAA1B,CAA8B7B,MAAM,CAACI,QAAP,CAAgBC,QAA9C,EAAwDL,MAAxD;AACA,eAAKV,oBAAL,CAA0BuC,GAA1B,CAA8B7B,MAAM,CAACI,QAAP,CAAgBC,QAA9C,EACIyB,UAAU,CAAC,CAACT,MAAD,EAAiBrB,MAAjB,KAAsC;AAC7C,iBAAKQ,mBAAL,CAAyBa,MAAzB,EAAiCrB,MAAjC,EAAyC,IAAzC;AACAA,YAAAA,MAAM,GAAGE,SAAT;AACH,WAHS,EAGPF,MAAM,CAACoC,qBAHA,EAGuBf,MAHvB,EAG+BrB,MAH/B,CADd;AAMH;AACD;;;AACUuB,QAAAA,kBAAkB,CAAClB,QAAD,EAAmB;AAC3C,cAAIqB,EAAE,GAAG,KAAKpC,oBAAL,CAA0BqC,GAA1B,CAA8BtB,QAA9B,CAAT;AACA,cAAIqB,EAAJ,EAAQE,YAAY,CAACF,EAAD,CAAZ;AACR,eAAKrC,oBAAL,CAA0Bc,MAA1B,CAAiCE,QAAjC;AACA,eAAKf,oBAAL,CAA0Ba,MAA1B,CAAiCE,QAAjC;AACH;AACD;;;AACUgC,QAAAA,YAAY,CAAChC,QAAD,EAAmC;AACrD,cAAIiC,UAAU,GAAG,KAAKjD,oBAAL,CAA0BsC,GAA1B,CAA8BtB,QAA9B,CAAjB;AACA,cAAI,CAACiC,UAAL,EAAiB,OAAO,IAAP;AAEjB,cAAIZ,EAAE,GAAG,KAAKpC,oBAAL,CAA0BqC,GAA1B,CAA8BtB,QAA9B,CAAT;AACA,cAAIqB,EAAJ,EAAQE,YAAY,CAACF,EAAD,CAAZ;AACR,eAAKrC,oBAAL,CAA0Bc,MAA1B,CAAiCE,QAAjC;AACA,eAAKf,oBAAL,CAA0Ba,MAA1B,CAAiCE,QAAjC;AACA,eAAKpB,mBAAL,CAAyBkB,MAAzB,CAAgCE,QAAhC;AACA,iBAAOiC,UAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAC8B,cAAbC,aAAa,CAACzC,IAAD,EAAyB0C,WAAzB,EAA8CJ,qBAA9C,EAAyG;AAC/H;AACA,cAAIK,WAAW,GAAG,MAAM;AAAA;AAAA,oDAAiBC,YAAjB,CAA8BF,WAA9B,CAAxB;AACA,cAAI,CAACC,WAAW,CAACE,IAAjB,EAAuB,OAAO;AAAA;AAAA,gCAAOC,QAAP,CAAgBH,WAAW,CAACI,GAA5B,EAAiCJ,WAAW,CAAC3B,IAA7C,CAAP;AACvB,cAAIV,QAAQ,GAAGqC,WAAW,CAACK,IAA3B,CAJ+H,CAK/H;;AACA,cAAI9C,MAAM,GAAG,KAAKqC,YAAL,CAAkBjC,QAAQ,CAACC,QAA3B,CAAb;;AACA,cAAI,CAACL,MAAL,EAAa;AACT;AACA,mBAAO;AAAA;AAAA,kCAAO4C,QAAP,CAAgB,QAAhB,EAA0B;AAAA;AAAA,0CAAWG,oBAArC,CAAP;AACH,WAV8H,CAY/H;;;AACA/C,UAAAA,MAAM,CAACI,QAAP,CAAgB4C,QAAhB,GAA2B5C,QAAQ,CAAC4C,QAApC;AACAhD,UAAAA,MAAM,CAACkC,UAAP,CAAkBc,QAAlB,GAA6B5C,QAAQ,CAAC4C,QAAtC;AAEA,cAAIH,GAAG,GAAG,KAAKd,oBAAL,CAA0BjC,IAA1B,EAAgCE,MAAhC,CAAV;;AACA,cAAI6C,GAAJ,EAAS;AACL,mBAAO;AAAA;AAAA,kCAAOD,QAAP,CAAgBC,GAAhB,EAAqB;AAAA;AAAA,0CAAWI,UAAhC,CAAP;AACH;;AACD,cAAIb,qBAAqB,KAAKlC,SAA9B,EAAyCF,MAAM,CAACoC,qBAAP;AACzC,eAAKH,iBAAL,CAAuBnC,IAAvB,EAA6BE,MAA7B;AACA,eAAKkD,oBAAL,CAA0BpD,IAA1B,EAAgCE,MAAhC;AACA,iBAAO;AAAA;AAAA,gCAAOmD,SAAP,CAAiBnD,MAAjB,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAC8B,cAAboD,aAAa,CAACtD,IAAD,EAAyB0C,WAAzB,EAA8Ca,cAA9C,EAA+EjB,qBAA/E,EAA0I;AAAA;;AAChK,cAAIK,WAAW,GAAG,MAAM;AAAA;AAAA,oDAAiBC,YAAjB,CAA8BF,WAA9B,CAAxB;AACA,cAAI,CAACC,WAAW,CAACE,IAAjB,EAAuB,OAAO;AAAA;AAAA,gCAAOC,QAAP,CAAgBH,WAAW,CAACI,GAA5B,EAAiCJ,WAAW,CAAC3B,IAA7C,CAAP;AACvB,cAAIV,QAAQ,GAAGqC,WAAW,CAACK,IAA3B;AAEA,cAAIV,qBAAqB,KAAKlC,SAA9B,EAAyCkC,qBAAqB,GAAG,KAAKzD,wBAA7B;AAEzC,cAAIuD,UAAuB,GAAG;AAC1B7B,YAAAA,QAAQ,EAAED,QAAQ,CAACC,QADO;AAE1B2C,YAAAA,QAAQ,2BAAEK,cAAc,CAACL,QAAjB,oCAA6B5C,QAAQ,CAAC4C,QAFpB;AAG1BM,YAAAA,kBAAkB,2BAAED,cAAc,CAACC,kBAAjB,oCAAuC,CAH/B;AAI1BC,YAAAA,mBAAmB,4BAAEF,cAAc,CAACE,mBAAjB,qCAAwC,EAJjC;AAK1BC,YAAAA,OAAO,EAAE,KALiB;AAM1BC,YAAAA,YAAY,EAAE;AAAA;AAAA,gDAAcC;AANF,WAA9B;AASA,cAAI1D,MAAe,GAAG;AAClBI,YAAAA,QAAQ,EAAEA,QADQ;AAElB8B,YAAAA,UAAU,EAAEA,UAFM;AAGlByB,YAAAA,gBAAgB,EAAE,IAAIzE,GAAJ,EAHA;AAIlBkD,YAAAA,qBAAqB,EAAEA;AAJL,WAAtB;AAMA,cAAIS,GAAG,GAAG,KAAKd,oBAAL,CAA0BjC,IAA1B,EAAgCE,MAAhC,CAAV;;AACA,cAAI6C,GAAJ,EAAS;AACL,mBAAO;AAAA;AAAA,kCAAOD,QAAP,CAAgBC,GAAhB,EAAqB;AAAA;AAAA,0CAAWI,UAAhC,CAAP;AACH;;AACD,eAAKhB,iBAAL,CAAuBnC,IAAvB,EAA6BE,MAA7B;AACA,iBAAO;AAAA;AAAA,gCAAOmD,SAAP,CAAiBnD,MAAjB,CAAP;AACH;AAGD;AACJ;AACA;;;AACW4D,QAAAA,OAAO,GAAY;AACtB,iBAAO;AAAA;AAAA,0CAAY,KAAK3E,mBAAjB,CAAP;AACH;AACD;AACJ;AACA;;;AACW4E,QAAAA,SAAS,CAACxD,QAAD,EAAwC;AACpD,iBAAO,KAAKpB,mBAAL,CAAyB0C,GAAzB,CAA6BtB,QAA7B,CAAP;AACH;AACD;AACJ;AACA;;;AACWyD,QAAAA,aAAa,CAACzD,QAAD,EAAiD;AACjE,iBAAO,KAAKlB,eAAL,CAAqBwC,GAArB,CAAyBtB,QAAzB,CAAP;AACH;AACD;AACJ;AACA;;;AACW0D,QAAAA,cAAc,CAACC,SAAD,EAA0C;AAC3D,cAAIC,QAA4B,GAAG,EAAnC;;AACA,eAAK,IAAI5D,QAAT,IAAqB2D,SAArB,EAAgC;AAC5B,gBAAIlE,IAAI,GAAG,KAAKX,eAAL,CAAqBwC,GAArB,CAAyBtB,QAAzB,CAAX;AACA,gBAAIP,IAAJ,EAAUmE,QAAQ,CAACtE,IAAT,CAAcG,IAAd;AACb;;AACD,iBAAOmE,QAAP;AACH;AACD;AACJ;AACA;;;AACWC,QAAAA,6BAA6B,CAACC,WAAD,EAAiD;AACjF,cAAIF,QAA4B,GAAG,EAAnC;;AACA,eAAK,IAAIG,CAAT,IAAcD,WAAd,EAA2B;AACvB,gBAAIrE,IAAI,GAAG,KAAKX,eAAL,CAAqBwC,GAArB,CAAyByC,CAAC,CAAC/D,QAA3B,CAAX;AACA,gBAAIP,IAAJ,EAAUmE,QAAQ,CAACtE,IAAT,CAAcG,IAAd;AACb;;AACD,iBAAOmE,QAAP;AACH;;AAISjC,QAAAA,kBAAkB,CAAClC,IAAD,EAAyBE,MAAzB,EAAyD;AACjF,eAAK,IAAIqE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKzF,mBAAL,CAAyB0F,MAA7C,EAAqDD,CAAC,EAAtD,EAA0D;AACtD,gBAAI;AACA,kBAAIxB,GAAG,GAAG,KAAKjE,mBAAL,CAAyByF,CAAzB,EAA4BvE,IAA5B,EAAkCE,MAAlC,CAAV;AACA,kBAAI6C,GAAJ,EAAS,OAAOA,GAAP;AACZ,aAHD,CAGE,OAAO0B,CAAP,EAAU;AAAA;;AACR,4CAAK9F,UAAL,CAAgBwC,MAAhB,mCAAwBJ,KAAxB,CAA8B,oBAA9B,EAAoD0D,CAApD;AACH;AACJ;;AACD,iBAAO,IAAP;AACH;;AACSpC,QAAAA,iBAAiB,CAACrC,IAAD,EAA+B;AACtD;AACAgC,UAAAA,UAAU,CAAEhC,IAAD,IAA6B;AACpC,gBAAIA,IAAJ,EAAU;AACN,mBAAK,IAAIuE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKxF,kBAAL,CAAwByF,MAA5C,EAAoDD,CAAC,EAArD,EAAyD;AACrD,oBAAI;AACA,uBAAKxF,kBAAL,CAAwBwF,CAAxB,EAA2BvE,IAA3B;AACH,iBAFD,CAEE,OAAOyE,CAAP,EAAU;AAAA;;AACR,iDAAK9F,UAAL,CAAgBwC,MAAhB,oCAAwBJ,KAAxB,CAA8B,oBAA9B,EAAoD0D,CAApD;AACH;AACJ;;AACDzE,cAAAA,IAAI,GAAGI,SAAP;AACH;AACJ,WAXS,EAWP,CAXO,EAWJJ,IAXI,CAAV;AAYH;;AACS0B,QAAAA,6BAA6B,CAACH,MAAD,EAAiBrB,MAAjB,EAAwC;AAC3E;AACA8B,UAAAA,UAAU,CAAC,CAACT,MAAD,EAAkBrB,MAAlB,KAAuC;AAC9C,gBAAIqB,MAAM,IAAIrB,MAAd,EAAsB;AAClB,mBAAK,IAAIqE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKrF,8BAAL,CAAoCsF,MAAxD,EAAgED,CAAC,EAAjE,EAAqE;AACjE,oBAAI;AACA,uBAAKrF,8BAAL,CAAoCqF,CAApC,EAAuChD,MAAvC,EAA+CrB,MAA/C;AACH,iBAFD,CAEE,OAAOuE,CAAP,EAAU;AAAA;;AACR,iDAAK9F,UAAL,CAAgBwC,MAAhB,oCAAwBJ,KAAxB,CAA8B,wBAA9B,EAAwD0D,CAAxD;AACH;AACJ;;AACDlD,cAAAA,MAAM,GAAGnB,SAAT;AACAF,cAAAA,MAAM,GAAGE,SAAT;AACH;AACJ,WAZS,EAYP,CAZO,EAYJmB,MAZI,EAYIrB,MAZJ,CAAV;AAaH;;AACSM,QAAAA,qBAAqB,CAACe,MAAD,EAAiBrB,MAAjB,EAA2C;AACtE,eAAK,IAAIqE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKvF,sBAAL,CAA4BwF,MAAhD,EAAwDD,CAAC,EAAzD,EAA6D;AACzD,gBAAI;AACA,kBAAIG,IAAI,GAAG,KAAK1F,sBAAL,CAA4BuF,CAA5B,EAA+BhD,MAA/B,EAAuCrB,MAAvC,CAAX;AACA,kBAAI,CAACwE,IAAL,EAAW,OAAO,KAAP;AACd,aAHD,CAGE,OAAOD,CAAP,EAAU;AAAA;;AACR,6CAAK9F,UAAL,CAAgBwC,MAAhB,oCAAwBJ,KAAxB,CAA8B,wBAA9B,EAAwD0D,CAAxD;AACH;AACJ;;AACD,iBAAO,IAAP;AACH;;AACSrB,QAAAA,oBAAoB,CAACpD,IAAD,EAAyBE,MAAzB,EAAmD;AAC7E,eAAK,IAAIqE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKtF,qBAAL,CAA2BuF,MAA/C,EAAuDD,CAAC,EAAxD,EAA4D;AACxD,gBAAI;AACA,mBAAKtF,qBAAL,CAA2BsF,CAA3B,EAA8BvE,IAA9B,EAAoCE,MAApC;AACH,aAFD,CAEE,OAAOuE,CAAP,EAAU;AAAA;;AACR,6CAAK9F,UAAL,CAAgBwC,MAAhB,oCAAwBJ,KAAxB,CAA8B,uBAA9B,EAAuD0D,CAAvD;AACH;AACJ;;AACD,iBAAO,IAAP;AACH;AAED;AACJ;AACA;AACA;;;AACWE,QAAAA,aAAa,CAACC,OAAD,EAAoC;AACpD,eAAK9F,mBAAL,CAAyBe,IAAzB,CAA8B+E,OAA9B;AACH;AACD;AACJ;AACA;AACA;;;AACWC,QAAAA,cAAc,CAACD,OAAD,EAAoC;AACrD,eAAK9F,mBAAL,CAAyBgG,MAAzB,CAAgCC,CAAC,IAAIA,CAAC,IAAIH,OAA1C;AACH;AAED;AACJ;AACA;AACA;;;AACWI,QAAAA,YAAY,CAACJ,OAAD,EAAmC;AAClD,eAAK7F,kBAAL,CAAwBc,IAAxB,CAA6B+E,OAA7B;AACH;AACD;AACJ;AACA;AACA;;;AACWK,QAAAA,aAAa,CAACL,OAAD,EAAmC;AACnD,eAAK7F,kBAAL,CAAwB+F,MAAxB,CAA+BC,CAAC,IAAIA,CAAC,IAAIH,OAAzC;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWM,QAAAA,eAAe,CAACN,OAAD,EAAuC;AACzD,eAAK5F,sBAAL,CAA4Ba,IAA5B,CAAiC+E,OAAjC;AACH;AACD;AACJ;AACA;AACA;;;AACWO,QAAAA,gBAAgB,CAACP,OAAD,EAAuC;AAC1D,eAAK5F,sBAAL,CAA4B8F,MAA5B,CAAmCC,CAAC,IAAIA,CAAC,IAAIH,OAA7C;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACWQ,QAAAA,eAAe,CAACR,OAAD,EAAsC;AACxD,eAAK3F,qBAAL,CAA2BY,IAA3B,CAAgC+E,OAAhC;AACH;AACD;AACJ;AACA;AACA;;;AACWS,QAAAA,gBAAgB,CAACT,OAAD,EAAsC;AACzD,eAAK3F,qBAAL,CAA2B6F,MAA3B,CAAkCC,CAAC,IAAIA,CAAC,IAAIH,OAA5C;AACH;AAGD;AACJ;AACA;AACA;;;AACWU,QAAAA,wBAAwB,CAACV,OAAD,EAA+C;AAC1E,eAAK1F,8BAAL,CAAoCW,IAApC,CAAyC+E,OAAzC;AACH;AACD;AACJ;AACA;AACA;;;AACWW,QAAAA,yBAAyB,CAACX,OAAD,EAA+C;AAC3E,eAAK1F,8BAAL,CAAoC4F,MAApC,CAA2CC,CAAC,IAAIA,CAAC,IAAIH,OAArD;AACH;;AAlcoB,O","sourcesContent":["import { BaseConnection, ConnectionStatus, WsServer } from \"tsrpc\";\nimport { ClientConnection, GameMsgCall } from \"./GameServer\";\nimport { serviceProto as GameServiceProto, ServiceType as GameServiceType } from \"../shared/gameClient/protocols/serviceProto\";\nimport { MsgDisconnect } from \"../shared/gameClient/protocols/MsgDisconnect\";\nimport { hasProperty } from \"../shared/tsgf/Utils\";\nimport { IPlayer } from \"../shared/tsgfServer/auth/Models\";\nimport { PlayerAuthHelper } from \"../shared/tsgfServer/auth/PlayerAuthHelper\";\nimport { ErrorCodes, IResult, Result } from \"../shared/tsgf/Result\";\nimport { ENetworkState, IPlayerInfoPara, IPlayerInfo } from \"../shared/tsgf/player/IPlayerInfo\";\nimport { IGameServerCfg } from \"../ServerConfig\";\n\n/**连接认证通过前事件处理器参数定义*/\nexport type ConnAuthingHandler = (conn: ClientConnection, player: IPlayer) => string | void;\n/**连接认证通过事件处理器参数定义, 断开重连也会走这里*/\nexport type ConnAuthedHandler = (conn: ClientConnection) => void;\n/**玩家断线事件处理器参数定义, 返回是否支持断线重连*/\nexport type ConnDisconnectHandler = (connId: string, player: IPlayer) => boolean;\n/**[断线时返回支持重连才有]玩家断线重连上事件处理器参数定义, 返回是否支持断线重连*/\nexport type ConnReconnectHandler = (conn: ClientConnection, player: IPlayer) => void;\n/**(认证过的)玩家断开连接并不再重连事件处理器参数定义*/\nexport type AuthedPlayerDisconnectHandler = (connId: string, player: IPlayer) => void;\n\n/**游戏服务器的连接管理*/\nexport class GameConnMgr {\n\n    /**默认的房间中断线等待重连的秒数(超过这个时间不再等待重连,即要求重连会被踢掉要求重新登陆)*/\n    public defaultWaitReconnectTime = 60000;\n\n    private connAuthingHandlers: ConnAuthingHandler[] = [];\n    private connAuthedHandlers: ConnAuthedHandler[] = [];\n    private connDisconnectHandlers: ConnDisconnectHandler[] = [];\n    private connReconnectHandlers: ConnReconnectHandler[] = [];\n    private authedPlayerDisconnectHandlers: AuthedPlayerDisconnectHandler[] = [];\n\n    /**所有认证过的玩家信息(完全断开后才清除)*/\n    private allConnectionPlayer: Map<string, IPlayer> = new Map<string, IPlayer>();\n\n    /**当前认证过的连接, playerId => conn */\n    private currConnections: Map<string, ClientConnection> = new Map<string, ClientConnection>();\n    /**当前认证过的玩家信息, playerId => player */\n    private currConnectionplayer: Map<string, IPlayer> = new Map<string, IPlayer>();\n\n    /**等待断线重连的玩家, playerId => player */\n    private waitConnectionPlayer: Map<string, IPlayer> = new Map<string, IPlayer>();\n    /**等待断线重连的定时器, playerId => NodeJS.Timeout | number */\n    private waitConnectionTimeHD: Map<string, any> = new Map<string, any>();\n\n    /**等待认证的连接，超时不认证则踢掉, playerId => conn */\n    private waitAuthConnections: Map<string, ClientConnection> = new Map<string, ClientConnection>();\n    /**等待认证的定时器，超时不认证则踢掉, playerId => NodeJS.Timeout | number */\n    private waitAuthConnectionsTimeHD: Map<string, any> = new Map<string, any>();\n\n\n    private gameServer: WsServer<GameServiceType>;\n    private getGameServerCfg: () => Promise<IGameServerCfg>;\n\n    constructor(gameServer: WsServer<GameServiceType>, getGameServerCfg: () => Promise<IGameServerCfg>) {\n        this.gameServer = gameServer;\n        this.getGameServerCfg = getGameServerCfg;\n\n        //定义连接断开后的数据清理\n        this.gameServer.flows.postDisconnectFlow.push(v => {\n            //先停止等待认证（都断开了）\n            this.clearWaitAuth(v.conn.connectionId);\n\n            //判断之前是否认证过(即是否有玩家信息)\n            let player = v.conn.currPlayer;\n            if (player) {\n                //@ts-ignore\n                v.conn.currPlayer = undefined;\n                //直接删除当前连接的相关数据, 不管有没重连, 都断开了\n                this.currConnections.delete(player.authInfo.playerId);\n                this.currConnectionplayer.delete(player.authInfo.playerId);\n\n                //有玩家信息的断开，则判断是否要断线重连\n                if (this.triggerConnDisconnect(v.conn.connectionId, player)) {\n                    //所有中间件都允许断线重连，则直接开始流程\n                    this.startWaitReconnect(v.conn.connectionId, player);\n                    return v;\n                }\n            }\n            this.disconnectClearData(v.conn.connectionId, player, true);\n            return v;\n        });\n\n        //定义所有消息请求都要再认证通过之后才会受理\n        this.gameServer.flows.preApiCallFlow.push(call => {\n            if (call.service.name == \"Reconnect\" || call.service.name == \"Authorize\") {\n                return call;\n            }\n            if (!call.conn.currPlayer) {\n                //发送所有消息前必须通过认证\n                call.error('You need Authorize before do this', { code: ErrorCodes.AuthUnverified });\n                return undefined;\n            }\n            return call;\n        });\n        this.gameServer.flows.preMsgCallFlow.push(call => {\n            if (call.service.name == \"Reconnect\" || call.service.name == \"Authorize\" || call.service.name == \"Disconnect\") {\n                return call;\n            }\n            if (!call.conn.currPlayer) {\n                //发送所有消息前必须通过认证\n                call.logger.log('You need Authorize before do this', { code: ErrorCodes.AuthUnverified });\n                return undefined;\n            }\n            return call;\n        });\n        this.gameServer.listenMsg('Disconnect', (call: GameMsgCall<MsgDisconnect>) => {\n            //主动要求断开的,直接清理数据\n            if (call.conn.currPlayer) this.disconnectClearData(call.conn.connectionId, call.conn.currPlayer, true);\n            call.conn.close();\n        });\n    }\n\n\n    /**连接断开的清理数据*/\n    protected disconnectClearData(connId: string, player?: IPlayer | null, triggerEvent: boolean = true): void {\n        if (player) {\n            //有玩家才清理的数据\n\n            //清理等待断线重连\n            this.clearWaitReconnect(player.authInfo.playerId);\n\n            //清理当前在线的连接\n            this.currConnections.delete(player.authInfo.playerId);\n            this.currConnectionplayer.delete(player.authInfo.playerId);\n\n            //清理所有认证过的玩家\n            this.allConnectionPlayer.delete(player.authInfo.playerId);\n\n            //确认是否触发认证用户断开事件\n            if (triggerEvent) this.triggerAuthedPlayerDisconnect(connId, player);\n        }\n        this.clearWaitAuth(connId);\n\n    }\n    /**开始连接等待认证定时器, 固定等待3秒*/\n    protected startWaitAuth(conn: ClientConnection): void {\n        let hd = this.waitAuthConnectionsTimeHD.get(conn.connectionId);\n        if (hd) clearTimeout(hd);\n        this.waitAuthConnections.set(conn.connectionId, conn);\n        this.waitAuthConnectionsTimeHD.set(conn.connectionId,\n            setTimeout((conn?: ClientConnection) => {\n                if (conn) {\n                    this.disconnectClearData(conn.connectionId, null, false);\n                    conn.close();\n                    conn = undefined;\n                }\n            }, 3000, conn)\n        );\n    }\n    /**清理连接的等待认证定时器*/\n    protected clearWaitAuth(connId: string) {\n        let hd = this.waitAuthConnectionsTimeHD.get(connId);\n        if (hd) clearTimeout(hd);\n        this.waitAuthConnections.delete(connId);\n        this.waitAuthConnectionsTimeHD.delete(connId);\n    }\n    /**\n     * 检查新连接通过认证,是否有阻止的\n     * @param conn \n     * @param player \n     */\n    public checkConnAuthorizing(conn: ClientConnection, player: IPlayer): string | null {\n        return this.triggerConnAuthing(conn, player);\n    }\n    /**\n     * 设置新连接通过认证, 新认证的或者断线重连的，都要调用本方法，设置认证状态\n     * @param conn \n     * @param player \n     */\n    public setConnAuthorized(conn: ClientConnection, player: IPlayer): void {\n\n        conn.currPlayer = player;\n        conn.playerId = player.playerInfo.playerId;\n\n        this.clearWaitAuth(conn.connectionId);\n        this.clearWaitReconnect(player.authInfo.playerId);\n\n        this.currConnections.set(player.authInfo.playerId, conn);\n        this.currConnectionplayer.set(player.authInfo.playerId, player);\n        this.allConnectionPlayer.set(player.authInfo.playerId, player);\n\n        this.triggerConnAuthed(conn);\n    }\n\n\n    /**开始等待断线重连流程*/\n    protected startWaitReconnect(connId: string, player: IPlayer): void {\n        let hd = this.waitConnectionTimeHD.get(player.authInfo.playerId);\n        if (hd) clearTimeout(hd);\n        this.waitConnectionPlayer.set(player.authInfo.playerId, player);\n        this.waitConnectionTimeHD.set(player.authInfo.playerId,\n            setTimeout((connId: string, player?: IPlayer) => {\n                this.disconnectClearData(connId, player, true);\n                player = undefined;\n            }, player.roomWaitReconnectTime, connId, player)\n        );\n    }\n    /**清理连接的等待认证定时器*/\n    protected clearWaitReconnect(playerId: string) {\n        let hd = this.waitConnectionTimeHD.get(playerId);\n        if (hd) clearTimeout(hd);\n        this.waitConnectionPlayer.delete(playerId);\n        this.waitConnectionTimeHD.delete(playerId);\n    }\n    /**尝试完成重连,清理等待数据,并返回这个连接之前用户信息,如果为null则表示已经不再等待重连,需要重新登陆*/\n    protected tryReconnect(playerId: string): IPlayer | null {\n        let waitPlayer = this.waitConnectionPlayer.get(playerId);\n        if (!waitPlayer) return null;\n\n        let hd = this.waitConnectionTimeHD.get(playerId);\n        if (hd) clearTimeout(hd);\n        this.waitConnectionPlayer.delete(playerId);\n        this.waitConnectionTimeHD.delete(playerId);\n        this.allConnectionPlayer.delete(playerId);\n        return waitPlayer;\n    }\n    /**\n     * 连接重连\n     * @param conn \n     * @param playerToken \n     * @param roomWaitReconnectTime 可设置房间中断线后等待重连的毫秒数,默认为60000ms(60秒),设成0表示断线后直接清理(按退出房间处理)不等待重连 \n     * @returns 成功null或者失败的错误消息 \n     */\n    public async connReconnect(conn: ClientConnection, playerToken: string, roomWaitReconnectTime?: number): Promise<IResult<IPlayer>> {\n        //先验证token\n        let authInfoRet = await PlayerAuthHelper.verification(playerToken);\n        if (!authInfoRet.succ) return Result.buildErr(authInfoRet.err, authInfoRet.code);\n        let authInfo = authInfoRet.data;\n        //通过以及拿到playerId,尝试断线重连数据获取\n        let player = this.tryReconnect(authInfo.playerId);\n        if (!player) {\n            //已经被等待清理,则返回重连失败\n            return Result.buildErr('请重新登陆!', ErrorCodes.AuthReconnectionFail);\n        }\n\n        //刷新玩家显示名\n        player.authInfo.showName = authInfo.showName;\n        player.playerInfo.showName = authInfo.showName;\n\n        let err = this.checkConnAuthorizing(conn, player);\n        if (err) {\n            return Result.buildErr(err, ErrorCodes.AuthForbid);\n        }\n        if (roomWaitReconnectTime !== undefined) player.roomWaitReconnectTime;\n        this.setConnAuthorized(conn, player);\n        this.triggerConnReconnect(conn, player);\n        return Result.buildSucc(player);\n    }\n\n    /**\n     * 连接认证\n     * @param conn \n     * @param playerToken \n     * @param roomWaitReconnectTime 可设置房间中断线后等待重连的毫秒数,默认为60000ms(60秒),设成0表示断线后直接清理(按退出房间处理)不等待重连 \n     * @returns 成功null或者失败的错误消息 \n     */\n    public async connAuthorize(conn: ClientConnection, playerToken: string, authPlayerPara: IPlayerInfoPara, roomWaitReconnectTime?: number): Promise<IResult<IPlayer>> {\n        let authInfoRet = await PlayerAuthHelper.verification(playerToken);\n        if (!authInfoRet.succ) return Result.buildErr(authInfoRet.err, authInfoRet.code);\n        let authInfo = authInfoRet.data;\n\n        if (roomWaitReconnectTime === undefined) roomWaitReconnectTime = this.defaultWaitReconnectTime;\n\n        let playerInfo: IPlayerInfo = {\n            playerId: authInfo.playerId,\n            showName: authPlayerPara.showName ?? authInfo.showName,\n            customPlayerStatus: authPlayerPara.customPlayerStatus ?? 0,\n            customPlayerProfile: authPlayerPara.customPlayerProfile ?? '',\n            isRobot: false,\n            networkState: ENetworkState.ONLINE,\n        };\n\n        let player: IPlayer = {\n            authInfo: authInfo,\n            playerInfo: playerInfo,\n            roomRobotPlayers: new Map(),\n            roomWaitReconnectTime: roomWaitReconnectTime,\n        };\n        let err = this.checkConnAuthorizing(conn, player);\n        if (err) {\n            return Result.buildErr(err, ErrorCodes.AuthForbid);\n        }\n        this.setConnAuthorized(conn, player);\n        return Result.buildSucc(player);\n    }\n\n\n    /**\n     * 当前是否还有玩家(包含等待断线重连的)\n     */\n    public hasUser(): boolean {\n        return hasProperty(this.allConnectionPlayer);\n    }\n    /**\n     * 获取玩家信息（包含暂时离线的）\n     */\n    public getPlayer(playerId: string): IPlayer | undefined {\n        return this.allConnectionPlayer.get(playerId);\n    }\n    /**\n     * 获取玩家连接（只有在线的才有连接）\n     */\n    public getPlayerConn(playerId: string): ClientConnection | undefined {\n        return this.currConnections.get(playerId);\n    }\n    /**\n     * 获取玩家连接列表（只有在线的才有连接）\n     */\n    public getPlayersConn(playerIds: string[]): ClientConnection[] {\n        let connList: ClientConnection[] = [];\n        for (let playerId of playerIds) {\n            let conn = this.currConnections.get(playerId);\n            if (conn) connList.push(conn);\n        }\n        return connList;\n    }\n    /**\n     * 获取玩家连接列表（只有在线的才有连接）\n     */\n    public getPlayersConnFromPlayerInfos(playerInfos: IPlayerInfo[]): ClientConnection[] {\n        let connList: ClientConnection[] = [];\n        for (let p of playerInfos) {\n            let conn = this.currConnections.get(p.playerId);\n            if (conn) connList.push(conn);\n        }\n        return connList;\n    }\n\n\n\n    protected triggerConnAuthing(conn: ClientConnection, player: IPlayer): string | null {\n        for (let i = 0; i < this.connAuthingHandlers.length; i++) {\n            try {\n                let err = this.connAuthingHandlers[i](conn, player);\n                if (err) return err;\n            } catch (e) {\n                this.gameServer.logger?.error(\"triggerConnAuthed:\", e);\n            }\n        }\n        return null;\n    }\n    protected triggerConnAuthed(conn: ClientConnection): void {\n        //延时1毫秒,让原始授权流程完整走完后再触发事件\n        setTimeout((conn?: ClientConnection) => {\n            if (conn) {\n                for (let i = 0; i < this.connAuthedHandlers.length; i++) {\n                    try {\n                        this.connAuthedHandlers[i](conn);\n                    } catch (e) {\n                        this.gameServer.logger?.error(\"triggerConnAuthed:\", e);\n                    }\n                }\n                conn = undefined;\n            }\n        }, 1, conn);\n    }\n    protected triggerAuthedPlayerDisconnect(connId: string, player: IPlayer): void {\n        //延时1毫秒,让原始流程完整走完后再触发事件\n        setTimeout((connId?: string, player?: IPlayer) => {\n            if (connId && player) {\n                for (let i = 0; i < this.authedPlayerDisconnectHandlers.length; i++) {\n                    try {\n                        this.authedPlayerDisconnectHandlers[i](connId, player);\n                    } catch (e) {\n                        this.gameServer.logger?.error(\"triggerConnDisconnect:\", e);\n                    }\n                }\n                connId = undefined;\n                player = undefined;\n            }\n        }, 1, connId, player);\n    }\n    protected triggerConnDisconnect(connId: string, player: IPlayer): boolean {\n        for (let i = 0; i < this.connDisconnectHandlers.length; i++) {\n            try {\n                let wait = this.connDisconnectHandlers[i](connId, player);\n                if (!wait) return false;\n            } catch (e) {\n                this.gameServer.logger?.error(\"triggerConnDisconnect:\", e);\n            }\n        }\n        return true;\n    }\n    protected triggerConnReconnect(conn: ClientConnection, player: IPlayer): boolean {\n        for (let i = 0; i < this.connReconnectHandlers.length; i++) {\n            try {\n                this.connReconnectHandlers[i](conn, player);\n            } catch (e) {\n                this.gameServer.logger?.error(\"triggerConnReconnect:\", e);\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 注册验证连接授权事件,新连接和断线重连都走这里\n     * @param handler \n     */\n    public onConnAuthing(handler: ConnAuthingHandler): void {\n        this.connAuthingHandlers.push(handler);\n    }\n    /**\n     * 取消注册连接授权事件\n     * @param handler \n     */\n    public offConnAuthing(handler: ConnAuthingHandler): void {\n        this.connAuthingHandlers.remove(h => h == handler);\n    }\n\n    /**\n     * 注册连接授权事件,新连接和断线重连成功都走这里\n     * @param handler \n     */\n    public onConnAuthed(handler: ConnAuthedHandler): void {\n        this.connAuthedHandlers.push(handler);\n    }\n    /**\n     * 取消注册连接授权事件\n     * @param handler \n     */\n    public offConnAuthed(handler: ConnAuthedHandler): void {\n        this.connAuthedHandlers.remove(h => h == handler);\n    }\n\n    /**\n     * 注册连接断开事件(非服务端主动断开), 返回是否允许等待断线重连! 只有返回true, 才支持 onConnReconnect 事件!\n     *  (彻底断开不再重连则使用 onAuthedPlayerDisconnect)\n     * @param handler \n     */\n    public onConnDiconnect(handler: ConnDisconnectHandler): void {\n        this.connDisconnectHandlers.push(handler);\n    }\n    /**\n     * 取消注册连接断开事件\n     * @param handler \n     */\n    public offConnDiconnect(handler: ConnDisconnectHandler): void {\n        this.connDisconnectHandlers.remove(h => h == handler);\n    }\n\n    /**\n     * 注册断线重连上事件, 只有对应玩家的 onConnDiconnect 事件返回true才支持重连!\n     *  (彻底断开不再重连则使用 onAuthedPlayerDisconnect)\n     * @param handler \n     */\n    public onConnReconnect(handler: ConnReconnectHandler): void {\n        this.connReconnectHandlers.push(handler);\n    }\n    /**\n     * 取消注册连接重新连上事件\n     * @param handler \n     */\n    public offConnReconnect(handler: ConnReconnectHandler): void {\n        this.connReconnectHandlers.remove(h => h == handler);\n    }\n\n\n    /**\n     * 注册玩家断开事件(连接断开并且不再等待重连后触发)\n     * @param handler \n     */\n    public onAuthedPlayerDisconnect(handler: AuthedPlayerDisconnectHandler): void {\n        this.authedPlayerDisconnectHandlers.push(handler);\n    }\n    /**\n     * 取消注册玩家断开事件\n     * @param handler \n     */\n    public offAuthedPlayerDisconnect(handler: AuthedPlayerDisconnectHandler): void {\n        this.authedPlayerDisconnectHandlers.remove(h => h == handler);\n    }\n\n\n}"]}