{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/room/RoomHelper.ts"],"names":["RoomHelper","EFrameSyncState","EPrivateRoomJoinMode","ERoomCreateType","GameServerHelper","buildGuid","ERoomRegChangedType","init","getRedisClient","buildRoomInfo","appId","gameServerInfo","para","roomId","fixedTeamList","fixedTeamInfoList","length","fixedTeamCount","i","id","toString","push","name","minPlayers","fixedTeamMinPlayers","maxPlayers","fixedTeamMaxPlayers","regInfo","roomName","roomType","emptySeats","expireTime","ownerPlayerId","gameServerNodeId","serverNodeId","createTime","Date","now","teamsPlayerIds","isPrivate","roomInfo","createType","COMMON_CREATE","customProperties","matcherKey","playerList","teamList","freeTeamMinPlayers","freeTeamMaxPlayers","frameRate","frameSyncState","STOP","startGameTime","retainEmptyRoomTime","retainOwnSeat","randomRequirePlayerSyncStateInvMs","privateRoomJoinMode","roomIdJoin","password","privateRoomPassword","roomOnlineInfo","buildRoomOnlineInfo","startListenRoomRegInfoChanged","listen","subscribeClient","subscribeObject","cancel","disconnect","getRoomEmptySeats","v","find","p","playerId"],"mappings":"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","sourcesContent":["import { IGameServerInfo } from \"../../hallClient/Models\";\nimport { ICancelable } from \"../../tsgf/ICancelable\";\nimport { EFrameSyncState, EPrivateRoomJoinMode, ERoomCreateType, ICreateRoomPara, IRoomInfo, IRoomOnlineInfo, ITeamInfo } from \"../../tsgf/room/IRoomInfo\";\nimport { GameServerHelper } from \"../game/GameServerHelper\";\nimport { IRedisClient } from \"../redisHelper\";\nimport { buildGuid } from \"../ServerUtils\";\nimport { IRoomRegInfo } from \"./Models\";\n\n\n/**房间注册信息和房间信息的结合体*/\nexport interface IRoomInfoPack {\n    regInfo: IRoomRegInfo;\n    roomInfo: IRoomInfo;\n    roomOnlineInfo: IRoomOnlineInfo;\n}\n/*\nexport interface IRoomRegChanged {\n    regInfo: IRoomGameServerRegInfo;\n    isCreateOrChange: boolean;\n    isDelete: boolean;\n}\n*/\nexport enum ERoomRegChangedType {\n    Create = 1,\n    Delete = 2,\n    PlayerJoinRoom = 3,\n    PlayerLeaveRoom = 4,\n    PlayerChangeTeam = 5,\n    /**变更房间信息,如私有密码等*/\n    ChangeInfo = 6,\n}\nexport interface IRoomRegChangedBase {\n    regInfo: IRoomRegInfo;\n}\nexport interface IRoomRegCreate extends IRoomRegChangedBase {\n    changedType: ERoomRegChangedType.Create;\n}\nexport interface IRoomRegDelete extends IRoomRegChangedBase {\n    changedType: ERoomRegChangedType.Delete;\n}\nexport interface IRoomRegChangeInfo extends IRoomRegChangedBase {\n    changedType: ERoomRegChangedType.ChangeInfo;\n}\nexport interface IRoomRegPlayerJoinRoom extends IRoomRegChangedBase {\n    changedType: ERoomRegChangedType.PlayerJoinRoom;\n    joinRoomPlayerId: string;\n    teamId?: string;\n}\nexport interface IRoomRegPlayerLeaveRoom extends IRoomRegChangedBase {\n    changedType: ERoomRegChangedType.PlayerLeaveRoom;\n    leaveRoomPlayerId: string;\n    teamId?: string;\n}\nexport interface IRoomRegPlayerChangeTeam extends IRoomRegChangedBase {\n    changedType: ERoomRegChangedType.PlayerChangeTeam;\n    changePlayerId: string;\n    oldTeamId?: string;\n    newTeamId?: string;\n}\nexport type IRoomRegChanged = IRoomRegCreate | IRoomRegChangeInfo | IRoomRegDelete\n    | IRoomRegPlayerJoinRoom | IRoomRegPlayerLeaveRoom | IRoomRegPlayerChangeTeam;\n\n/**房间公共操作（跨服务器）*/\nexport class RoomHelper {\n\n    public static getRedisClient: (reuseClient: boolean) => Promise<IRedisClient>;\n\n    public static init(getRedisClient: (reuseClient: boolean) => Promise<IRedisClient>) {\n        RoomHelper.getRedisClient = getRedisClient;\n    }\n\n    /**\n     * 构建创建房间的相关信息（房间注册信息和初始的房间信息）\n     *\n     * @public\n     * @param appId\n     * @param gameServerNodeId\n     * @param para\n     * @returns\n     */\n    public static buildRoomInfo(appId: string, gameServerInfo: IGameServerInfo, para: ICreateRoomPara)\n        : IRoomInfoPack {\n        let roomId = para.roomId || buildGuid('Room_');\n\n        let fixedTeamList: ITeamInfo[] | null = null;\n        if (para.fixedTeamInfoList && para.fixedTeamInfoList.length) {\n            //指定的队伍信息列表\n            fixedTeamList = para.fixedTeamInfoList;\n        } else if (para.fixedTeamCount) {\n            //指定固定的队伍数量来生成\n            fixedTeamList = [];\n            for (let i = 0; i < para.fixedTeamCount; i++) {\n                let id = (i + 1).toString();\n                fixedTeamList.push({\n                    id: (i + 1).toString(),\n                    name: '队伍' + id,\n                    minPlayers: para.fixedTeamMinPlayers ?? 1,\n                    maxPlayers: para.fixedTeamMaxPlayers ?? para.maxPlayers,\n                });\n            }\n        }\n\n        let regInfo: IRoomRegInfo = {\n            appId: appId,\n            roomId: roomId,\n            roomName: para.roomName,\n            roomType: para.roomType,\n            maxPlayers: para.maxPlayers,\n            emptySeats: para.maxPlayers,\n            expireTime: 0,\n            ownerPlayerId: para.ownerPlayerId,\n            gameServerNodeId: gameServerInfo.serverNodeId,\n            createTime: Date.now(),\n            teamsPlayerIds: [],\n            isPrivate: para.isPrivate ? 1 : 0,\n        };\n        let roomInfo: IRoomInfo = {\n            roomId: roomId,\n            roomName: para.roomName,\n\n            roomType: para.roomType,\n            createType: ERoomCreateType.COMMON_CREATE,\n            maxPlayers: para.maxPlayers,\n            customProperties: para.customProperties,\n            ownerPlayerId: para.ownerPlayerId,\n            isPrivate: para.isPrivate,\n            matcherKey: para.matcherKey,\n\n            playerList: [],\n            teamList: fixedTeamList ?? [],\n            fixedTeamCount: fixedTeamList?.length,\n            freeTeamMinPlayers: para.freeTeamMinPlayers,\n            freeTeamMaxPlayers: para.freeTeamMaxPlayers,\n\n            frameRate: 30,\n            frameSyncState: EFrameSyncState.STOP,\n            createTime: Date.now(),\n            startGameTime: 0,\n            retainEmptyRoomTime: para.retainEmptyRoomTime,\n            retainOwnSeat: para.retainOwnSeat ?? false,\n\n            randomRequirePlayerSyncStateInvMs: para.randomRequirePlayerSyncStateInvMs,\n        }\n\n        if (para.isPrivate) {\n            // 私有房间, 先默认房间id可加入的模式\n            roomInfo.privateRoomJoinMode = EPrivateRoomJoinMode.roomIdJoin;\n            regInfo.privateRoomJoinMode = EPrivateRoomJoinMode.roomIdJoin;\n            if (para.privateRoomJoinMode === EPrivateRoomJoinMode.password && para.privateRoomPassword) {\n                // 有指定密码\n                roomInfo.privateRoomJoinMode = EPrivateRoomJoinMode.password;\n                regInfo.privateRoomJoinMode = EPrivateRoomJoinMode.password;\n                regInfo.privateRoomPassword = para.privateRoomPassword;\n            }\n        }\n\n        let roomOnlineInfo = GameServerHelper.buildRoomOnlineInfo(regInfo, gameServerInfo);\n\n        return {\n            regInfo,\n            roomInfo,\n            roomOnlineInfo,\n        };\n    }\n\n\n    /**\n     * 开始侦听全局的房间注册信息变更事件(跨服务器), 返回取消侦听的对象,需要自行保存!\n     *\n     * @deprecated 准备废弃！\n     * @public\n     * @param listen\n     * @returns\n     */\n    public static async startListenRoomRegInfoChanged(listen: (changedInfo: IRoomRegChanged) => void): Promise<ICancelable> {\n        let subscribeClient = await this.getRedisClient(false);\n        await subscribeClient.subscribeObject<IRoomRegChanged>(\"RoomRegInfoChanged\", listen);\n        return {\n            async cancel(): Promise<void> {\n                await subscribeClient.disconnect();\n            }\n        };\n    }\n\n\n    /**\n     * 根据房间情况，算出剩余空位数返回\n     * @param roomInfo \n     * @returns room empty seats \n     */\n    public static getRoomEmptySeats(roomInfo: IRoomInfo): number {\n        let v = roomInfo.maxPlayers - roomInfo.playerList.length;\n\n        if (roomInfo.ownerPlayerId && roomInfo.retainOwnSeat && !roomInfo.playerList.find(p => p.playerId === roomInfo.ownerPlayerId)\n        ) {\n            v--;\n        }\n\n        return v;\n    }\n\n}"]}