{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/test/unitTest/api/ApiUtils.ts"],"names":["setLogEnabled","enabled","enabledLog","createHallClient","hallServerUrl","c","client","logger","log","createGameClient","playerToken","serverUrl","roomWaitReconnectTime","gameClient","testEachBuild","maxPlayerCount","data","beforeEach","auth1Task","authPlayerToken","auth2Task","auth3Task","auth4Task","auth5Task","auth1","auth2","auth3","auth4","auth5","playerToken1","playerId1","playerId","playerToken2","playerId2","playerToken3","playerId3","playerToken4","playerId4","playerToken5","playerId5","afterEach","Promise","all","gameClient1","disconnect","gameClient2","gameClient3","gameClient4","gameClient5","openId","showName","authPlayerTokenByHallClient","hallClient","req1","appCryptoEncrypt","authTokenDay","ret1","callApi","ok","isSucc","err","message","res","appDismissRoom","roomId","buildErr","code","buildSucc","requestMatchOneSingle","maxPlayers","minPlayers","retM1","requestMatch","matchFromType","Player","matchFromInfo","playerIds","matcherKey","Single","matcherParams","resultsContinueRoomJoinUsMatch","succ","matchReqId","cancelMatch","queryMatch","authToGameServer","playerShowName","gameServerUrl","gameRet","authorize","onRecvRoomMsg","msg","onPlayerJoinRoom","playerInfo","roomInfo","onPlayerLeaveRoom","onDismissRoom","authToGameServerResult","transition","createAndEnterRoom","createRoomPara","teamId","roomName","ownerPlayerId","isPrivate","undefined","createRet","createRoom","roomOnlineInfo","joinRet","joinRoom","authToGameServerByRoomId","regRet","getRoomOnlineInfo","joinRoomResult","joinRoomUseGameServer","joinRoomUseGameServerResult","gameClientRet","assert","GameClient","HallClient","ApiCryptoHelper","EMatchFromType","MatcherKeys","Result"],"mappings":"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","sourcesContent":["\nimport '../../../src/env'\n\nimport { assert } from \"chai\";\nimport { GameClient } from \"../../../src/shared/gameClient/GameClient\";\nimport { HallClient } from \"../../../src/shared/hallClient/HallClient\";\nimport { ResAuthorize } from \"../../../src/shared/hallClient/protocols/PtlAuthorize\";\nimport { ApiCryptoHelper } from \"../../../src/shared/tsgfServer/apiCrypto/ApiCryptoHelper\";\nimport { EMatchFromType, ISingleMatcherParams, IMatchResult, MatcherKeys } from \"../../../src/shared/tsgf/match/Models\";\nimport { IResult, Result } from '../../../src/shared/tsgf/Result';\nimport { ICreateRoomPara, IRoomOnlineInfo } from '../../../src/shared/tsgf/room/IRoomInfo';\nimport { ResAppDismissRoom } from '../../../src/shared/hallClient/protocols/PtlAppDismissRoom';\n\nlet enabledLog = true;\nexport function setLogEnabled(enabled:boolean) {\n    enabledLog = enabled;\n}\nexport function createHallClient(hallServerUrl: string): HallClient {\n    let c = new HallClient(hallServerUrl, 90000000);\n    if (!enabledLog) {\n        c.client.logger!.log = () => { };\n    }\n    return c;\n}\nexport function createGameClient(playerToken: string, serverUrl: string, roomWaitReconnectTime?: number): GameClient {\n    let gameClient = new GameClient(serverUrl, playerToken, 90000000, roomWaitReconnectTime);\n    if (!enabledLog) {\n        gameClient.client.logger!.log = () => { };\n    }\n    return gameClient;\n}\n\nexport const hallClient = createHallClient('http://127.0.0.1:7100');\n\nexport type TestData = {\n    playerToken1: string,\n    playerId1: string,\n    playerToken2: string,\n    playerId2: string,\n    playerToken3: string,\n    playerId3: string,\n    playerToken4: string,\n    playerId4: string,\n    playerToken5: string,\n    playerId5: string,\n    gameClient1: GameClient,\n    gameClient2: GameClient,\n    gameClient3: GameClient,\n    gameClient4: GameClient,\n    gameClient5: GameClient,\n};\n\nexport function testEachBuild(maxPlayerCount: number): TestData {\n    //@ts-ignore\n    let data: TestData = {};\n\n    beforeEach(async () => {\n        let auth1Task = maxPlayerCount < 1 ? null : authPlayerToken(\"zum0001_ApiCreateRoomAndJoin_MaxPlayers2\", \"zum1\");\n        let auth2Task = maxPlayerCount < 2 ? null : authPlayerToken(\"zum0002_ApiCreateRoomAndJoin_MaxPlayers2\", \"zum2\");\n        let auth3Task = maxPlayerCount < 3 ? null : authPlayerToken(\"zum0003_ApiCreateRoomAndJoin_MaxPlayers2\", \"zum3\");\n        let auth4Task = maxPlayerCount < 4 ? null : authPlayerToken(\"zum0004_ApiCreateRoomAndJoin_MaxPlayers2\", \"zum4\");\n        let auth5Task = maxPlayerCount < 5 ? null : authPlayerToken(\"zum0005_ApiCreateRoomAndJoin_MaxPlayers2\", \"zum5\");\n        let auth1 = maxPlayerCount < 1 ? null : await auth1Task;\n        let auth2 = maxPlayerCount < 2 ? null : await auth2Task;\n        let auth3 = maxPlayerCount < 3 ? null : await auth3Task;\n        let auth4 = maxPlayerCount < 4 ? null : await auth4Task;\n        let auth5 = maxPlayerCount < 5 ? null : await auth5Task;\n\n        if (auth1) data.playerToken1 = auth1.playerToken;\n        if (auth1) data.playerId1 = auth1.playerId;\n        if (auth2) data.playerToken2 = auth2.playerToken;\n        if (auth2) data.playerId2 = auth2.playerId;\n        if (auth3) data.playerToken3 = auth3.playerToken;\n        if (auth3) data.playerId3 = auth3.playerId;\n        if (auth4) data.playerToken4 = auth4.playerToken;\n        if (auth4) data.playerId4 = auth4.playerId;\n        if (auth5) data.playerToken5 = auth5.playerToken;\n        if (auth5) data.playerId5 = auth5.playerId;\n    });\n\n    afterEach(async () => {\n        await Promise.all([\n            data.gameClient1?.disconnect(),\n            data.gameClient2?.disconnect(),\n            data.gameClient3?.disconnect(),\n            data.gameClient4?.disconnect(),\n            data.gameClient5?.disconnect(),\n        ]);\n    });\n    return data;\n}\n\n/**模拟服务端获取玩家的token*/\nexport async function authPlayerToken(openId: string, showName: string): Promise<ResAuthorize> {\n    return await authPlayerTokenByHallClient(hallClient, openId, showName);\n}\nexport async function authPlayerTokenByHallClient(hallClient:HallClient,openId: string, showName: string): Promise<ResAuthorize> {\n    let req1 = ApiCryptoHelper.appCryptoEncrypt(\"default\", \"FDGWPRET345-809RGKFER43SKGF\", {\n        openId: openId,\n        showName: showName,\n        authTokenDay: 1,\n    });\n    const ret1 = await hallClient.client.callApi(\"Authorize\", req1);\n    assert.ok(ret1.isSucc, ret1.err?.message);\n    assert.ok(ret1.res, 'res为空');\n    return ret1.res!;\n}\n/**模拟服务端调用大厅强制解散房间*/\nexport async function appDismissRoom(roomId: string): Promise<IResult<ResAppDismissRoom>> {\n    let req1 = ApiCryptoHelper.appCryptoEncrypt(\"default\", \"FDGWPRET345-809RGKFER43SKGF\", {\n        roomId,\n    });\n    const ret1 = await hallClient.client.callApi(\"AppDismissRoom\", req1);\n    if (!ret1.isSucc) return Result.buildErr(ret1.err?.message || '失败', (ret1.err.code as number) || 1);\n    return Result.buildSucc(ret1.res);\n}\n\nexport async function requestMatchOneSingle(playerToken: string, playerId: string,\n    maxPlayers: number = 8, minPlayers: number = 3): Promise<string> {\n    let retM1 = await hallClient.requestMatch(playerToken, {\n        matchFromType: EMatchFromType.Player,\n        matchFromInfo: {\n            playerIds: [playerId],\n        },\n        maxPlayers: maxPlayers,\n        matcherKey: MatcherKeys.Single,\n        matcherParams: {\n            minPlayers: minPlayers,\n            resultsContinueRoomJoinUsMatch: true,\n        } as ISingleMatcherParams,\n    });\n    assert.ok(retM1.succ, retM1.err);\n    let matchReqId = retM1.data!;\n    return matchReqId;\n}\nexport async function cancelMatch(playerToken: string, matchReqId: string): Promise<void> {\n    let retM1 = await hallClient.cancelMatch(playerToken, matchReqId);\n    assert.ok(retM1.succ, retM1.err);\n}\n\n/**查询匹配结果,要求自行延时,里面断言一定会获取到结果!*/\nexport async function queryMatch(playerToken: string, matchReqId: string): Promise<IMatchResult> {\n    let retM1 = await hallClient.queryMatch(playerToken, matchReqId);\n    assert.ok(!!retM1, \"结果应该要出了,但没出！\");\n    assert.ok(retM1?.succ === true, retM1?.err);\n    return retM1!.data!;\n}\n\nexport async function authToGameServer(playerShowName: string, playerToken: string, gameServerUrl: string, roomWaitReconnectTime?: number): Promise<GameClient> {\n    let gameClient1 = createGameClient(playerToken, gameServerUrl, roomWaitReconnectTime);\n    let gameRet = await gameClient1.authorize({ showName: playerShowName });\n    assert.ok(gameRet.succ, gameRet.err);\n    gameClient1.onRecvRoomMsg = (msg) => {\n        //console.log(`${playerShowName}: 收到【${msg.fromPlayerInfo.showName}】房间消息[${msg.recvType}]：${msg.msg}`);\n    };\n    gameClient1.onPlayerJoinRoom = (playerInfo, roomInfo) => {\n        //console.log(`${playerShowName}: 有玩家进入房间：${playerInfo.showName}`);\n    };\n    gameClient1.onPlayerLeaveRoom = (playerInfo, roomInfo) => {\n        //console.log(`${playerShowName}: 有玩家退出房间：${playerInfo.showName}`);\n    };\n    gameClient1.onDismissRoom = (roomInfo) => {\n        //console.log(`${playerShowName}: 房间被解散`);\n    };\n    return gameClient1;\n}\nexport async function authToGameServerResult(playerShowName: string, playerToken: string, gameServerUrl: string, roomWaitReconnectTime?: number): Promise<IResult<GameClient>> {\n    let gameClient1 = createGameClient(playerToken, gameServerUrl, roomWaitReconnectTime);\n    let gameRet = await gameClient1.authorize({ showName: playerShowName });\n    if (!gameRet.succ) return Result.transition(gameRet);\n    gameClient1.onRecvRoomMsg = (msg) => {\n        //console.log(`${playerShowName}: 收到【${msg.fromPlayerInfo.showName}】房间消息[${msg.recvType}]：${msg.msg}`);\n    };\n    gameClient1.onPlayerJoinRoom = (playerInfo, roomInfo) => {\n        //console.log(`${playerShowName}: 有玩家进入房间：${playerInfo.showName}`);\n    };\n    gameClient1.onPlayerLeaveRoom = (playerInfo, roomInfo) => {\n        //console.log(`${playerShowName}: 有玩家退出房间：${playerInfo.showName}`);\n    };\n    gameClient1.onDismissRoom = (roomInfo) => {\n        //console.log(`${playerShowName}: 房间被解散`);\n    };\n    return Result.buildSucc(gameClient1);\n}\n\nexport interface ICreateAndEnterResult {\n    gameClient: GameClient;\n    roomId: string;\n    gameServerUrl: string;\n    roomOnlineInfo: IRoomOnlineInfo;\n}\nexport async function createAndEnterRoom(playerToken: string, playerId: string, playerShowName: string, createRoomPara?: Partial<ICreateRoomPara>, teamId?: string, roomWaitReconnectTime?: number): Promise<IResult<ICreateAndEnterResult>> {\n    if (!createRoomPara) createRoomPara = {};\n    if (!createRoomPara.roomName) createRoomPara.roomName = '测试的房间';\n    if (!createRoomPara.maxPlayers) createRoomPara.maxPlayers = 4;\n    if (!createRoomPara.ownerPlayerId) createRoomPara.ownerPlayerId = playerId;\n    if (createRoomPara.isPrivate === undefined) createRoomPara.isPrivate = false;\n\n    let createRet = await hallClient.createRoom(playerToken, createRoomPara as ICreateRoomPara);\n    if (!createRet.succ) return Result.transition(createRet);\n    let roomOnlineInfo = createRet.data!;\n\n    //连接游戏服务器\n    let gameClient = await authToGameServer(playerShowName, playerToken, roomOnlineInfo.gameServerUrl!, roomWaitReconnectTime);\n    //加入自己创建的房间\n    let joinRet = await gameClient.joinRoom({ roomId: roomOnlineInfo.roomId, teamId });\n    if (!joinRet.succ) return Result.transition(joinRet);\n\n    return Result.buildSucc({\n        gameClient: gameClient,\n        roomId: roomOnlineInfo.roomId,\n        gameServerUrl: roomOnlineInfo.gameServerUrl!,\n        roomOnlineInfo,\n    });\n}\n\n/**根据房间ID认证进入游戏服务器,返回游戏客户端(并未加入房间)*/\nexport async function authToGameServerByRoomId(playerToken: string, roomId: string, playerShowName: string, roomWaitReconnectTime?: number): Promise<GameClient> {\n    let regRet = await hallClient.getRoomOnlineInfo(playerToken, roomId);\n    assert.ok(regRet.succ, regRet.err);\n    let gameClient = await authToGameServer(playerShowName, playerToken, regRet.data!.gameServerUrl!, roomWaitReconnectTime);\n    return gameClient;\n}\n/**直接加入房间,要求成功!*/\nexport async function joinRoom(playerToken: string, roomId: string, playerShowName: string, teamId?: string): Promise<GameClient> {\n    let gameClient = await authToGameServerByRoomId(playerToken, roomId, playerShowName);\n    let joinRet = await gameClient.joinRoom({ roomId, teamId });\n    assert.ok(joinRet.succ, joinRet.err);\n    return gameClient;\n}\n/**直接加入房间*/\nexport async function joinRoomResult(playerToken: string, roomId: string, playerShowName: string, teamId?: string): Promise<IResult<GameClient>> {\n    let gameClient = await authToGameServerByRoomId(playerToken, roomId, playerShowName);\n    let joinRet = await gameClient.joinRoom({ roomId, teamId });\n    if (!joinRet.succ) return Result.transition(joinRet);\n    return Result.buildSucc(gameClient);\n}\n/**根据指定的游戏服务器.连接并加入房间*/\nexport async function joinRoomUseGameServer(gameServerUrl: string, playerToken: string, roomId: string, playerShowName: string, roomWaitReconnectTime?: number): Promise<GameClient> {\n    let gameClient = await authToGameServer(playerShowName, playerToken, gameServerUrl, roomWaitReconnectTime);\n    let joinRet = await gameClient.joinRoom({ roomId });\n    assert.ok(joinRet.succ, joinRet.err);\n    return gameClient;\n}\n/**根据指定的游戏服务器.连接并加入房间*/\nexport async function joinRoomUseGameServerResult(gameServerUrl: string, playerToken: string, roomId: string, playerShowName: string, roomWaitReconnectTime?: number): Promise<IResult<GameClient>> {\n    let gameClientRet = await authToGameServerResult(playerShowName, playerToken, gameServerUrl, roomWaitReconnectTime);\n    if (!gameClientRet.succ) return Result.transition(gameClientRet);\n    let gameClient = gameClientRet.data!;\n    let joinRet = await gameClient.joinRoom({ roomId });\n    if (!joinRet.succ) return Result.transition(joinRet);\n    return Result.buildSucc(gameClient);\n}"]}