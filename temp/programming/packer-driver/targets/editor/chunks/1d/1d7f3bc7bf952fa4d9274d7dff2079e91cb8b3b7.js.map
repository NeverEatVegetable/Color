{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgf/Utils.ts"],"names":["hasProperty","object","key","delay","ms","delayCanCancel","waitResult","tHD","task","Promise","resolve","setTimeout","cancel","clearTimeout","arrWinner","arr","compareFn","filter","winner","item","call","arrRemoveItems","itemCanRemove","deleteCount","i","length","splice","arrGroup","grouper","groups","Map","list","get","set","push","arrItemArrMerge","itemArrGet","mergeProc","merge","itemArr","arrItemArrMergeConcat","m","curr","concat","arrSum","mapper","sum","arrCount","count","arrSkipAndLimit","skip","limit","start","undefined","end","slice","numbersAdd","out","a","b","index","arrUpdateItems","parseProcessArgv","args","configNamePrefix","setOption","arg","argStr","trim","startsWith","dIndex","indexOf","substring","val","replace","$0","$1","parseProcessEnv","env","argvName"],"mappings":";;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAWA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AA3PO,WAASA,WAAT,CAAqBC,MAArB,EAA2C;AAC9C,QAAI,CAACA,MAAL,EAAa,OAAO,KAAP;;AACb,SAAK,IAAIC,GAAT,IAAgBD,MAAhB,EAAwB;AACpB,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAUM,iBAAeE,KAAf,CAAqBC,EAArB,EAAgD;AACnD,UAAMC,cAAc,CAACD,EAAD,CAAd,CAAmBE,UAAnB,EAAN;AACH;;AAOM,WAASD,cAAT,CAAwBD,EAAxB,EAA0D;AAC7D,QAAIG,GAAQ,GAAG,CAAf;AACA,QAAIC,IAAI,GAAG,IAAIC,OAAJ,CAAkBC,OAAD,IAAa;AACrCH,MAAAA,GAAG,GAAGI,UAAU,CAACD,OAAD,EAAUN,EAAV,CAAhB;AACH,KAFU,CAAX;AAGA,WAAO;AACHE,MAAAA,UAAU,GAAG;AACT,eAAOE,IAAP;AACH,OAHE;;AAIHI,MAAAA,MAAM,GAAG;AACLC,QAAAA,YAAY,CAACN,GAAD,CAAZ;AACA,eAAOE,OAAO,CAACC,OAAR,EAAP;AACH;;AAPE,KAAP;AASH;;AAaM,WAASI,SAAT,CAAsBC,GAAt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","sourcesContent":["import { ICancelableExec } from \"./ICancelable\";\n\n\n/**\n * 对象里是否有属性,通常用于判断将object当作键值对来使用的场景\n *\n * @param object\n * @returns\n */\nexport function hasProperty(object: any): boolean {\n    if (!object) return false;\n    for (let key in object) {\n        return true;\n    }\n    return false;\n}\n\n\n\n/**\n * 异步延时\n *\n * @param ms\n * @returns\n */\nexport async function delay(ms: number): Promise<void> {\n    await delayCanCancel(ms).waitResult();\n}\n/**\n * 可取消的异步延时\n *\n * @param ms\n * @returns\n */\nexport function delayCanCancel(ms: number): ICancelableExec<any> {\n    let tHD: any = 0;\n    let task = new Promise<any>((resolve) => {\n        tHD = setTimeout(resolve, ms)\n    });\n    return {\n        waitResult() {\n            return task;\n        },\n        cancel() {\n            clearTimeout(tHD);\n            return Promise.resolve();\n        },\n    };\n}\n\n\n\n/**\n * 提取数组中最符合条件的元素 O(n)\n *\n * @typeParam T\n * @param arr\n * @param compareFn 数组中每个元素对比，返回最符合条件的元素\n * @param filter 先筛选,通过筛选的元素再进行提取最符合的\n * @returns\n */\nexport function arrWinner<T>(arr: Iterable<T>, compareFn: (winner: T, next: T) => T, filter?: (item: T) => boolean): T | null {\n    let winner: T | null = null;\n    for (let item of arr) {\n        if (filter?.call(null, item) === false) continue;\n        if (!winner) {\n            winner = item;\n            continue;\n        }\n        winner = compareFn(winner, item);\n    }\n    return winner;\n}\n\n\n/**\n * 原数组直接删除符合条件的元素，返回删除的数量\n *\n * @typeParam T\n * @param arr\n * @param itemCanRemove\n * @returns\n */\nexport function arrRemoveItems<T>(arr: Array<T>, itemCanRemove: (item: T) => boolean): number {\n    let deleteCount = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (itemCanRemove(arr[i])) {\n            arr.splice(i, 1);\n            i--;\n            deleteCount++;\n            continue;\n        }\n    }\n    return deleteCount;\n}\n\n\n/**\n * 分组\n *\n * @typeParam Item\n * @param arr\n * @param grouper\n * @returns\n */\nexport function arrGroup<Item, GroupBy>(arr: Item[], grouper: (v: Item) => GroupBy): Map<GroupBy, Item[]> {\n    let groups: Map<GroupBy, Item[]> = new Map<GroupBy, Item[]>();\n\n    for (let item of arr) {\n        let key = grouper(item);\n        let list = groups.get(key);\n        if (!list) {\n            list = [];\n            groups.set(key, list);\n        }\n        list.push(item);\n    }\n\n    return groups;\n\n}\n\n/**\n *合并数组中对象元素中的数组!\n *\n * @typeParam ArrItem\n * @typeParam ItemArrItem\n * @param arr\n * @param itemArrGet 获取元素中的数组\n * @param mergeProc 合并操作(返回false表示不继续),merge为最终合并的数组, 需要自行往里面操作(连接或者去重等)\n * @returns\n */\nexport function arrItemArrMerge<ArrItem, ItemArrItem>(arr: ArrItem[],\n    itemArrGet: (item: ArrItem) => ItemArrItem[],\n    mergeProc: (merge: ItemArrItem[], currItem: ItemArrItem[]) => void | false\n): ItemArrItem[] {\n    let merge: ItemArrItem[] = [];\n    for (let item of arr) {\n        let itemArr = itemArrGet(item);\n        if (mergeProc(merge, itemArr) === false) return merge;\n    }\n    return merge;\n}\n/**\n * 连接数组中对象元素中的数组!\n *\n * @typeParam ArrItem\n * @typeParam ItemArrItem\n * @param arr\n * @param itemArrGet 获取元素中的数组\n * @returns\n */\nexport function arrItemArrMergeConcat<ArrItem, ItemArrItem>(arr: ArrItem[],\n    itemArrGet: (item: ArrItem) => ItemArrItem[],\n): ItemArrItem[] {\n    return arrItemArrMerge(arr, itemArrGet, (m, curr) => {\n        m = m.concat(...curr);\n    })\n}\n\n\n/**\n * 数组元素值累加\n *\n * @typeParam Item\n * @param arr\n * @param mapper\n * @returns\n */\nexport function arrSum<Item>(arr: Item[], mapper: (item: Item) => number): number {\n    let sum = 0;\n    for (let item of arr) {\n        sum += mapper(item);\n    }\n    return sum;\n}\n/**\n * 数组元素满足条件的数量\n *\n * @typeParam Item\n * @param arr\n * @param filter\n * @returns\n */\nexport function arrCount<Item>(arr: Item[], filter: (item: Item) => boolean): number {\n    let count = 0;\n    for (let item of arr) {\n        if (filter(item)) count++;\n    }\n    return count;\n}\n\n/**\n * 应用skip+limit到数组实现\n * @template T \n * @param arr \n * @param [skip] \n * @param [limit] \n * @returns skip limit to slice \n */\nexport function arrSkipAndLimit<T>(arr: T[], skip?: number, limit?: number): T[] {\n    let start = skip !== undefined ? skip : 0;\n    // 如果跳过数量剩下没了，直接返回空数组\n    if (start >= arr.length) return [];\n    let end = limit !== undefined ? start + limit : arr.length;\n    if (end > arr.length) end = arr.length;\n    return arr.slice(start, end);\n}\n\n/**\n *将两个一样长度的数值数组相加,输出到另外一个一样长度的数值数组\n *\n * @param out\n * @param a\n * @param b\n */\nexport function numbersAdd(out: number[], a: number[], b: number[]) {\n    for (let index = 0; index < a.length; index++) {\n        out[index] = a[index] + b[index];\n    }\n}\n/**\n * 给数组的每个元素更新值\n *\n * @param out\n * @param set\n */\nexport function arrUpdateItems<Item>(out: Item[], set: (oldVal: Item, index: number) => Item) {\n    for (let index = 0; index < out.length; index++) {\n        out[index] = set(out[index], index);\n    }\n}\n\n\n/**\n * 解析进程入口参数为一个对象, 格式为 -配置名1=配置值1 -配置名2=\"带有空格 的配置值\", 转为 \\{ 配置名1:\"配置值1\",配置名2:\"带有空格 的配置值\" \\}\n *\n * @param args 进程传入参数列表\n * @param configNamePrefix\n */\nexport function parseProcessArgv(args: string[], configNamePrefix: string = '-'): { [configName: string]: string } {\n    let setOption: { [configName: string]: string } = {};\n    for (let arg of args) {\n        let argStr = arg.trim();\n        if (argStr.startsWith(configNamePrefix)) {\n            let dIndex = argStr.indexOf('=');\n            let key = dIndex > -1 ? argStr.substring(1, dIndex) : argStr.substring(1);\n            let val = dIndex > -1 ? argStr.substring(dIndex + 1) : '';\n            //支持值头尾有双引号\n            val = val.replace(/^\"?(.*?)\"?$/ig, ($0, $1) => $1);\n            setOption[key] = val;\n        }\n    }\n    return setOption;\n}\n\n/**\n * 提取 process.argv 中 \"ARGV_\" 开头的值 转为配置对象\n *\n * @param env 配置名列表\n */\nexport function parseProcessEnv(env: any): { [configName: string]: string } {\n    let setOption: { [configName: string]: string } = {};\n    for (let key in env) {\n        if (key.startsWith('ARGV_')) {\n            let argvName = key.substring('ARGV_'.length);\n            setOption[argvName] = env[key];\n        }\n    }\n    return setOption;\n}\n\n\n"]}