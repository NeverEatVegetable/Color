{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServerEDB/apiCrypto/AppCrypto.ts"],"names":["AppCrypto","ApiCryptoHelper","ErrorCodes","Result","SimpleAppHelper","decryptionReq","req","appEnReq","appId","buildErr","ParamsError","appRet","selectSingleByAppId","waitResult","succ","err","code","data","ret","appCryptoDecryption","appSecret","buildSucc"],"mappings":";;;oFAOaA,S;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPJC,MAAAA,e,iBAAAA,e;;AAEAC,MAAAA,U,iBAAAA,U;AAAqBC,MAAAA,M,iBAAAA,M;;AACbC,MAAAA,e,iBAAAA,e;;;;;;;2BAIJJ,S,GAAN,MAAMA,SAAN,CAAsC;AAEzC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC8B,cAAbK,aAAa,CAAoCC,GAApC,EACA;AACtB,cAAIC,QAAQ,GAAGD,GAAf;;AACA,cAAI,CAACC,QAAQ,CAACC,KAAd,EAAqB;AACjB,mBAAO;AAAA;AAAA,kCAAOC,QAAP,CAAgB,YAAhB,EAA8B;AAAA;AAAA,0CAAWC,WAAzC,CAAP;AACH,WAJqB,CAKtB;;;AACA,cAAIC,MAAM,GAAG,MAAM;AAAA;AAAA,kDAAgBC,mBAAhB,CAAoCL,QAAQ,CAACC,KAA7C,EAAoDK,UAApD,EAAnB;;AACA,cAAI,CAACF,MAAM,CAACG,IAAZ,EAAkB;AACd,mBAAO;AAAA;AAAA,kCAAOL,QAAP,CAAgBE,MAAM,CAACI,GAAvB,EAA4BJ,MAAM,CAACK,IAAnC,CAAP;AACH;;AACD,cAAI,CAACL,MAAM,CAACM,IAAZ,EAAkB;AACd,mBAAO;AAAA;AAAA,kCAAOR,QAAP,CAAgB,aAAhB,EAA+B;AAAA;AAAA,0CAAWC,WAA1C,CAAP;AACH;;AAED,cAAIQ,GAAG,GAAG;AAAA;AAAA,kDAAgBC,mBAAhB,CAAoCR,MAAM,CAACM,IAAP,CAAYG,SAAhD,EAA2Db,QAA3D,CAAV;;AACA,cAAG,CAACW,GAAG,CAACJ,IAAR,EAAa;AACT,mBAAO;AAAA;AAAA,kCAAOL,QAAP,CAAgBS,GAAG,CAACH,GAApB,EAAyBG,GAAG,CAACF,IAA7B,CAAP;AACH;;AAED,iBAAO;AAAA;AAAA,gCAAOK,SAAP,CAAiBH,GAAG,CAACD,IAAJ,CAASA,IAA1B,CAAP;AACH;;AAhCwC,O","sourcesContent":["import { ApiCryptoHelper } from \"../../tsgfServer/apiCrypto/ApiCryptoHelper\";\nimport { IAppEncryptRequest, IBaseEncryptRequest, IBaseEncryptRequestData } from \"../../tsgf/apiCrypto/Models\";\nimport { ErrorCodes, IResult, Result } from \"../../tsgf/Result\";\nimport { AppBLL, SimpleAppHelper } from \"../BLL\";\nimport { IApiCrypto } from \"./IApiCrypto\";\n\n\nexport class AppCrypto implements IApiCrypto {\n\n    /**\n     * 解密应用加密请求为原始请求对象, 成功则赋值给appReq.req\n     *\n     * @public\n     * @typeParam T\n     * @param appReq\n     * @param appSecret\n     * @returns\n     */\n    public async decryptionReq<T extends IBaseEncryptRequestData>(req: IBaseEncryptRequest)\n        : Promise<IResult<T>> {\n        let appEnReq = req as IAppEncryptRequest;\n        if (!appEnReq.appId) {\n            return Result.buildErr(\"需要 appId !\", ErrorCodes.ParamsError);\n        }\n        //let appRet = await AppBLL.Ins.selectSingle({ appId: appEnReq.appId }).waitResult();\n        let appRet = await SimpleAppHelper.selectSingleByAppId(appEnReq.appId).waitResult();\n        if (!appRet.succ) {\n            return Result.buildErr(appRet.err, appRet.code);\n        }\n        if (!appRet.data) {\n            return Result.buildErr(\"错误的 appId !\", ErrorCodes.ParamsError);\n        }\n\n        let ret = ApiCryptoHelper.appCryptoDecryption(appRet.data.appSecret, appEnReq);\n        if(!ret.succ){\n            return Result.buildErr(ret.err, ret.code);\n        }\n\n        return Result.buildSucc(ret.data.data as T);\n    }\n}"]}