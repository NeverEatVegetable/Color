{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/serverConfigMgr.ts"],"names":["startWatchServerConfig","getAndInitConfig","cfg","getServerConfig","redisConfig","log","error","buildErr","buildSucc","ret","serverConfigPath","getConfig","succ","transition","data","memServerConfig","err","setMemServerConfig","getServerRedisClient","reuseClient","path","getConfigAuto","startWatchConfig","getRedisClient","initRedisClient","logger","parseProcessArgv","parseProcessEnv","Result","processArgs","process","argv","splice","processEnv","env","tsgfConfigFile","resolve","__dirname"],"mappings":";;;;;AAqBA;AACO,iBAAeA,sBAAf,GAAyE;AAC5E,QAAIC,gBAAuD,GAAG,YAAY;AACtE,UAAIC,GAAG,GAAG,MAAMC,eAAe,EAA/B;;AACA,UAAID,GAAG,CAACE,WAAR,EAAqB;AACjB;AAAA;AAAA,8BAAOC,GAAP,CAAY,YAAZ;AACA;AAAA;AAAA,gDAAgBH,GAAG,CAACE,WAApB;AACH,OAHD,MAGO;AACH;AAAA;AAAA,8BAAOE,KAAP,CAAc,iBAAd;AACA,eAAO;AAAA;AAAA,8BAAOC,QAAP,CAAgB,iBAAhB,CAAP;AACH;;AACD,aAAO;AAAA;AAAA,4BAAOC,SAAP,CAAiBN,GAAjB,CAAP;AACH,KAVD;;AAWA,QAAIO,GAAG,GAAG,MAAM;AAAA;AAAA,8CAAiBC,gBAAjB,EAAmC,MAAM;AACrD,UAAI,CAACC,SAAL,EAAgB;AAChB;AAAA;AAAA,4BAAON,GAAP,CAAY,mBAAkBK,gBAAiB,GAA/C;AACAT,MAAAA,gBAAgB;AACnB,KAJe,CAAhB;;AAKA,QAAI,CAACQ,GAAG,CAACG,IAAT,EAAe;AACX,aAAO;AAAA;AAAA,4BAAOC,UAAP,CAAkBJ,GAAlB,CAAP;AACH;;AACD,QAAIE,SAAS,GAAGF,GAAG,CAACK,IAApB;AACA,WAAO,MAAMb,gBAAgB,EAA7B;AACH;AAED;;;AACO,iBAAeE,eAAf,GAAyD;AAC5D;AACA,QAAIY,eAAJ,EAAqB,OAAOA,eAAP,CAFuC,CAI5D;;AACA,QAAIN,GAAG,GAAG,MAAM;AAAA;AAAA,wCAAcC,gBAAd,CAAhB;;AACA,QAAI,CAACD,GAAG,CAACG,IAAT,EAAe;AACX;AAAA;AAAA,4BAAON,KAAP,CAAaG,GAAG,CAACO,GAAjB;AACA,aAAO,EAAP;AACH;;AACD,WAAOP,GAAG,CAACK,IAAX;AACH;AACD;AACA;AACA;AACA;;;AACO,WAASG,kBAAT,CAA4Bf,GAA5B,EAA6D;AAChEa,IAAAA,eAAe,GAAGb,GAAlB;AACH;AACD;;;AACO,iBAAegB,oBAAf,CAAoCC,WAAoB,GAAG,IAA3D,EAAwF;AAC3F,WAAO,MAAM;AAAA;AAAA,0CAAeA,WAAf,CAAb;AACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA/CqBnB,sB;qBAyBAG,e;wBAgBNc,kB;0BAIMC;;;;;;;;;AAnEfE,MAAAA,I;;AACEC,MAAAA,a,iBAAAA,a;AAAeC,MAAAA,gB,iBAAAA,gB;;AACfC,MAAAA,c,iBAAAA,c;AAAgBC,MAAAA,e,iBAAAA,e;;AAChBC,MAAAA,M,iBAAAA,M;;AACAC,MAAAA,gB,iBAAAA,gB;AAAkBC,MAAAA,e,iBAAAA,e;;AACTC,MAAAA,M,iBAAAA,M;;;;;;;AAIdC,MAAAA,W,GAAc;AAAA;AAAA,gDAAiBC,OAAO,CAACC,IAAR,CAAaC,MAAb,CAAoB,CAApB,CAAjB,C;AACdC,MAAAA,U,GAAa;AAAA;AAAA,8CAAgBH,OAAO,CAACI,GAAxB,C,EACjB;;AACIC,MAAAA,c,oCAAiBN,WAAW,CAAC,gBAAD,C,oCAAsBI,UAAU,CAAC,gBAAD,C,mBAAsB,4B;AAGlFvB,MAAAA,gB,GAAmB;AAAA;AAAA,wBAAK0B,OAAL,CAAaC,SAAb,EAAwBF,cAAxB,C;AACvB;;AACIpB,MAAAA,e,GAAwC,I;AAE5C;AAAA;AAAA,4BAAOV,GAAP,CAAW,mBAAX,EAA+BK,gBAA/B","sourcesContent":["import path from \"path\";\nimport { getConfigAuto, startWatchConfig } from \"./shared/tsgfServer/gfConfigMgr\";\nimport { getRedisClient, initRedisClient, IRedisClient } from \"./shared/tsgfServer/redisHelper\";\nimport { logger } from \"./shared/tsgf/logger\";\nimport { parseProcessArgv, parseProcessEnv } from \"./shared/tsgf/Utils\";\nimport { IResult, Result } from \"./shared/tsgf/Result\";\nimport { IServerConfig } from \"./ServerConfig\";\n\n\nlet processArgs = parseProcessArgv(process.argv.splice(2));\nlet processEnv = parseProcessEnv(process.env);\n// 命令行参数 > 环境变量 > 默认值\nlet tsgfConfigFile = processArgs['tsgfConfigFile'] ?? processEnv['tsgfConfigFile'] ?? '../tsgf.server.config.json';\n\n\nlet serverConfigPath = path.resolve(__dirname, tsgfConfigFile);\n/**使用内存指定的配置*/\nlet memServerConfig: IServerConfig | null = null;\n\nlogger.log('serverConfigPath:',serverConfigPath);\n\n/**开始监控gf.clusterServer.config.json配置, 并返回获取到的配置对象 */\nexport async function startWatchServerConfig(): Promise<IResult<IServerConfig>> {\n    let getAndInitConfig: () => Promise<IResult<IServerConfig>> = async () => {\n        let cfg = await getServerConfig();\n        if (cfg.redisConfig) {\n            logger.log(`初始化redis配置`);\n            initRedisClient(cfg.redisConfig);\n        } else {\n            logger.error(`redisConfig未配置!`);\n            return Result.buildErr(\"redisConfig未配置!\");\n        }\n        return Result.buildSucc(cfg);\n    };\n    let ret = await startWatchConfig(serverConfigPath, () => {\n        if (!getConfig) return;\n        logger.log(`配置文件更新,重新加载中...[${serverConfigPath}]`);\n        getAndInitConfig();\n    });\n    if (!ret.succ) {\n        return Result.transition(ret);\n    }\n    let getConfig = ret.data;\n    return await getAndInitConfig();\n}\n\n/**获取gf.clusterServer.config.json配置，配置文件有变化会自动读取最新的*/\nexport async function getServerConfig(): Promise<IServerConfig> {\n    //如果有指定内存配置，则直接返回\n    if (memServerConfig) return memServerConfig;\n\n    //尝试加载文件配置\n    let ret = await getConfigAuto(serverConfigPath);\n    if (!ret.succ) {\n        logger.error(ret.err);\n        return {} as any;\n    }\n    return ret.data as IServerConfig;\n}\n/**\n * 指定使用内存配置\n * @param cfg null表示清除内存配置，获取配置时会使用文件配置\n */\nexport function setMemServerConfig(cfg: IServerConfig | null): void {\n    memServerConfig = cfg;\n}\n/**获取gf.clusterServer.config.json配置中的redis客户端实例，配置文件有变化会自动使用最新的*/\nexport async function getServerRedisClient(reuseClient: boolean = true): Promise<IRedisClient> {\n    return await getRedisClient(reuseClient);\n}\n"]}