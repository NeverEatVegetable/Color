{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/test/unitTest/api/ApiPlayerMatchBaseMelee.test.ts"],"names":["delay","assert","cancelMatch","createAndEnterRoom","hallClient","joinRoom","joinRoomUseGameServer","queryMatch","requestMatchOneSingle","testEachBuild","ERoomMsgRecvType","EMatchFromType","MatcherKeys","ErrorCodes","describe","testData","test","matchReqId1","playerToken1","playerId1","matchReqId2","playerToken2","playerId2","matchRet1","matchRet2","console","log","roomId","gameClient1","gameServerUrl","gameClient2","matchReqId3","playerToken3","playerId3","matchRet3","gameClient3","matchReqId4","playerToken4","playerId4","matchRet4","gameClient4","matchReqId5","playerToken5","playerId5","retM5","ok","JSON","stringify","leaveRoom","matchRet5","gameClient5","sendRoomMsg","recvType","ROOM_OTHERS","msg","retM1","succ","code","MatchRequestCancelled","retM2","retM3","err","data","gameClient1Ret","maxPlayers","gameClient","roomId1","gameClient3Ret","roomId2","msgCount","onRoomAllPlayersMatchStart","matchReqId","reqPlayerId","matchParams","reqRet","requestMatch","matchFromType","RoomAllPlayers","matchFromInfo","matcherKey","Single","matcherParams","minPlayers","onRoomAllPlayersMatchResult","errMsg","errCode","matchResult","cancelRet","p1Result","p2Result","p3Result","p4Result","disconnect","onRecvRoomMsg","sendRet","ROOM_ALL"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACSA,MAAAA,K,iBAAAA,K;;AACAC,MAAAA,M,SAAAA,M;;AACAC,MAAAA,W,iBAAAA,W;AAAaC,MAAAA,kB,iBAAAA,kB;AAAoBC,MAAAA,U,iBAAAA,U;AAAYC,MAAAA,Q,iBAAAA,Q;AAAUC,MAAAA,qB,iBAAAA,qB;AAAuBC,MAAAA,U,iBAAAA,U;AAAYC,MAAAA,qB,iBAAAA,qB;AAAuBC,MAAAA,a,iBAAAA,a;;AACjHC,MAAAA,gB,iBAAAA,gB;;AACAC,MAAAA,c,iBAAAA,c;AAAoEC,MAAAA,W,iBAAAA,W;;AACpEC,MAAAA,U,iBAAAA,U;;;;;;;AAETC,MAAAA,QAAQ,CAAC,MAAD,EAAS,MAAM;AAEnB,YAAIC,QAAQ,GAAG;AAAA;AAAA,4CAAc,CAAd,CAAf;AAGAC,QAAAA,IAAI,CAAC,wDAAD,EAA2D,kBAAkB;AAC7E;AACA,cAAIC,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBF,QAAQ,CAACG,YAA/B,EAA6CH,QAAQ,CAACI,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB;AACA,cAAIC,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBL,QAAQ,CAACM,YAA/B,EAA6CN,QAAQ,CAACO,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB;AACA,gBAAM;AAAA;AAAA,8BAAM,IAAN,CAAN;AACA,cAAIC,SAAS,GAAG,MAAM;AAAA;AAAA,wCAAWR,QAAQ,CAACG,YAApB,EAAkCD,WAAlC,CAAtB;AACA,cAAIO,SAAS,GAAG,MAAM;AAAA;AAAA,wCAAWT,QAAQ,CAACM,YAApB,EAAkCD,WAAlC,CAAtB;AAEAK,UAAAA,OAAO,CAACC,GAAR,CAAY,kDAAZ,EAAgEH,SAAS,CAACI,MAA1E;AAEAZ,UAAAA,QAAQ,CAACa,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBL,SAAS,CAACM,aAAhC,EAAgDd,QAAQ,CAACG,YAAzD,EAAuEK,SAAS,CAACI,MAAjF,EAAyF,MAAzF,CAA7B;AACAZ,UAAAA,QAAQ,CAACe,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBN,SAAS,CAACK,aAAhC,EAAgDd,QAAQ,CAACM,YAAzD,EAAuEG,SAAS,CAACG,MAAjF,EAAyF,MAAzF,CAA7B;AAEA,cAAII,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBhB,QAAQ,CAACiB,YAA/B,EAA6CjB,QAAQ,CAACkB,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB;AACA,gBAAM;AAAA;AAAA,8BAAM,IAAN,CAAN;AACA,cAAIC,SAAS,GAAG,MAAM;AAAA;AAAA,wCAAWnB,QAAQ,CAACiB,YAApB,EAAkCD,WAAlC,CAAtB;AACAhB,UAAAA,QAAQ,CAACoB,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBD,SAAS,CAACL,aAAhC,EAAgDd,QAAQ,CAACiB,YAAzD,EAAuEE,SAAS,CAACP,MAAjF,EAAyF,MAAzF,CAA7B;AAEA,cAAIS,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBrB,QAAQ,CAACsB,YAA/B,EAA6CtB,QAAQ,CAACuB,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB;AACA,gBAAM;AAAA;AAAA,8BAAM,IAAN,CAAN;AACA,cAAIC,SAAS,GAAG,MAAM;AAAA;AAAA,wCAAWxB,QAAQ,CAACsB,YAApB,EAAkCD,WAAlC,CAAtB;AACArB,UAAAA,QAAQ,CAACyB,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBD,SAAS,CAACV,aAAhC,EAAgDd,QAAQ,CAACsB,YAAzD,EAAuEE,SAAS,CAACZ,MAAjF,EAAyF,MAAzF,CAA7B;AAEA,cAAIc,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsB1B,QAAQ,CAAC2B,YAA/B,EAA6C3B,QAAQ,CAAC4B,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB;AACA,gBAAM;AAAA;AAAA,8BAAM,IAAN,CAAN;AACA,cAAIC,KAAK,GAAG,MAAM;AAAA;AAAA,wCAAWrC,UAAX,CAAsBQ,QAAQ,CAAC2B,YAA/B,EAA6CD,WAA7C,CAAlB;AACA;AAAA;AAAA,gCAAOI,EAAP,CAAUD,KAAK,KAAK,IAApB,EAA0B,gBAAgBE,IAAI,CAACC,SAAL,CAAeH,KAAf,CAA1C,EA1B6E,CA2B7E;;AACA,gBAAM;AAAA;AAAA,0CAAY7B,QAAQ,CAAC2B,YAArB,EAAmCD,WAAnC,CAAN,CA5B6E,CA8B7E;;AACA,gBAAM1B,QAAQ,CAACyB,WAAT,CAAqBQ,SAArB,EAAN,CA/B6E,CAiC7E;;AACAP,UAAAA,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsB1B,QAAQ,CAAC2B,YAA/B,EAA6C3B,QAAQ,CAAC4B,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAApB;AACA,gBAAM;AAAA;AAAA,8BAAM,IAAN,CAAN;AACA,cAAIM,SAAS,GAAG,MAAM;AAAA;AAAA,wCAAWlC,QAAQ,CAAC2B,YAApB,EAAkCD,WAAlC,CAAtB;AACA1B,UAAAA,QAAQ,CAACmC,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBD,SAAS,CAACpB,aAAhC,EAAgDd,QAAQ,CAAC2B,YAAzD,EAAuEO,SAAS,CAACtB,MAAjF,EAAyF,MAAzF,CAA7B;AAGH,SAxCG,CAAJ;AAyCAX,QAAAA,IAAI,CAAC,eAAD,EAAkB,kBAAkB;AAEpC;AACA,cAAIC,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBF,QAAQ,CAACG,YAA/B,EAA6CH,QAAQ,CAACI,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB;AACA,cAAIC,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBL,QAAQ,CAACM,YAA/B,EAA6CN,QAAQ,CAACO,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB;AACA,cAAIS,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBhB,QAAQ,CAACiB,YAA/B,EAA6CjB,QAAQ,CAACkB,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB,CALoC,CAOpC;;AACA,gBAAM;AAAA;AAAA,8BAAM,IAAN,CAAN;AAEA,cAAIV,SAAS,GAAG,MAAM;AAAA;AAAA,wCAAWR,QAAQ,CAACG,YAApB,EAAkCD,WAAlC,CAAtB;AACA,cAAIO,SAAS,GAAG,MAAM;AAAA;AAAA,wCAAWT,QAAQ,CAACM,YAApB,EAAkCD,WAAlC,CAAtB;AACA,cAAIc,SAAS,GAAG,MAAM;AAAA;AAAA,wCAAWnB,QAAQ,CAACiB,YAApB,EAAkCD,WAAlC,CAAtB;AAEAN,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,SAAzB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,SAAzB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBQ,SAAzB;AACAT,UAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDH,SAAS,CAACI,MAA3D;AAEAZ,UAAAA,QAAQ,CAACa,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBL,SAAS,CAACM,aAAhC,EAAgDd,QAAQ,CAACG,YAAzD,EAAuEK,SAAS,CAACI,MAAjF,EAAyF,MAAzF,CAA7B;AACAZ,UAAAA,QAAQ,CAACe,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBN,SAAS,CAACK,aAAhC,EAAgDd,QAAQ,CAACM,YAAzD,EAAuEG,SAAS,CAACG,MAAjF,EAAyF,MAAzF,CAA7B;AACAZ,UAAAA,QAAQ,CAACoB,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBD,SAAS,CAACL,aAAhC,EAAgDd,QAAQ,CAACiB,YAAzD,EAAuEE,SAAS,CAACP,MAAjF,EAAyF,MAAzF,CAA7B;AAEA,gBAAMZ,QAAQ,CAACoB,WAAT,CAAqBgB,WAArB,CAAiC;AACnCC,YAAAA,QAAQ,EAAE;AAAA;AAAA,sDAAiBC,WADQ;AAEnCC,YAAAA,GAAG,EAAE;AAF8B,WAAjC,CAAN;AAKH,SA5BG,CAAJ;AA6BAtC,QAAAA,IAAI,CAAC,MAAD,EAAS,kBAAkB;AAAA;;AAE3B,cAAIC,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBF,QAAQ,CAACG,YAA/B,EAA6CH,QAAQ,CAACI,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB;AACA,cAAIC,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBL,QAAQ,CAACM,YAA/B,EAA6CN,QAAQ,CAACO,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB;AAEA,cAAIiC,KAAK,GAAG,MAAM;AAAA;AAAA,wCAAWhD,UAAX,CAAsBQ,QAAQ,CAACG,YAA/B,EAA6CD,WAA7C,CAAlB;AACA;AAAA;AAAA,gCAAO4B,EAAP,CAAUU,KAAK,KAAK,IAApB,EAA0B,cAAcT,IAAI,CAACC,SAAL,CAAeQ,KAAf,CAAxC,EAN2B,CAQ3B;;AACA,gBAAM;AAAA;AAAA,0CAAYxC,QAAQ,CAACG,YAArB,EAAmCD,WAAnC,CAAN;AACA,cAAIc,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBhB,QAAQ,CAACiB,YAA/B,EAA6CjB,QAAQ,CAACkB,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAAxB,CAV2B,CAY3B;;AACA,gBAAM;AAAA;AAAA,8BAAM,GAAN,CAAN;AAEAsB,UAAAA,KAAK,GAAG,MAAM;AAAA;AAAA,wCAAWhD,UAAX,CAAsBQ,QAAQ,CAACG,YAA/B,EAA6CD,WAA7C,CAAd;AACA;AAAA;AAAA,gCAAO4B,EAAP,CAAU,UAAAU,KAAK,SAAL,kBAAOC,IAAP,MAAgB,KAAhB,IAAyBD,KAAK,CAACE,IAAN,KAAe;AAAA;AAAA,wCAAWC,qBAA7D,EACI,kBAAkBZ,IAAI,CAACC,SAAL,CAAeQ,KAAf,CADtB,EAhB2B,CAmB3B;;AACA,gBAAM;AAAA;AAAA,8BAAM,GAAN,CAAN,CApB2B,CAsB3B;;AACAA,UAAAA,KAAK,GAAG,MAAM;AAAA;AAAA,wCAAWhD,UAAX,CAAsBQ,QAAQ,CAACG,YAA/B,EAA6CD,WAA7C,CAAd;AACA,cAAI0C,KAAK,GAAG,MAAM;AAAA;AAAA,wCAAWpD,UAAX,CAAsBQ,QAAQ,CAACM,YAA/B,EAA6CD,WAA7C,CAAlB;AACA,cAAIwC,KAAK,GAAG,MAAM;AAAA;AAAA,wCAAWrD,UAAX,CAAsBQ,QAAQ,CAACiB,YAA/B,EAA6CD,WAA7C,CAAlB;AACA;AAAA;AAAA,gCAAOc,EAAP,CAAUU,KAAK,KAAK,IAApB,EAA0B,cAAcT,IAAI,CAACC,SAAL,CAAeQ,KAAf,CAAxC;AACA;AAAA;AAAA,gCAAOV,EAAP,CAAUc,KAAK,KAAK,IAApB,EAA0B,cAAcb,IAAI,CAACC,SAAL,CAAeY,KAAf,CAAxC;AACA;AAAA;AAAA,gCAAOd,EAAP,CAAUe,KAAK,KAAK,IAApB,EAA0B,cAAcd,IAAI,CAACC,SAAL,CAAea,KAAf,CAAxC,EA5B2B,CA8B3B;;AACA3C,UAAAA,WAAW,GAAG,MAAM;AAAA;AAAA,8DAAsBF,QAAQ,CAACG,YAA/B,EAA6CH,QAAQ,CAACI,SAAtD,EAAiE,CAAjE,EAAoE,CAApE,CAApB,CA/B2B,CAiC3B;;AACA,gBAAM;AAAA;AAAA,8BAAM,GAAN,CAAN,CAlC2B,CAoC3B;;AACAoC,UAAAA,KAAK,GAAG,MAAM;AAAA;AAAA,wCAAWhD,UAAX,CAAsBQ,QAAQ,CAACG,YAA/B,EAA6CD,WAA7C,CAAd;AACA0C,UAAAA,KAAK,GAAG,MAAM;AAAA;AAAA,wCAAWpD,UAAX,CAAsBQ,QAAQ,CAACM,YAA/B,EAA6CD,WAA7C,CAAd;AACAwC,UAAAA,KAAK,GAAG,MAAM;AAAA;AAAA,wCAAWrD,UAAX,CAAsBQ,QAAQ,CAACiB,YAA/B,EAA6CD,WAA7C,CAAd;AACA;AAAA;AAAA,gCAAOc,EAAP,CAAUU,KAAK,KAAK,IAApB,EAA0B,UAA1B;AACA;AAAA;AAAA,gCAAOV,EAAP,CAAU,WAAAU,KAAK,SAAL,mBAAOC,IAAP,MAAgB,IAA1B,EAAgC,yBAAcD,KAAd,qBAAc,OAAOM,GAArB,CAAhC;AACA;AAAA;AAAA,gCAAOhB,EAAP,CAAUc,KAAK,KAAK,IAApB,EAA0B,UAA1B;AACA;AAAA;AAAA,gCAAOd,EAAP,CAAU,WAAAc,KAAK,SAAL,mBAAOH,IAAP,MAAgB,IAA1B,EAAgC,yBAAcG,KAAd,qBAAc,OAAOE,GAArB,CAAhC;AACA;AAAA;AAAA,gCAAOhB,EAAP,CAAUe,KAAK,KAAK,IAApB,EAA0B,UAA1B;AACA;AAAA;AAAA,gCAAOf,EAAP,CAAU,WAAAe,KAAK,SAAL,mBAAOJ,IAAP,MAAgB,IAA1B,EAAgC,yBAAcI,KAAd,qBAAc,OAAOC,GAArB,CAAhC;AAEA,cAAItC,SAAS,GAAGgC,KAAK,CAAEO,IAAvB;AACA,cAAItC,SAAS,GAAGmC,KAAK,CAAEG,IAAvB;AACA,cAAI5B,SAAS,GAAG0B,KAAK,CAAEE,IAAvB;AACA/C,UAAAA,QAAQ,CAACa,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBL,SAAS,CAACM,aAAhC,EAAgDd,QAAQ,CAACG,YAAzD,EAAuEK,SAAS,CAACI,MAAjF,EAAyF,MAAzF,CAA7B;AACAZ,UAAAA,QAAQ,CAACe,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBN,SAAS,CAACK,aAAhC,EAAgDd,QAAQ,CAACM,YAAzD,EAAuEG,SAAS,CAACG,MAAjF,EAAyF,MAAzF,CAA7B;AACAZ,UAAAA,QAAQ,CAACoB,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBD,SAAS,CAACL,aAAhC,EAAgDd,QAAQ,CAACiB,YAAzD,EAAuEE,SAAS,CAACP,MAAjF,EAAyF,MAAzF,CAA7B;AAEH,SAtDG,CAAJ;AAuDAX,QAAAA,IAAI,CAAC,uBAAD,EAA0B,kBAAkB;AAE5C;AACA,cAAI+C,cAAc,GAAG,MAAM;AAAA;AAAA,wDAAmBhD,QAAQ,CAACG,YAA5B,EAA0CH,QAAQ,CAACI,SAAnD,EAA8D,MAA9D,EAAsE;AAAE6C,YAAAA,UAAU,EAAE;AAAd,WAAtE,CAA3B;AACA;AAAA;AAAA,gCAAOnB,EAAP,CAAUkB,cAAc,CAACP,IAAf,KAAwB,IAAlC,EAAwCO,cAAc,CAACF,GAAvD;AACA9C,UAAAA,QAAQ,CAACa,WAAT,GAAuBmC,cAAc,CAACD,IAAf,CAAqBG,UAA5C;AACA,cAAIC,OAAO,GAAGH,cAAc,CAACD,IAAf,CAAqBnC,MAAnC;AACAZ,UAAAA,QAAQ,CAACe,WAAT,GAAuB,MAAM;AAAA;AAAA,oCAASf,QAAQ,CAACM,YAAlB,EAAgC6C,OAAhC,EAAyC,MAAzC,CAA7B;AAEA,cAAIC,cAAc,GAAG,MAAM;AAAA;AAAA,wDAAmBpD,QAAQ,CAACiB,YAA5B,EAA0CjB,QAAQ,CAACkB,SAAnD,EAA8D,MAA9D,EAAsE;AAAE+B,YAAAA,UAAU,EAAE;AAAd,WAAtE,CAA3B;AACA;AAAA;AAAA,gCAAOnB,EAAP,CAAUsB,cAAc,CAACX,IAAf,KAAwB,IAAlC,EAAwCW,cAAc,CAACN,GAAvD;AACA9C,UAAAA,QAAQ,CAACoB,WAAT,GAAuBgC,cAAc,CAACL,IAAf,CAAqBG,UAA5C;AACA,cAAIG,OAAO,GAAGD,cAAc,CAACL,IAAf,CAAqBnC,MAAnC;AACAZ,UAAAA,QAAQ,CAACyB,WAAT,GAAuB,MAAM;AAAA;AAAA,oCAASzB,QAAQ,CAACsB,YAAlB,EAAgC+B,OAAhC,EAAyC,MAAzC,CAA7B,CAb4C,CAe5C;;AACA,cAAIC,QAAQ,GAAG,CAAf;;AACAtD,UAAAA,QAAQ,CAACa,WAAT,CAAqB0C,0BAArB,GAAkD,CAACC,UAAD,EAAaC,WAAb,EAA0BC,WAA1B,KAA0C;AACxF,gBAAID,WAAW,KAAKzD,QAAQ,CAACI,SAA7B,EAAwC;AACpCkD,cAAAA,QAAQ;AACX;AACJ,WAJD;;AAKAtD,UAAAA,QAAQ,CAACe,WAAT,CAAqBwC,0BAArB,GAAkD,CAACC,UAAD,EAAaC,WAAb,EAA0BC,WAA1B,KAA0C;AACxF,gBAAID,WAAW,KAAKzD,QAAQ,CAACI,SAA7B,EAAwC;AACpCkD,cAAAA,QAAQ;AACX;AACJ,WAJD;;AAKA,cAAIK,MAAM,GAAG,MAAM3D,QAAQ,CAACa,WAAT,CAAqB+C,YAArB,CAAkC;AACjDC,YAAAA,aAAa,EAAE;AAAA;AAAA,kDAAeC,cADmB;AAEjDC,YAAAA,aAAa,EAAE,EAFkC;AAGjDd,YAAAA,UAAU,EAAE,CAHqC;AAIjDe,YAAAA,UAAU,EAAE;AAAA;AAAA,4CAAYC,MAJyB;AAKjDC,YAAAA,aAAa,EAAE;AACXC,cAAAA,UAAU,EAAE;AADD;AALkC,WAAlC,CAAnB;AASA;AAAA;AAAA,gCAAOrC,EAAP,CAAU6B,MAAM,CAAClB,IAAjB,EAAwB,GAAEkB,MAAM,CAACb,GAAI,EAArC;AACA,gBAAM;AAAA;AAAA,8BAAM,GAAN,CAAN;AACA;AAAA;AAAA,gCAAOhB,EAAP,CAAUwB,QAAQ,KAAK,CAAvB,EAA2B,eAAcA,QAAS,GAAlD,EAtC4C,CAwC5C;;AACAA,UAAAA,QAAQ,GAAG,CAAX;;AACAtD,UAAAA,QAAQ,CAACa,WAAT,CAAqBuD,2BAArB,GAAmD,CAACC,MAAD,EAASC,OAAT,EAAkBC,WAAlB,KAAkC;AACjF,gBAAID,OAAO,KAAK;AAAA;AAAA,0CAAW3B,qBAA3B,EAAkD;AAC9CW,cAAAA,QAAQ;AACX;AACJ,WAJD;;AAKAtD,UAAAA,QAAQ,CAACe,WAAT,CAAqBqD,2BAArB,GAAmD,CAACC,MAAD,EAASC,OAAT,EAAkBC,WAAlB,KAAkC;AACjF,gBAAID,OAAO,KAAK;AAAA;AAAA,0CAAW3B,qBAA3B,EAAkD;AAC9CW,cAAAA,QAAQ;AACX;AACJ,WAJD,CA/C4C,CAoD5C;;;AACA,cAAIkB,SAAS,GAAG,MAAMxE,QAAQ,CAACe,WAAT,CAAqB5B,WAArB,EAAtB;AACA;AAAA;AAAA,gCAAO2C,EAAP,CAAU0C,SAAS,CAAC/B,IAApB,EAA2B,GAAE+B,SAAS,CAAC1B,GAAI,EAA3C;AACA,gBAAM;AAAA;AAAA,8BAAM,GAAN,CAAN;AACA;AAAA;AAAA,gCAAOhB,EAAP,CAAUwB,QAAQ,KAAK,CAAvB,EAA2B,eAAcA,QAAS,GAAlD,EAxD4C,CA0D5C;;AACA,cAAImB,QAAJ,EACIC,QADJ,EAEIC,QAFJ,EAGIC,QAHJ;AAIAtB,UAAAA,QAAQ,GAAG,CAAX;;AACAtD,UAAAA,QAAQ,CAACa,WAAT,CAAqB0C,0BAArB,GAAkD,CAACC,UAAD,EAAaC,WAAb,EAA0BC,WAA1B,KAA0C;AACxFJ,YAAAA,QAAQ;AACX,WAFD;;AAGAtD,UAAAA,QAAQ,CAACa,WAAT,CAAqBuD,2BAArB,GAAmD,CAACC,MAAD,EAASC,OAAT,EAAkBC,WAAlB,KAAkC;AACjF;AAAA;AAAA,kCAAOzC,EAAP,CAAUyC,WAAV,EAAwB,mBAAkBD,OAAQ,IAAGD,MAAO,EAA5D;AACAf,YAAAA,QAAQ;AACRmB,YAAAA,QAAQ,GAAGF,WAAX;AACH,WAJD;;AAKAvE,UAAAA,QAAQ,CAACe,WAAT,CAAqBwC,0BAArB,GAAkD,CAACC,UAAD,EAAaC,WAAb,EAA0BC,WAA1B,KAA0C;AACxFJ,YAAAA,QAAQ;AACX,WAFD;;AAGAtD,UAAAA,QAAQ,CAACe,WAAT,CAAqBqD,2BAArB,GAAmD,CAACC,MAAD,EAASC,OAAT,EAAkBC,WAAlB,KAAkC;AACjF;AAAA;AAAA,kCAAOzC,EAAP,CAAUyC,WAAV,EAAwB,mBAAkBD,OAAQ,IAAGD,MAAO,EAA5D;AACAf,YAAAA,QAAQ;AACRoB,YAAAA,QAAQ,GAAGH,WAAX;AACH,WAJD;;AAKAZ,UAAAA,MAAM,GAAG,MAAM3D,QAAQ,CAACa,WAAT,CAAqB+C,YAArB,CAAkC;AAC7CC,YAAAA,aAAa,EAAE;AAAA;AAAA,kDAAeC,cADe;AAE7CC,YAAAA,aAAa,EAAE,EAF8B;AAG7Cd,YAAAA,UAAU,EAAE,CAHiC;AAI7Ce,YAAAA,UAAU,EAAE;AAAA;AAAA,4CAAYC,MAJqB;AAK7CC,YAAAA,aAAa,EAAE;AACXC,cAAAA,UAAU,EAAE;AADD;AAL8B,WAAlC,CAAf;AASA;AAAA;AAAA,gCAAOrC,EAAP,CAAU6B,MAAM,CAAClB,IAAjB,EAAwB,GAAEkB,MAAM,CAACb,GAAI,EAArC;;AAEA9C,UAAAA,QAAQ,CAACoB,WAAT,CAAqBmC,0BAArB,GAAkD,CAACC,UAAD,EAAaC,WAAb,EAA0BC,WAA1B,KAA0C;AACxFJ,YAAAA,QAAQ;AACX,WAFD;;AAGAtD,UAAAA,QAAQ,CAACoB,WAAT,CAAqBgD,2BAArB,GAAmD,CAACC,MAAD,EAASC,OAAT,EAAkBC,WAAlB,KAAkC;AACjF;AAAA;AAAA,kCAAOzC,EAAP,CAAUyC,WAAV,EAAwB,mBAAkBD,OAAQ,IAAGD,MAAO,EAA5D;AACAf,YAAAA,QAAQ;AACRqB,YAAAA,QAAQ,GAAGJ,WAAX;AACH,WAJD;;AAKAvE,UAAAA,QAAQ,CAACyB,WAAT,CAAqB8B,0BAArB,GAAkD,CAACC,UAAD,EAAaC,WAAb,EAA0BC,WAA1B,KAA0C;AACxFJ,YAAAA,QAAQ;AACX,WAFD;;AAGAtD,UAAAA,QAAQ,CAACyB,WAAT,CAAqB2C,2BAArB,GAAmD,CAACC,MAAD,EAASC,OAAT,EAAkBC,WAAlB,KAAkC;AACjF;AAAA;AAAA,kCAAOzC,EAAP,CAAUyC,WAAV,EAAwB,mBAAkBD,OAAQ,IAAGD,MAAO,EAA5D;AACAf,YAAAA,QAAQ;AACRsB,YAAAA,QAAQ,GAAGL,WAAX;AACH,WAJD;;AAKAZ,UAAAA,MAAM,GAAG,MAAM3D,QAAQ,CAACoB,WAAT,CAAqBwC,YAArB,CAAkC;AAC7CC,YAAAA,aAAa,EAAE;AAAA;AAAA,kDAAeC,cADe;AAE7CC,YAAAA,aAAa,EAAE,EAF8B;AAG7Cd,YAAAA,UAAU,EAAE,CAHiC;AAI7Ce,YAAAA,UAAU,EAAE;AAAA;AAAA,4CAAYC,MAJqB;AAK7CC,YAAAA,aAAa,EAAE;AACXC,cAAAA,UAAU,EAAE;AADD;AAL8B,WAAlC,CAAf;AASA;AAAA;AAAA,gCAAOrC,EAAP,CAAU6B,MAAM,CAAClB,IAAjB,EAAwB,GAAEkB,MAAM,CAACb,GAAI,EAArC;AACA,gBAAM;AAAA;AAAA,8BAAM,IAAN,CAAN,CArH4C,CAqH1B;;AAClB;AAAA;AAAA,gCAAOhB,EAAP,CAAUwB,QAAQ,KAAK,CAAvB,EAA2B,eAAcA,QAAS,GAAlD,EAtH4C,CAyH5C;;AACA,gBAAMtD,QAAQ,CAACa,WAAT,CAAqBgE,UAArB,EAAN;AACA,gBAAM7E,QAAQ,CAACe,WAAT,CAAqB8D,UAArB,EAAN;AACA,gBAAM7E,QAAQ,CAACoB,WAAT,CAAqByD,UAArB,EAAN;AACA,gBAAM7E,QAAQ,CAACyB,WAAT,CAAqBoD,UAArB,EAAN;AACA7E,UAAAA,QAAQ,CAACa,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsB4D,QAAQ,CAAC3D,aAA/B,EAA+Cd,QAAQ,CAACG,YAAxD,EAAsEsE,QAAQ,CAAC7D,MAA/E,EAAuF,MAAvF,CAA7B;AACAZ,UAAAA,QAAQ,CAACe,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsB2D,QAAQ,CAAC5D,aAA/B,EAA+Cd,QAAQ,CAACM,YAAxD,EAAsEoE,QAAQ,CAAC9D,MAA/E,EAAuF,MAAvF,CAA7B;AACAZ,UAAAA,QAAQ,CAACoB,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBuD,QAAQ,CAAC7D,aAA/B,EAA+Cd,QAAQ,CAACiB,YAAxD,EAAsE0D,QAAQ,CAAC/D,MAA/E,EAAuF,MAAvF,CAA7B;AACAZ,UAAAA,QAAQ,CAACyB,WAAT,GAAuB,MAAM;AAAA;AAAA,8DAAsBmD,QAAQ,CAAC9D,aAA/B,EAA+Cd,QAAQ,CAACsB,YAAxD,EAAsEsD,QAAQ,CAAChE,MAA/E,EAAuF,MAAvF,CAA7B;AAEA0C,UAAAA,QAAQ,GAAG,CAAX;;AACAtD,UAAAA,QAAQ,CAACa,WAAT,CAAqBiE,aAArB,GAAsCvC,GAAD,IAAS;AAC1Ce,YAAAA,QAAQ;AACX,WAFD;;AAGAtD,UAAAA,QAAQ,CAACe,WAAT,CAAqB+D,aAArB,GAAsCvC,GAAD,IAAS;AAC1Ce,YAAAA,QAAQ;AACX,WAFD;;AAGAtD,UAAAA,QAAQ,CAACoB,WAAT,CAAqB0D,aAArB,GAAsCvC,GAAD,IAAS;AAC1Ce,YAAAA,QAAQ;AACX,WAFD;;AAGAtD,UAAAA,QAAQ,CAACyB,WAAT,CAAqBqD,aAArB,GAAsCvC,GAAD,IAAS;AAC1Ce,YAAAA,QAAQ;AACX,WAFD;;AAGA,cAAIyB,OAAO,GAAG,MAAM/E,QAAQ,CAACa,WAAT,CAAqBuB,WAArB,CAAiC;AACjDC,YAAAA,QAAQ,EAAE;AAAA;AAAA,sDAAiB2C,QADsB;AAEjDzC,YAAAA,GAAG,EAAE;AAF4C,WAAjC,CAApB;AAIA;AAAA;AAAA,gCAAOT,EAAP,CAAUiD,OAAO,CAACtC,IAAlB,EAAyB,GAAEsC,OAAO,CAACjC,GAAI,EAAvC;AACA,gBAAM;AAAA;AAAA,8BAAM,GAAN,CAAN,CArJ4C,CAqJ3B;;AACjB;AAAA;AAAA,gCAAOhB,EAAP,CAAUwB,QAAQ,KAAK,CAAvB,EAA2B,eAAcA,QAAS,GAAlD;AAEH,SAxJG,CAAJ;AA0JH,OA5RO,CAAR","sourcesContent":["\nimport { delay } from \"../../../src/shared/tsgf/Utils\";\nimport { assert } from 'chai';\nimport { cancelMatch, createAndEnterRoom, hallClient, joinRoom, joinRoomUseGameServer, queryMatch, requestMatchOneSingle, testEachBuild } from \"./ApiUtils\";\nimport { ERoomMsgRecvType } from \"../../../src/shared/tsgf/room/IRoomMsg\";\nimport { EMatchFromType, IMatchPlayerResultWithServer, ISingleMatcherParams, MatcherKeys } from \"../../../src/shared/tsgf/match/Models\";\nimport { ErrorCodes } from \"../../../src/shared/tsgf/Result\";\n\ndescribe(\"玩家匹配\", () => {\n\n    let testData = testEachBuild(5);\n\n\n    test('4max,min2,2人匹配,应成功,再进入招人匹配,依次进入2人,都要成功,再进1人应该要没结果,再取消!', async function () {\n        //匹配请求\n        let matchReqId1 = await requestMatchOneSingle(testData.playerToken1, testData.playerId1, 4, 2);\n        let matchReqId2 = await requestMatchOneSingle(testData.playerToken2, testData.playerId2, 4, 2);\n        await delay(1000);\n        let matchRet1 = await queryMatch(testData.playerToken1, matchReqId1);\n        let matchRet2 = await queryMatch(testData.playerToken2, matchReqId2);\n\n        console.log('ApiPlayerMatch_4Max2Min2P_2P_1PNoResult, roomId:', matchRet1.roomId);\n\n        testData.gameClient1 = await joinRoomUseGameServer(matchRet1.gameServerUrl!, testData.playerToken1, matchRet1.roomId, 'zum1');\n        testData.gameClient2 = await joinRoomUseGameServer(matchRet2.gameServerUrl!, testData.playerToken2, matchRet2.roomId, 'zum2');\n\n        let matchReqId3 = await requestMatchOneSingle(testData.playerToken3, testData.playerId3, 4, 2);\n        await delay(1000);\n        let matchRet3 = await queryMatch(testData.playerToken3, matchReqId3);\n        testData.gameClient3 = await joinRoomUseGameServer(matchRet3.gameServerUrl!, testData.playerToken3, matchRet3.roomId, 'zum3');\n\n        let matchReqId4 = await requestMatchOneSingle(testData.playerToken4, testData.playerId4, 4, 2);\n        await delay(1000);\n        let matchRet4 = await queryMatch(testData.playerToken4, matchReqId4);\n        testData.gameClient4 = await joinRoomUseGameServer(matchRet4.gameServerUrl!, testData.playerToken4, matchRet4.roomId, 'zum4');\n\n        let matchReqId5 = await requestMatchOneSingle(testData.playerToken5, testData.playerId5, 4, 2);\n        await delay(1000);\n        let retM5 = await hallClient.queryMatch(testData.playerToken5, matchReqId5);\n        assert.ok(retM5 === null, \"应该没结果!实际有了!\" + JSON.stringify(retM5));\n        //取消匹配\n        await cancelMatch(testData.playerToken5, matchReqId5);\n\n        //这个时候退出了一个\n        await testData.gameClient4.leaveRoom();\n\n        //玩家5这个时候要能匹配进房间才对!\n        matchReqId5 = await requestMatchOneSingle(testData.playerToken5, testData.playerId5, 4, 2);\n        await delay(1000);\n        let matchRet5 = await queryMatch(testData.playerToken5, matchReqId5);\n        testData.gameClient5 = await joinRoomUseGameServer(matchRet5.gameServerUrl!, testData.playerToken5, matchRet5.roomId, 'zum5');\n\n\n    });\n    test('模拟三个客户端单人混战匹配', async function () {\n\n        //匹配请求\n        let matchReqId1 = await requestMatchOneSingle(testData.playerToken1, testData.playerId1, 8, 3);\n        let matchReqId2 = await requestMatchOneSingle(testData.playerToken2, testData.playerId2, 8, 3);\n        let matchReqId3 = await requestMatchOneSingle(testData.playerToken3, testData.playerId3, 8, 3);\n\n        //延时1秒\n        await delay(1000);\n\n        let matchRet1 = await queryMatch(testData.playerToken1, matchReqId1);\n        let matchRet2 = await queryMatch(testData.playerToken2, matchReqId2);\n        let matchRet3 = await queryMatch(testData.playerToken3, matchReqId3);\n\n        console.log('matchRet1', matchRet1);\n        console.log('matchRet2', matchRet2);\n        console.log('matchRet3', matchRet3);\n        console.log('ApiPlayer_MatchSingle3~8, roomId:', matchRet1.roomId);\n\n        testData.gameClient1 = await joinRoomUseGameServer(matchRet1.gameServerUrl!, testData.playerToken1, matchRet1.roomId, 'zum1');\n        testData.gameClient2 = await joinRoomUseGameServer(matchRet2.gameServerUrl!, testData.playerToken2, matchRet2.roomId, 'zum2');\n        testData.gameClient3 = await joinRoomUseGameServer(matchRet3.gameServerUrl!, testData.playerToken3, matchRet3.roomId, 'zum3');\n\n        await testData.gameClient3.sendRoomMsg({\n            recvType: ERoomMsgRecvType.ROOM_OTHERS,\n            msg: '大伙好呀~'\n        });\n\n    });\n    test('取消匹配', async function () {\n\n        let matchReqId1 = await requestMatchOneSingle(testData.playerToken1, testData.playerId1, 8, 3);\n        let matchReqId2 = await requestMatchOneSingle(testData.playerToken2, testData.playerId2, 8, 3);\n\n        let retM1 = await hallClient.queryMatch(testData.playerToken1, matchReqId1);\n        assert.ok(retM1 === null, '应该查不到结果的!' + JSON.stringify(retM1));\n\n        //取消玩家1匹配\n        await cancelMatch(testData.playerToken1, matchReqId1);\n        let matchReqId3 = await requestMatchOneSingle(testData.playerToken3, testData.playerId3, 8, 3);\n\n        //延时\n        await delay(500);\n\n        retM1 = await hallClient.queryMatch(testData.playerToken1, matchReqId1);\n        assert.ok(retM1?.succ === false && retM1.code === ErrorCodes.MatchRequestCancelled,\n            '应该要查到取消匹配的结果!' + JSON.stringify(retM1));\n\n        //延时\n        await delay(500);\n\n        //这个时候不满3个,有2个在匹配池等待中,所以没有结果\n        retM1 = await hallClient.queryMatch(testData.playerToken1, matchReqId1);\n        let retM2 = await hallClient.queryMatch(testData.playerToken2, matchReqId2);\n        let retM3 = await hallClient.queryMatch(testData.playerToken3, matchReqId3);\n        assert.ok(retM1 === null, '应该查不到结果的!' + JSON.stringify(retM1));\n        assert.ok(retM2 === null, '应该查不到结果的!' + JSON.stringify(retM2));\n        assert.ok(retM3 === null, '应该查不到结果的!' + JSON.stringify(retM3));\n\n        //玩家1再提交匹配\n        matchReqId1 = await requestMatchOneSingle(testData.playerToken1, testData.playerId1, 8, 3);\n\n        //延时\n        await delay(500);\n\n        //这个时候应该有结果了\n        retM1 = await hallClient.queryMatch(testData.playerToken1, matchReqId1);\n        retM2 = await hallClient.queryMatch(testData.playerToken2, matchReqId2);\n        retM3 = await hallClient.queryMatch(testData.playerToken3, matchReqId3);\n        assert.ok(retM1 !== null, '应该要有结果了!');\n        assert.ok(retM1?.succ === true, '应该匹配成功才对!' + retM1?.err);\n        assert.ok(retM2 !== null, '应该要有结果了!');\n        assert.ok(retM2?.succ === true, '应该匹配成功才对!' + retM2?.err);\n        assert.ok(retM3 !== null, '应该要有结果了!');\n        assert.ok(retM3?.succ === true, '应该匹配成功才对!' + retM3?.err);\n\n        let matchRet1 = retM1!.data!;\n        let matchRet2 = retM2!.data!;\n        let matchRet3 = retM3!.data!;\n        testData.gameClient1 = await joinRoomUseGameServer(matchRet1.gameServerUrl!, testData.playerToken1, matchRet1.roomId, 'zum1');\n        testData.gameClient2 = await joinRoomUseGameServer(matchRet2.gameServerUrl!, testData.playerToken2, matchRet2.roomId, 'zum2');\n        testData.gameClient3 = await joinRoomUseGameServer(matchRet3.gameServerUrl!, testData.playerToken3, matchRet3.roomId, 'zum3');\n\n    });\n    test('发起全房间玩家匹配和房间取消匹配_单人混战', async function () {\n\n        //创建房间\n        let gameClient1Ret = await createAndEnterRoom(testData.playerToken1, testData.playerId1, 'zum1', { maxPlayers: 3 });\n        assert.ok(gameClient1Ret.succ === true, gameClient1Ret.err);\n        testData.gameClient1 = gameClient1Ret.data!.gameClient;\n        let roomId1 = gameClient1Ret.data!.roomId;\n        testData.gameClient2 = await joinRoom(testData.playerToken2, roomId1, 'zum2');\n\n        let gameClient3Ret = await createAndEnterRoom(testData.playerToken3, testData.playerId3, 'zum3', { maxPlayers: 3 });\n        assert.ok(gameClient3Ret.succ === true, gameClient3Ret.err);\n        testData.gameClient3 = gameClient3Ret.data!.gameClient;\n        let roomId2 = gameClient3Ret.data!.roomId;\n        testData.gameClient4 = await joinRoom(testData.playerToken4, roomId2, 'zum4');\n\n        //发起房间所有玩家匹配请求\n        let msgCount = 0;\n        testData.gameClient1.onRoomAllPlayersMatchStart = (matchReqId, reqPlayerId, matchParams) => {\n            if (reqPlayerId === testData.playerId1) {\n                msgCount++;\n            }\n        };\n        testData.gameClient2.onRoomAllPlayersMatchStart = (matchReqId, reqPlayerId, matchParams) => {\n            if (reqPlayerId === testData.playerId1) {\n                msgCount++;\n            }\n        };\n        let reqRet = await testData.gameClient1.requestMatch({\n            matchFromType: EMatchFromType.RoomAllPlayers,\n            matchFromInfo: {},\n            maxPlayers: 4,\n            matcherKey: MatcherKeys.Single,\n            matcherParams: {\n                minPlayers: 4,\n            } as ISingleMatcherParams,\n        });\n        assert.ok(reqRet.succ, `${reqRet.err}`);\n        await delay(200);\n        assert.ok(msgCount === 2, `应该要收到2个消息！实际${msgCount}个`);\n\n        //先测试取消\n        msgCount = 0;\n        testData.gameClient1.onRoomAllPlayersMatchResult = (errMsg, errCode, matchResult) => {\n            if (errCode === ErrorCodes.MatchRequestCancelled) {\n                msgCount++;\n            }\n        };\n        testData.gameClient2.onRoomAllPlayersMatchResult = (errMsg, errCode, matchResult) => {\n            if (errCode === ErrorCodes.MatchRequestCancelled) {\n                msgCount++;\n            }\n        };\n        //玩家2去取消\n        let cancelRet = await testData.gameClient2.cancelMatch();\n        assert.ok(cancelRet.succ, `${cancelRet.err}`);\n        await delay(500);\n        assert.ok(msgCount === 2, `应该要收到2个消息！实际${msgCount}个`);\n\n        //测试正常的匹配成功\n        let p1Result!: IMatchPlayerResultWithServer,\n            p2Result!: IMatchPlayerResultWithServer,\n            p3Result!: IMatchPlayerResultWithServer,\n            p4Result!: IMatchPlayerResultWithServer;\n        msgCount = 0;\n        testData.gameClient1.onRoomAllPlayersMatchStart = (matchReqId, reqPlayerId, matchParams) => {\n            msgCount++;\n        };\n        testData.gameClient1.onRoomAllPlayersMatchResult = (errMsg, errCode, matchResult) => {\n            assert.ok(matchResult, `应该有结果,但为空,错误消息为:${errCode},${errMsg}`);\n            msgCount++;\n            p1Result = matchResult!;\n        };\n        testData.gameClient2.onRoomAllPlayersMatchStart = (matchReqId, reqPlayerId, matchParams) => {\n            msgCount++;\n        };\n        testData.gameClient2.onRoomAllPlayersMatchResult = (errMsg, errCode, matchResult) => {\n            assert.ok(matchResult, `应该有结果,但为空,错误消息为:${errCode},${errMsg}`);\n            msgCount++;\n            p2Result = matchResult!;\n        };\n        reqRet = await testData.gameClient1.requestMatch({\n            matchFromType: EMatchFromType.RoomAllPlayers,\n            matchFromInfo: {},\n            maxPlayers: 4,\n            matcherKey: MatcherKeys.Single,\n            matcherParams: {\n                minPlayers: 4,\n            } as ISingleMatcherParams,\n        });\n        assert.ok(reqRet.succ, `${reqRet.err}`);\n\n        testData.gameClient3.onRoomAllPlayersMatchStart = (matchReqId, reqPlayerId, matchParams) => {\n            msgCount++;\n        };\n        testData.gameClient3.onRoomAllPlayersMatchResult = (errMsg, errCode, matchResult) => {\n            assert.ok(matchResult, `应该有结果,但为空,错误消息为:${errCode},${errMsg}`);\n            msgCount++;\n            p3Result = matchResult!;\n        };\n        testData.gameClient4.onRoomAllPlayersMatchStart = (matchReqId, reqPlayerId, matchParams) => {\n            msgCount++;\n        };\n        testData.gameClient4.onRoomAllPlayersMatchResult = (errMsg, errCode, matchResult) => {\n            assert.ok(matchResult, `应该有结果,但为空,错误消息为:${errCode},${errMsg}`);\n            msgCount++;\n            p4Result = matchResult!;\n        };\n        reqRet = await testData.gameClient3.requestMatch({\n            matchFromType: EMatchFromType.RoomAllPlayers,\n            matchFromInfo: {},\n            maxPlayers: 4,\n            matcherKey: MatcherKeys.Single,\n            matcherParams: {\n                minPlayers: 4,\n            } as ISingleMatcherParams,\n        });\n        assert.ok(reqRet.succ, `${reqRet.err}`);\n        await delay(2000);//匹配有定时器的\n        assert.ok(msgCount === 8, `应该要收到8个消息！实际${msgCount}个`);\n\n\n        //接着根据匹配结果加入新的房间\n        await testData.gameClient1.disconnect();\n        await testData.gameClient2.disconnect();\n        await testData.gameClient3.disconnect();\n        await testData.gameClient4.disconnect();\n        testData.gameClient1 = await joinRoomUseGameServer(p1Result.gameServerUrl!, testData.playerToken1, p1Result.roomId, 'zum1');\n        testData.gameClient2 = await joinRoomUseGameServer(p2Result.gameServerUrl!, testData.playerToken2, p2Result.roomId, 'zum2');\n        testData.gameClient3 = await joinRoomUseGameServer(p3Result.gameServerUrl!, testData.playerToken3, p3Result.roomId, 'zum3');\n        testData.gameClient4 = await joinRoomUseGameServer(p4Result.gameServerUrl!, testData.playerToken4, p4Result.roomId, 'zum4');\n\n        msgCount = 0;\n        testData.gameClient1.onRecvRoomMsg = (msg) => {\n            msgCount++;\n        };\n        testData.gameClient2.onRecvRoomMsg = (msg) => {\n            msgCount++;\n        };\n        testData.gameClient3.onRecvRoomMsg = (msg) => {\n            msgCount++;\n        };\n        testData.gameClient4.onRecvRoomMsg = (msg) => {\n            msgCount++;\n        };\n        let sendRet = await testData.gameClient1.sendRoomMsg({\n            recvType: ERoomMsgRecvType.ROOM_ALL,\n            msg: '测试是否同一个房间'\n        });\n        assert.ok(sendRet.succ, `${sendRet.err}`);\n        await delay(200);//匹配有定时器的\n        assert.ok(msgCount === 4, `应该要收到4个消息！实际${msgCount}个`);\n\n    });\n\n});"]}