{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgf/match/Models.ts"],"names":["EMatchFromType","MatcherKeys","Single","FixedTeams","FixedTeamsSpecify","FreeTeams"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAEA;gCACYA,c,0BAAAA,c;AAAAA,QAAAA,c;AAAAA,QAAAA,c;AAAAA,QAAAA,c;eAAAA,c;;AASZ;;AAMA;;AAMA;AACA;AACA;;AAiBA;;AAOA;;AAQA;;;AAIA;6BACaC,W,GAAc;AACvB;AACJ;AACIC,QAAAA,MAAM,EAAE,QAHe;;AAIvB;AACJ;AACIC,QAAAA,UAAU,EAAE,YANW;;AAOvB;AACJ;AACIC,QAAAA,iBAAiB,EAAE,mBATI;;AAUvB;AACAC,QAAAA,SAAS,EAAE;AAXY,O;AAa3B;;AAOA;;AAKA;;AAQA;;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAQA;;AAUA","sourcesContent":["import { ITeamParams, ITeamPlayerIds } from \"../room/IRoomInfo\";\n\n/**匹配类型*/\nexport enum EMatchFromType {\n    /**单个或多个玩家要匹配，进已存在的或新的房间*/\n    Player = 'Player',\n    /**已经创建好的房间，支持匹配来人*/\n    RoomJoinUs = 'RoomJoinUs',\n    /**房间全玩家去匹配全新的房间*/\n    RoomAllPlayers = 'RoomAllPlayers',\n}\n\n/**来自单个玩家提交的匹配信息*/\nexport interface IMatchFromPlayer {\n    /**要匹配的玩家ID, 一般只传自己, \n     * 可以传入其他玩家id, 但其他玩家并不会收到通知,因此其他玩家的后续操作需要自行处理(连接游戏服务器和加入房间等)*/\n    playerIds: string[];\n}\n/**来自房间所有玩家提交的配置信息*/\nexport interface IMatchFromRoomAllPlayers {\n}\n\n\n\n/**匹配请求参数基础定义\n * 匹配器+最大玩家数+组队参数 全部一致才会匹配到一起\n*/\nexport interface IMatchParamsBase {\n    /**匹配自定义类型, 只有相同的才会匹配在一起!*/\n    matchType?: string;\n    /**匹配器标识(只有相同的才会匹配在一起)，内置的匹配器标识定义: MatcherKeys，也可以使用自定义的(服务器)匹配器*/\n    matcherKey: string;\n    /**匹配器参数，对应匹配器需要的额外配置*/\n    matcherParams: any;\n    /**匹配超时秒数, 0或者undefined则默认60秒*/\n    matchTimeoutSec?: number;\n    /**房间最大玩家数, 只有相同的才会匹配在一起, 如果有队伍, 则队伍的合计最大玩家数要和本值一致!*/\n    maxPlayers: number;\n\n    /**组队参数, 只有相同的才会匹配在一起, 是否需要取决于匹配器是否需要*/\n    teamParams?: ITeamParams;\n}\n\n/**单独玩家发起的匹配参数*/\nexport interface IMatchParamsFromPlayer extends IMatchParamsBase {\n    /**发起类型是玩家*/\n    matchFromType: EMatchFromType.Player;\n    /**匹配发起的玩家信息, 注意,这些玩家不会收到服务器通知*/\n    matchFromInfo: IMatchFromPlayer;\n}\n/**房间全玩家发起的匹配参数*/\nexport interface IMatchParamsFromRoomAllPlayer extends IMatchParamsBase {\n    /**发起类型是房间全玩家*/\n    matchFromType: EMatchFromType.RoomAllPlayers;\n    /**匹配发起的附加信息*/\n    matchFromInfo: IMatchFromRoomAllPlayers;\n}\n\n/**匹配参数*/\nexport type IMatchParams = IMatchParamsFromPlayer | IMatchParamsFromRoomAllPlayer;\n\n\n/**内置匹配器标识定义*/\nexport const MatcherKeys = {\n    /**单人(无组队,忽视队伍参数), 支持多个玩家一起提交匹配,但匹配结果是没有组队的\n     * matcherParams 类型对应为: ISingleMatcherParams*/\n    Single: 'Single',\n    /**固定队伍匹配器, 所有玩家都在同一个队伍中, 具体哪个队伍由匹配逻辑分配\n     * matcherParams 类型对应为: IFixedTeamsMatcherParams*/\n    FixedTeams: 'FixedTeams',\n    /**指定固定队伍匹配器, 可以详细指定每个玩家的所属队伍\n     * matcherParams 类型对应为: IFixedTeamsSpecifyMatcherParams*/\n    FixedTeamsSpecify: 'FixedTeamsSpecify',\n    /**自由队伍匹配器, matcherParams 类型对应为: IFreeTeamsMatcherParams*/\n    FreeTeams: 'FreeTeams',\n};\n/**单人匹配器的匹配属性*/\nexport interface ISingleMatcherParams {\n    /**至少几个玩家匹配,才算匹配成功(创建房间), 如果要匹配满才开,则将值设置为maxPlayers*/\n    minPlayers: number;\n    /**生成结果后(满足最小玩家数但未满足最大玩家数时),是否继续开启房间招人匹配,直到满员*/\n    resultsContinueRoomJoinUsMatch?: boolean;\n}\n/**固定队伍匹配器 的匹配属性*/\nexport interface IFixedTeamsMatcherParams {\n    /**满足最小玩家数但未满足最大玩家数时, 是否继续开启房间招人匹配,直到满员*/\n    resultsContinueRoomJoinUsMatch?: boolean;\n}\n/**指定固定队伍匹配器 的匹配属性*/\nexport interface IFixedTeamsSpecifyMatcherParams {\n    /**详细指定玩家的队伍分组*/\n    specifyTeamPlayers?: ITeamPlayerIds[];\n\n    /**满足最小玩家数但未满足最大玩家数时, 是否继续开启房间招人匹配,直到满员*/\n    resultsContinueRoomJoinUsMatch?: boolean;\n}\n/**自由队伍匹配器 的匹配属性*/\nexport interface IFreeTeamsMatcherParams {\n    /**至少几个队伍,才算匹配成功(创建房间), 不设置视为匹配满\n     * 如不配置则需注意: 最大人数如果不能被队伍人数整除, 会导致人数永远无法匹配满!\n     * */\n    minTeams?: number;\n    /**至少几个玩家匹配,才算匹配成功(创建房间), 不设置视为匹配满\n     * 如不配置则需注意: 最大人数如果不能被队伍人数整除, 会导致人数永远无法匹配满!\n    */\n    minPlayers?: number;\n    /**[队伍参数] 所有玩家都在同一个队伍*/\n    allPlayersSameTeam?: boolean;\n    /**[队伍参数] 所有玩家都在指定的队伍id中*/\n    allPlayersSameTeamId?: string;\n    /**满足最小玩家数但未满足最大玩家数时, 是否继续开启房间招人匹配,直到满员*/\n    resultsContinueRoomJoinUsMatch?: boolean;\n}\n\n/*\nlet a: IMatchParams = {\n    matchFromType: EMatchFromType.Player,\n    matchFromInfo: {\n        playerIds:[],\n    },\n    matcherKey: MatcherKeys.Single,\n    maxPlayers: 10,\n    matcherParams: {},\n};\nlet b: IMatchParams = {\n    matchFromType: EMatchFromType.RoomAllPlayers,\n    matchFromInfo: {\n    },\n    matcherKey: MatcherKeys.Single,\n    maxPlayers: 10,\n    matcherParams: {\n        maxPlayer:1\n    },\n};\nlet c!: IMatchParams;\nif (c.matchFromType == EMatchFromType.RoomAllPlayers) {\n    let room = c.matchFromInfo;\n} else if (c.matchFromType == EMatchFromType.Player) {\n    let player = c.matchFromInfo;\n}\n*/\n\n\n/**匹配请求的单个玩家结果*/\nexport interface IMatchPlayerResult {\n    /**玩家id*/\n    playerId: string;\n    /**应该加入的队伍id*/\n    teamId?: string;\n}\n\n/**给单个玩家的匹配结果(包含要加入的服务器信息)*/\nexport interface IMatchPlayerResultWithServer {\n    /**房间所处的游戏服务器地址, 如果为undefined则说明服务器当前不可用*/\n    gameServerUrl?: string;\n    /**房间id*/\n    roomId: string;\n    /**应该加入的队伍id*/\n    teamId?: string;\n}\n\n/**匹配请求的匹配结果*/\nexport interface IMatchResult {\n    /**房间所处的游戏服务器地址, 如果为undefined则说明服务器当前不可用*/\n    gameServerUrl?: string;\n    /**房间id*/\n    roomId: string;\n    /**本次匹配中各个玩家对应的结果信息*/\n    matchPlayerResults: IMatchPlayerResult[];\n}"]}