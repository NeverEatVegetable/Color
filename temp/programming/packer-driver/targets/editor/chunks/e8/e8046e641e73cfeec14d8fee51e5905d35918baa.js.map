{"version":3,"sources":["file:///E:/CocosProjects/Color/assets/ts-gameframework-master/servers/src/shared/tsgfServer/match/Models.ts"],"names":["buildMatchGroupKey","params","key","matchType","matcherKey","maxPlayers","teamParams","fixedTeamInfoList","map","t","id","minPlayers","join","fixedTeamCount","sp","i","fixedTeamMinPlayers","fixedTeamMaxPlayers","freeTeamMinPlayers","freeTeamMaxPlayers","initMatchRequest","matchParams","limit","req","matchReqId","requestTime","Date","now","matchReqGroupKey","matchTimeoutSec","matchFromType","RoomJoinUs","matchFromInfo","teamsPlayerIds","teamId","playerIds","buildRoomJoinUsMatchRequest","roomMatchReq","roomId","attr","Object","assign","matcherParams","undefined","reqParams","currPlayerCount","length","slice","EMatchFromType","arrSum","buildGuid","EMatchProcType"],"mappings":"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","sourcesContent":["\nimport { IMatchParamsBase, IMatchParamsFromPlayer, EMatchFromType, IMatchResult, IMatchPlayerResult, IMatchFromRoomAllPlayers } from \"../../tsgf/match/Models\";\nimport { ErrorCodes, IResult } from \"../../tsgf/Result\";\nimport { ICreateRoomPara, ITeamPlayerIds } from \"../../tsgf/room/IRoomInfo\";\nimport { arrSum } from \"../../tsgf/Utils\";\nimport { buildGuid } from \"../ServerUtils\";\n\nexport interface IMatchFromRoomJoinUsOnServer {\n    /**要人的房间ID*/\n    roomId: string;\n    /**当前应有玩家数量(匹配管理器会自动更新), 包含匹配进来(但可能还没连到服务器)和自主进入的玩家*/\n    currPlayerCount: number;\n    /**按队伍分组所有玩家(包含已经在房间的和匹配即将进房间的), 如果没队伍则只有一个元素,teamId=''*/\n    teamsPlayerIds: ITeamPlayerIds[];\n}\nexport interface IMatchParamsFromRoomJoinUsOnServer extends IMatchParamsBase {\n    /**发起类型是房间招人*/\n    matchFromType: EMatchFromType.RoomJoinUs;\n    /**匹配发起的玩家信息*/\n    matchFromInfo: IMatchFromRoomJoinUsOnServer;\n}\n\n//定义掩码数据结构加速队伍匹配计算\ninterface ITeamMatchPlayerMask {\n\n}\n\n\nexport interface IMatchParamsFromPlayerOnServer extends IMatchParamsFromPlayer {\n}\n\n\n/**房间全玩家发起匹配的来源信息(服务端)*/\nexport interface IMatchFromRoomAllPlayersOnServer extends IMatchFromRoomAllPlayers {\n    /**房间中的所有玩家id*/\n    playerIds: string[];\n    /**按队伍分组所有玩家(包含已经在房间的和匹配即将进房间的), 如果没队伍则只有一个元素,teamId=''*/\n    teamsPlayerIds: ITeamPlayerIds[];\n}\n/**房间全玩家发起匹配的参数(服务端)*/\nexport interface IMatchParamsFromRoomAllPlayerOnServer extends IMatchParamsBase {\n    /**发起类型是房间全玩家*/\n    matchFromType: EMatchFromType.RoomAllPlayers;\n    /**匹配发起的附加信息*/\n    matchFromInfo: IMatchFromRoomAllPlayersOnServer;\n}\n\n/**来自玩家的匹配参数*/\nexport type IMatchRequestParamsFromPlayer =\n    IMatchParamsFromPlayerOnServer\n    | IMatchParamsFromRoomAllPlayerOnServer;\n\n/**匹配请求发起的参数*/\nexport type IMatchRequestParams = IMatchParamsFromRoomJoinUsOnServer | IMatchRequestParamsFromPlayer;\n\n\n/**匹配请求的基础字段(匹配参数被匹配服务器初始化后会附加的字段)*/\nexport type IMatchRequestBase = {\n    /**匹配请求ID，到服务端时生成唯一ID*/\n    matchReqId: string;\n    /**请求匹配时间(毫秒级时间戳)*/\n    requestTime: number;\n    /**开始匹配时间(毫秒级时间戳)，只有匹配服务器收到请求后才有值*/\n    startMatchTime: number;\n\n    /**\n     * 匹配请求分组标识, 所有因素组成这个分组标识, 不同的标识匹配不互通! \n     * 组成格式为: 匹配自定义类型_匹配器标识_maxPlayers_队伍相关配置\n     * */\n    matchReqGroupKey: string;\n};\n\n/**所有种类的匹配请求(服务器初始化后的)*/\nexport type IMatchRequest = IMatchRequestParams & IMatchRequestBase;\n/**仅来自玩家的匹配请求(服务器初始化后的)*/\nexport type IMatchRequestFromPlayer = IMatchRequestParamsFromPlayer & IMatchRequestBase;\n\n/**匹配操作类型*/\nexport enum EMatchProcType {\n    /**发起匹配*/\n    RequestMatch = 1,\n    /**取消匹配*/\n    CancelMatch = 2,\n}\n/**请求匹配操作*/\ninterface IRequestMatchProc {\n    procType: EMatchProcType.RequestMatch;\n    /**匹配请求ID, 匹配请求数据需调用 MatchRequestHelper 来获取全局匹配请求最新的数据 (防止请求先被取消,队列才收到)*/\n    matchReqId: string;\n}\n/**取消匹配操作*/\ninterface ICancelMatchProc {\n    procType: EMatchProcType.CancelMatch;\n    matchReqId: string;\n}\n\n/**匹配操作*/\nexport type IMatchProc = IRequestMatchProc | ICancelMatchProc;\n\n\n/**匹配器执行结果*/\nexport interface IMatcherExecResult {\n    /**匹配是否有结果了*/\n    hasResult: boolean;\n    /**匹配结果错误时放错误消息*/\n    resultErrMsg?: string | null;\n    /**匹配结果错误时放错误码 */\n    resultErrCode?: ErrorCodes;\n\n    /**匹配结果中有创建房间的结果*/\n    resultCreateRoom?: IMatcherExecResultCreateRoom[];\n    /**匹配结果中要加入房间的结果*/\n    resultJoinRoom?: IMatcherExecResultJoinRoom[];\n}\n\n/**匹配请求的玩家结果数据,一个匹配请求一个对象, 包含多个玩家结果*/\nexport interface IMatchRequestPlayerResults {\n    matchReqId: string;\n    matchPlayerResults: IMatchPlayerResult[];\n}\n\n/**匹配器执行结果有创建房间的操作*/\nexport interface IMatcherExecResultCreateRoom {\n    /**创建房间的参数*/\n    createRoomPara: ICreateRoomPara;\n    /**匹配请求玩家结果数据*/\n    matchRequestPlayerResults: IMatchRequestPlayerResults[];\n    /**是否开启房间招人匹配(可能有的情况:原先就是房间招人匹配但没招满;玩家匹配满足最小人数但还没招满;)*/\n    roomJoinUsMatch: boolean;\n}\n/**匹配器执行结果有加入房间的操作*/\nexport interface IMatcherExecResultJoinRoom {\n    /**要加入的房间*/\n    joinRoomId: string;\n    /**匹配请求玩家结果数据*/\n    matchRequestPlayerResults: IMatchRequestPlayerResults[];\n    /**匹配结果表示要加入的那个房间, 是否应该继续招人匹配, 还是停止招人匹配*/\n    roomJoinUsMatch: boolean;\n}\n\n/**匹配结果通知消息*/\nexport interface IMatchResultNotify {\n    /**匹配请求*/\n    request: IMatchRequest,\n\n    /**匹配结果，失败的错误码*/\n    result: IResult<IMatchResult>;\n}\n\n/**\n * 根据匹配参数生成匹配参数的分组标识\n *\n * @param params\n * @returns\n */\nexport function buildMatchGroupKey(params: IMatchRequestParams): string {\n    //固定的参数\n    let key = `${params.matchType ?? ''}_${params.matcherKey}_${params.maxPlayers}`;\n\n    //开始队伍的部分\n    if (params.teamParams) {\n        if (params.teamParams.fixedTeamInfoList) {\n            key += '_FixedTeam:'\n                + params.teamParams.fixedTeamInfoList\n                    .map(t => `${t.id}-${t.minPlayers}-${t.maxPlayers}`)\n                    .join('|');\n        } else if (params.teamParams.fixedTeamCount) {\n            key += '_FixedTeam:';\n            let sp = '';\n            for (let i = 0; i < params.teamParams.fixedTeamCount; i++) {\n                key += sp;\n                sp = '|';\n                key += `${i + 1}-${params.teamParams.fixedTeamMinPlayers}-${params.teamParams.fixedTeamMaxPlayers}`\n            }\n        } else if (params.teamParams.freeTeamMinPlayers && params.teamParams.freeTeamMaxPlayers) {\n            key += `_FreeTeam:${params.teamParams.freeTeamMinPlayers}-${params.teamParams.freeTeamMaxPlayers}`;\n        }\n    }\n\n    //返回\n    return key;\n}\n\n/**\n * 初始化匹配参数,转为匹配请求\n *\n * @param matchParams\n * @returns\n */\nexport function initMatchRequest(matchParams: IMatchRequestParams, limit = true): IMatchRequest {\n    let req: IMatchRequest = matchParams as IMatchRequest;\n    req.matchReqId = buildGuid('MatchReq_');\n    req.requestTime = Date.now();\n    req.matchReqGroupKey = buildMatchGroupKey(matchParams);\n    if (!req.matchTimeoutSec) req.matchTimeoutSec = 60;//设置默认60秒\n    if (limit) {\n        //默认需要限制参数\n        if (req.matchTimeoutSec > 60) req.matchTimeoutSec = 60;//设置默认60秒\n    }\n    if (req.matchFromType === EMatchFromType.RoomJoinUs) {\n        if (!req.matchFromInfo.teamsPlayerIds) {\n            req.matchFromInfo.teamsPlayerIds = [{ teamId: '', playerIds: [] }];\n        }\n    }else{\n\n    }\n    return req;\n}\n/**\n * 根据一个来源的匹配请求以及房间相关信息,构造一个房间招人的匹配请求\n *\n * @param roomMatchReq\n * @param roomId\n * @param teamsPlayerIds\n * @returns\n */\nexport function buildRoomJoinUsMatchRequest(roomMatchReq: IMatchRequest, roomId: string, teamsPlayerIds: ITeamPlayerIds[]): IMatchRequest {\n    let attr = Object.assign({}, roomMatchReq.matcherParams);\n    let teamParams = roomMatchReq.teamParams ? Object.assign({}, roomMatchReq.teamParams) : undefined;\n    let reqParams: IMatchRequestParams = {\n        matchTimeoutSec: 999999,\n        matcherKey: roomMatchReq.matcherKey,\n        maxPlayers: roomMatchReq.maxPlayers,\n        matcherParams: attr,\n        matchFromType: EMatchFromType.RoomJoinUs,\n        matchFromInfo: {\n            roomId: roomId,\n            currPlayerCount: arrSum(teamsPlayerIds, t => t.playerIds.length),\n            teamsPlayerIds: teamsPlayerIds.slice(),\n        },\n        teamParams: teamParams,\n    };\n    //招人匹配不需要限制参数\n    let req: IMatchRequest = initMatchRequest(reqParams, false);\n    return req;\n}"]}